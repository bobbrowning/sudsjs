
***** Tracing transactions from client: ::ffff:192.168.0.56 only *****
Date: 2021-08-21T15:43:19.507Z
Next config refresh: 2021-08-21T15:44:19.507Z  (1 minutes)
Control file: ./trace.config
Maximum depth of nested objects: 8
Level:  verbose
Log file: trace.log

------------------------------------------------------------
admin.js:52:11 -> 0.004 seconds - level norm  
{
query: { table: 'user',  mode: 'listrow',  id: '35',  }, 
body: { }, 
}

------------------------------------------------------------
admin.js:56:11 -> 0.005 seconds - level min  
############################################################
{
start: 'admin', 
allParms: { table: 'user',  mode: 'listrow',  id: '35',  }, 
}

------------------------------------------------------------
get-row.js:9:9 -> 0.005 seconds - level norm  
{ inputs: { 0: 'user',  1: '35',  },  }

------------------------------------------------------------
table-data.js:9:9 -> 0.005 seconds - level verbose  
{ inputs: { 0: 'user',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.005 seconds - level verbose  
'Users'

------------------------------------------------------------
table-data.js:26:13 -> 0.005 seconds - level verbose  
'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.'

------------------------------------------------------------
table-data.js:26:13 -> 0.005 seconds - level verbose  
{ all: [ 'sales',  'purchasing',  'admin',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.006 seconds - level verbose  
'Add a new user'

------------------------------------------------------------
table-data.js:26:13 -> 0.006 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:26:13 -> 0.006 seconds - level verbose  
{
columns: [
  'id', 
  'fullName', 
  'emailAddress', 
  'userType', 
  'organisation', 
  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.006 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.006 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.006 seconds - level verbose  
'User'

------------------------------------------------------------
table-data.js:100:9 -> 0.007 seconds - level verbose  
{
canedit: false, 
permission: undefined, 
mergedpermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
get-row.js:12:9 -> 0.007 seconds - level norm  
{
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
get-row.js:14:9 -> 0.007 seconds - level norm  
'id'
'35'

------------------------------------------------------------
get-row.js:16:9 -> 0.007 seconds - level norm  
{ searches: [ [ 'id',  'eq',  '35',  ],  ],  }

------------------------------------------------------------
get-rows.js:26:9 -> 0.007 seconds - level norm  
{
input: {
  0: 'user', 
  1: { searches: [ [ 'id',  'eq',  '35',  ],  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:9:10 -> 0.007 seconds - level norm  
{ inputs: { 0: 'user',  1: '#superuser#',  },  }

------------------------------------------------------------
merge-attributes.js:13:10 -> 0.010 seconds - level verbose  
{
tableData: {
  friendlyName: 'Users', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: {
    columns: [
      'id', 
      'fullName', 
      'emailAddress', 
      'userType', 
      'organisation', 
      ], 
    }, 
  groups: {
    basics: {
      static: true, 
      open: 'none', 
      columns: [
        'fullName', 
        'emailAddress', 
        'userType', 
        'isOrg', 
        ], 
      }, 
    profile: {
      friendlyName: 'profile', 
      open: 'none', 
      columns: [ 'organisation',  'business',  'notes',  ], 
      }, 
    location: {
      friendlyName: 'How to contact', 
      open: 'none', 
      columns: [
        'streetAddress', 
        'zip', 
        'country', 
        'region', 
        'mainPhone', 
        'mobilePhone', 
        ], 
      }, 
    contacts: {
      friendlyName: 'Contacts', 
      open: 'contacts', 
      columns: [
        'people', 
        'contacts', 
        'lastContact', 
        'nextAction', 
        'nextActionDate', 
        ], 
      }, 
    sales: {
      friendlyName: 'Sales', 
      open: 'salesorders', 
      columns: [ 'salesorders',  'lastSale',  ], 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      friendlyName: 'Products supplied', 
      open: 'products', 
      columns: [ 'products',  'purchaseorders',  ], 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    website: {
      friendlyName: 'Website', 
      open: 'website', 
      columns: [ 'webpages',  ], 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    other: {
      friendlyName: 'Other', 
      columns: [
        'id', 
        'createdAt', 
        'updatedAt', 
        'updatedBy', 
        'password', 
        'salt', 
        'forgottenPasswordToken', 
        'forgottenPasswordExpire', 
        'isSuperAdmin', 
        'lastSeenAt', 
        'permission', 
        ], 
      }, 
    }, 
  attributes: {
    id: {
      friendlyName: 'User No', 
      type: 'number', 
      primaryKey: true, 
      autoincrement: true, 
      database: { }, 
      process: { }, 
      description: 'User No', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    createdAt: {
      friendlyName: 'Date created', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { createdAt: true,  }, 
      description: 'Date created', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedAt: {
      friendlyName: 'Date last updated', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { updatedAt: true,  }, 
      description: 'Date last updated', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedBy: {
      friendlyName: 'Last updated by', 
      description: 'The person who last updated the row.', 
      type: 'number', 
      model: 'user', 
      process: { updatedBy: true,  }, 
      database: { }, 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    fullName: {
      type: 'string', 
      description: 'Full representation of the user's name.', 
      example: 'Mary Sue van der McHenst', 
      input: {
        required: true, 
        placeholder: 'Please enter the persons full name', 
        class: 'form-control', 
        type: 'text', 
        }, 
      friendlyName: 'Full name', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    emailAddress: {
      type: 'string', 
      friendlyName: 'Email address', 
      database: { }, 
      process: { }, 
      description: 'Email address', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    password: {
      type: 'string', 
      description: 'Securely hashed representation of the user's login password.', 
      permission: '#superuser#', 
      example: '2$28a8eabna301089103-13948134nad', 
      friendlyName: 'Password', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salt: {
      type: 'string', 
      permission: '#superuser#', 
      friendlyName: 'Salt', 
      database: { }, 
      process: { }, 
      description: 'Salt', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    forgottenPasswordToken: {
      permission: '#superuser#', 
      type: 'string', 
      friendlyName: 'Forgotten password token', 
      database: { }, 
      process: { }, 
      description: 'Forgotten password token', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    forgottenPasswordExpire: {
      permission: '#superuser#', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Forgotten password expire', 
      process: { }, 
      description: 'Forgotten password expire', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    isSuperAdmin: {
      type: 'boolean', 
      description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
      friendlyName: 'Is super admin', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'checkbox',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSeenAt: {
      type: 'number', 
      description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
      example: 1502844074211, 
      input: { type: 'date',  class: 'form-control',  }, 
      display: { type: 'date',  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Last seen at', 
      process: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    streetAddress: {
      type: 'string', 
      input: {
        type: 'textarea', 
        rows: 5, 
        cols: 60, 
        placeholder: 'Please enter the street address of the user', 
        class: 'form-control', 
        }, 
      friendlyName: 'Street address', 
      database: { }, 
      process: { }, 
      description: 'Street address', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    zip: {
      type: 'string', 
      friendlyName: 'Zip', 
      database: { }, 
      process: { }, 
      description: 'Zip', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    country: {
      type: 'string', 
      friendlyName: 'Country', 
      database: { }, 
      process: { }, 
      description: 'Country', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    region: {
      description: 'This is an example of a select using the data in the isIn attribute.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: [
          'Europe', 
          'Middle East', 
          'Africa', 
          'South Asia', 
          'East', 
          'N America', 
          'S America', 
          ], 
        class: 'form-control', 
        }, 
      friendlyName: 'Region', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    permission: {
      friendlyName: 'Permission set', 
      type: 'string', 
      description: 'Permission set.', 
      extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
      allowNull: true, 
      input: {
        type: 'select', 
        values: Function, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    isOrg: {
      friendlyName: 'Person or Business?', 
      type: 'string', 
      description: 'This record describes a business rather than a person', 
      input: {
        type: 'radio', 
        values: { P: 'Person',  B: 'Business/Organisation',  }, 
        required: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    business: {
      type: 'string', 
      description: 'Description of the customer's business', 
      friendlyName: 'The type of business.', 
      input: {
        type: 'textarea', 
        rows: 3, 
        cols: 60, 
        placeholder: 'Please enter a description of the user's business and place in the organisation', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    organisation: {
      friendlyName: 'Organisation', 
      model: 'user', 
      description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
      input: {
        type: 'select', 
        search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    userType: {
      description: 'The type of user.  Customer/Supplier or in-house.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: {
          L: 'Sales lead', 
          P: 'Prospect', 
          C: 'Customer', 
          S: 'Supplier', 
          I: 'In-house staff', 
          N: 'No longer considered a prospect', 
          O: 'Other', 
          }, 
        required: true, 
        class: 'form-control', 
        }, 
      friendlyName: 'User type', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastContact: {
      model: 'contacts', 
      child: false, 
      friendlyName: 'Last contact', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Last contact', 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextActionDate: {
      friendlyName: 'Next action date', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
      input: {
        type: 'date', 
        hidden: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextAction: {
      friendlyName: 'Next action', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'text', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mobilePhone: {
      type: 'string', 
      friendlyName: 'Mobile phone', 
      database: { }, 
      process: { }, 
      description: 'Mobile phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mainPhone: {
      type: 'string', 
      friendlyName: 'Main phone', 
      database: { }, 
      process: { }, 
      description: 'Main phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSale: {
      type: 'number', 
      model: 'salesorders', 
      friendlyName: 'Last sale', 
      description: 'Created automatically. This is a link to the last sales order.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    notes: {
      type: 'string', 
      friendlyName: 'Notes', 
      input: {
        type: 'textarea', 
        rows: 6, 
        cols: 60, 
        placeholder: 'Please enter any notes about this user.', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Notes', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    webpages: {
      collection: 'webpages', 
      via: 'author', 
      friendlyName: 'Webpages', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'webpages' via column 'author'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    contacts: {
      collection: 'contacts', 
      via: 'user', 
      collectionList: {
        limit: 5, 
        order: 'date', 
        direction: 'DESC', 
        heading: 'Recent contacts', 
        columns: [ 'id',  'date',  'notes',  'closed',  ], 
        addChildTip: 'Add a new contact for this user.', 
        }, 
      friendlyName: 'Contacts', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'contacts' via column 'user'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salesorders: {
      collection: 'salesorders', 
      via: 'customer', 
      collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
      friendlyName: 'Salesorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'salesorders' via column 'customer'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      collection: 'products', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'price',  'class',  'description',  ], 
        }, 
      friendlyName: 'Products', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'products' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    purchaseorders: {
      collection: 'purchaseorders', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'date',  'status',  'notes',  ], 
        }, 
      friendlyName: 'Purchaseorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    people: {
      friendlyName: 'Associated people', 
      collection: 'user', 
      via: 'organisation', 
      collectionList: {
        columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
        }, 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'user' via column 'organisation'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:21:9 -> 0.011 seconds - level verbose  
{
table: 'user', 
attributes: {
  id: {
    friendlyName: 'User No', 
    type: 'number', 
    primaryKey: true, 
    autoincrement: true, 
    database: { }, 
    process: { }, 
    description: 'User No', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  createdAt: {
    friendlyName: 'Date created', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { createdAt: true,  }, 
    description: 'Date created', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedAt: {
    friendlyName: 'Date last updated', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { updatedAt: true,  }, 
    description: 'Date last updated', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedBy: {
    friendlyName: 'Last updated by', 
    description: 'The person who last updated the row.', 
    type: 'number', 
    model: 'user', 
    process: { updatedBy: true,  }, 
    database: { }, 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  fullName: {
    type: 'string', 
    description: 'Full representation of the user's name.', 
    example: 'Mary Sue van der McHenst', 
    input: {
      required: true, 
      placeholder: 'Please enter the persons full name', 
      class: 'form-control', 
      type: 'text', 
      }, 
    friendlyName: 'Full name', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  emailAddress: {
    type: 'string', 
    friendlyName: 'Email address', 
    database: { }, 
    process: { }, 
    description: 'Email address', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  password: {
    type: 'string', 
    description: 'Securely hashed representation of the user's login password.', 
    permission: '#superuser#', 
    example: '2$28a8eabna301089103-13948134nad', 
    friendlyName: 'Password', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salt: {
    type: 'string', 
    permission: '#superuser#', 
    friendlyName: 'Salt', 
    database: { }, 
    process: { }, 
    description: 'Salt', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  forgottenPasswordToken: {
    permission: '#superuser#', 
    type: 'string', 
    friendlyName: 'Forgotten password token', 
    database: { }, 
    process: { }, 
    description: 'Forgotten password token', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  forgottenPasswordExpire: {
    permission: '#superuser#', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Forgotten password expire', 
    process: { }, 
    description: 'Forgotten password expire', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  isSuperAdmin: {
    type: 'boolean', 
    description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
    friendlyName: 'Is super admin', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'checkbox',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSeenAt: {
    type: 'number', 
    description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
    example: 1502844074211, 
    input: { type: 'date',  class: 'form-control',  }, 
    display: { type: 'date',  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Last seen at', 
    process: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  streetAddress: {
    type: 'string', 
    input: {
      type: 'textarea', 
      rows: 5, 
      cols: 60, 
      placeholder: 'Please enter the street address of the user', 
      class: 'form-control', 
      }, 
    friendlyName: 'Street address', 
    database: { }, 
    process: { }, 
    description: 'Street address', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  zip: {
    type: 'string', 
    friendlyName: 'Zip', 
    database: { }, 
    process: { }, 
    description: 'Zip', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  country: {
    type: 'string', 
    friendlyName: 'Country', 
    database: { }, 
    process: { }, 
    description: 'Country', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  region: {
    description: 'This is an example of a select using the data in the isIn attribute.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: [
        'Europe', 
        'Middle East', 
        'Africa', 
        'South Asia', 
        'East', 
        'N America', 
        'S America', 
        ], 
      class: 'form-control', 
      }, 
    friendlyName: 'Region', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  permission: {
    friendlyName: 'Permission set', 
    type: 'string', 
    description: 'Permission set.', 
    extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
    allowNull: true, 
    input: {
      type: 'select', 
      values: Function, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  isOrg: {
    friendlyName: 'Person or Business?', 
    type: 'string', 
    description: 'This record describes a business rather than a person', 
    input: {
      type: 'radio', 
      values: { P: 'Person',  B: 'Business/Organisation',  }, 
      required: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  business: {
    type: 'string', 
    description: 'Description of the customer's business', 
    friendlyName: 'The type of business.', 
    input: {
      type: 'textarea', 
      rows: 3, 
      cols: 60, 
      placeholder: 'Please enter a description of the user's business and place in the organisation', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  organisation: {
    friendlyName: 'Organisation', 
    model: 'user', 
    description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
    input: {
      type: 'select', 
      search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  userType: {
    description: 'The type of user.  Customer/Supplier or in-house.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: {
        L: 'Sales lead', 
        P: 'Prospect', 
        C: 'Customer', 
        S: 'Supplier', 
        I: 'In-house staff', 
        N: 'No longer considered a prospect', 
        O: 'Other', 
        }, 
      required: true, 
      class: 'form-control', 
      }, 
    friendlyName: 'User type', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastContact: {
    model: 'contacts', 
    child: false, 
    friendlyName: 'Last contact', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Last contact', 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextActionDate: {
    friendlyName: 'Next action date', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
    input: {
      type: 'date', 
      hidden: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextAction: {
    friendlyName: 'Next action', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'text', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mobilePhone: {
    type: 'string', 
    friendlyName: 'Mobile phone', 
    database: { }, 
    process: { }, 
    description: 'Mobile phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mainPhone: {
    type: 'string', 
    friendlyName: 'Main phone', 
    database: { }, 
    process: { }, 
    description: 'Main phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSale: {
    type: 'number', 
    model: 'salesorders', 
    friendlyName: 'Last sale', 
    description: 'Created automatically. This is a link to the last sales order.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  notes: {
    type: 'string', 
    friendlyName: 'Notes', 
    input: {
      type: 'textarea', 
      rows: 6, 
      cols: 60, 
      placeholder: 'Please enter any notes about this user.', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Notes', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  webpages: {
    collection: 'webpages', 
    via: 'author', 
    friendlyName: 'Webpages', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'webpages' via column 'author'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'web',  ],  }, 
    }, 
  contacts: {
    collection: 'contacts', 
    via: 'user', 
    collectionList: {
      limit: 5, 
      order: 'date', 
      direction: 'DESC', 
      heading: 'Recent contacts', 
      columns: [ 'id',  'date',  'notes',  'closed',  ], 
      addChildTip: 'Add a new contact for this user.', 
      }, 
    friendlyName: 'Contacts', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'contacts' via column 'user'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salesorders: {
    collection: 'salesorders', 
    via: 'customer', 
    collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
    friendlyName: 'Salesorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'salesorders' via column 'customer'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  products: {
    collection: 'products', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'price',  'class',  'description',  ], 
      }, 
    friendlyName: 'Products', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'products' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  purchaseorders: {
    collection: 'purchaseorders', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'date',  'status',  'notes',  ], 
      }, 
    friendlyName: 'Purchaseorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  people: {
    friendlyName: 'Associated people', 
    collection: 'user', 
    via: 'organisation', 
    collectionList: {
      columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
      }, 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'user' via column 'organisation'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  }, 
}

------------------------------------------------------------
invert-groups.js:5:9 -> 0.015 seconds - level verbose  
{
inputs: {
  0: {
    friendlyName: 'Users', 
    description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
    permission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
    addRow: 'Add a new user', 
    rowTitle: Function, 
    list: {
      columns: [
        'id', 
        'fullName', 
        'emailAddress', 
        'userType', 
        'organisation', 
        ], 
      }, 
    groups: {
      basics: {
        static: true, 
        open: 'none', 
        columns: [
          'fullName', 
          'emailAddress', 
          'userType', 
          'isOrg', 
          ], 
        }, 
      profile: {
        friendlyName: 'profile', 
        open: 'none', 
        columns: [ 'organisation',  'business',  'notes',  ], 
        }, 
      location: {
        friendlyName: 'How to contact', 
        open: 'none', 
        columns: [
          'streetAddress', 
          'zip', 
          'country', 
          'region', 
          'mainPhone', 
          'mobilePhone', 
          ], 
        }, 
      contacts: {
        friendlyName: 'Contacts', 
        open: 'contacts', 
        columns: [
          'people', 
          'contacts', 
          'lastContact', 
          'nextAction', 
          'nextActionDate', 
          ], 
        }, 
      sales: {
        friendlyName: 'Sales', 
        open: 'salesorders', 
        columns: [ 'salesorders',  'lastSale',  ], 
        permission: { all: [ 'admin',  'sales',  ],  }, 
        }, 
      products: {
        friendlyName: 'Products supplied', 
        open: 'products', 
        columns: [ 'products',  'purchaseorders',  ], 
        permission: {
          all: [ 'admin',  'purchasing',  ], 
          view: [ 'sales',  ], 
          }, 
        }, 
      website: {
        friendlyName: 'Website', 
        open: 'website', 
        columns: [ 'webpages',  ], 
        permission: { all: [ 'admin',  'web',  ],  }, 
        }, 
      other: {
        friendlyName: 'Other', 
        columns: [
          'id', 
          'createdAt', 
          'updatedAt', 
          'updatedBy', 
          'password', 
          'salt', 
          'forgottenPasswordToken', 
          'forgottenPasswordExpire', 
          'isSuperAdmin', 
          'lastSeenAt', 
          'permission', 
          ], 
        }, 
      }, 
    attributes: {
      id: {
        friendlyName: 'User No', 
        type: 'number', 
        primaryKey: true, 
        autoincrement: true, 
        database: { }, 
        process: { }, 
        description: 'User No', 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      createdAt: {
        friendlyName: 'Date created', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        process: { createdAt: true,  }, 
        description: 'Date created', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      updatedAt: {
        friendlyName: 'Date last updated', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        process: { updatedAt: true,  }, 
        description: 'Date last updated', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      updatedBy: {
        friendlyName: 'Last updated by', 
        description: 'The person who last updated the row.', 
        type: 'number', 
        model: 'user', 
        process: { updatedBy: true,  }, 
        database: { }, 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      fullName: {
        type: 'string', 
        description: 'Full representation of the user's name.', 
        example: 'Mary Sue van der McHenst', 
        input: {
          required: true, 
          placeholder: 'Please enter the persons full name', 
          class: 'form-control', 
          type: 'text', 
          }, 
        friendlyName: 'Full name', 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      emailAddress: {
        type: 'string', 
        friendlyName: 'Email address', 
        database: { }, 
        process: { }, 
        description: 'Email address', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      password: {
        type: 'string', 
        description: 'Securely hashed representation of the user's login password.', 
        permission: '#superuser#', 
        example: '2$28a8eabna301089103-13948134nad', 
        friendlyName: 'Password', 
        database: { }, 
        process: { }, 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      salt: {
        type: 'string', 
        permission: '#superuser#', 
        friendlyName: 'Salt', 
        database: { }, 
        process: { }, 
        description: 'Salt', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      forgottenPasswordToken: {
        permission: '#superuser#', 
        type: 'string', 
        friendlyName: 'Forgotten password token', 
        database: { }, 
        process: { }, 
        description: 'Forgotten password token', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      forgottenPasswordExpire: {
        permission: '#superuser#', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        friendlyName: 'Forgotten password expire', 
        process: { }, 
        description: 'Forgotten password expire', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      isSuperAdmin: {
        type: 'boolean', 
        description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
        friendlyName: 'Is super admin', 
        database: { }, 
        process: { }, 
        input: { class: 'form-control',  type: 'checkbox',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      lastSeenAt: {
        type: 'number', 
        description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
        example: 1502844074211, 
        input: { type: 'date',  class: 'form-control',  }, 
        display: { type: 'date',  }, 
        database: { type: 'biginteger',  }, 
        friendlyName: 'Last seen at', 
        process: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      streetAddress: {
        type: 'string', 
        input: {
          type: 'textarea', 
          rows: 5, 
          cols: 60, 
          placeholder: 'Please enter the street address of the user', 
          class: 'form-control', 
          }, 
        friendlyName: 'Street address', 
        database: { }, 
        process: { }, 
        description: 'Street address', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      zip: {
        type: 'string', 
        friendlyName: 'Zip', 
        database: { }, 
        process: { }, 
        description: 'Zip', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      country: {
        type: 'string', 
        friendlyName: 'Country', 
        database: { }, 
        process: { }, 
        description: 'Country', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      region: {
        description: 'This is an example of a select using the data in the isIn attribute.', 
        type: 'string', 
        input: {
          type: 'select', 
          values: [
            'Europe', 
            'Middle East', 
            'Africa', 
            'South Asia', 
            'East', 
            'N America', 
            'S America', 
            ], 
          class: 'form-control', 
          }, 
        friendlyName: 'Region', 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      permission: {
        friendlyName: 'Permission set', 
        type: 'string', 
        description: 'Permission set.', 
        extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
        allowNull: true, 
        input: {
          type: 'select', 
          values: Function, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      isOrg: {
        friendlyName: 'Person or Business?', 
        type: 'string', 
        description: 'This record describes a business rather than a person', 
        input: {
          type: 'radio', 
          values: { P: 'Person',  B: 'Business/Organisation',  }, 
          required: true, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      business: {
        type: 'string', 
        description: 'Description of the customer's business', 
        friendlyName: 'The type of business.', 
        input: {
          type: 'textarea', 
          rows: 3, 
          cols: 60, 
          placeholder: 'Please enter a description of the user's business and place in the organisation', 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      organisation: {
        friendlyName: 'Organisation', 
        model: 'user', 
        description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
        input: {
          type: 'select', 
          search: { searches: [ [Deeper Object below level 8],  ],  }, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        type: 'number', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      userType: {
        description: 'The type of user.  Customer/Supplier or in-house.', 
        type: 'string', 
        input: {
          type: 'select', 
          values: {
            L: 'Sales lead', 
            P: 'Prospect', 
            C: 'Customer', 
            S: 'Supplier', 
            I: 'In-house staff', 
            N: 'No longer considered a prospect', 
            O: 'Other', 
            }, 
          required: true, 
          class: 'form-control', 
          }, 
        friendlyName: 'User type', 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      lastContact: {
        model: 'contacts', 
        child: false, 
        friendlyName: 'Last contact', 
        input: {
          hidden: true, 
          class: 'form-control', 
          type: 'number', 
          }, 
        database: { }, 
        process: { }, 
        description: 'Last contact', 
        type: 'number', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      nextActionDate: {
        friendlyName: 'Next action date', 
        type: 'string', 
        description: 'When a contact is entered, this is updated.', 
        extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
        input: {
          type: 'date', 
          hidden: true, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      nextAction: {
        friendlyName: 'Next action', 
        type: 'string', 
        description: 'When a contact is entered, this is updated.', 
        extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
        input: {
          hidden: true, 
          class: 'form-control', 
          type: 'text', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      mobilePhone: {
        type: 'string', 
        friendlyName: 'Mobile phone', 
        database: { }, 
        process: { }, 
        description: 'Mobile phone', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      mainPhone: {
        type: 'string', 
        friendlyName: 'Main phone', 
        database: { }, 
        process: { }, 
        description: 'Main phone', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      lastSale: {
        type: 'number', 
        model: 'salesorders', 
        friendlyName: 'Last sale', 
        description: 'Created automatically. This is a link to the last sales order.', 
        input: {
          hidden: true, 
          class: 'form-control', 
          type: 'number', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: { all: [ 'admin',  'sales',  ],  }, 
        }, 
      notes: {
        type: 'string', 
        friendlyName: 'Notes', 
        input: {
          type: 'textarea', 
          rows: 6, 
          cols: 60, 
          placeholder: 'Please enter any notes about this user.', 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        description: 'Notes', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      webpages: {
        collection: 'webpages', 
        via: 'author', 
        friendlyName: 'Webpages', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'webpages' via column 'author'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: { all: [ 'admin',  'web',  ],  }, 
        }, 
      contacts: {
        collection: 'contacts', 
        via: 'user', 
        collectionList: {
          limit: 5, 
          order: 'date', 
          direction: 'DESC', 
          heading: 'Recent contacts', 
          columns: [ 'id',  'date',  'notes',  'closed',  ], 
          addChildTip: 'Add a new contact for this user.', 
          }, 
        friendlyName: 'Contacts', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'contacts' via column 'user'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      salesorders: {
        collection: 'salesorders', 
        via: 'customer', 
        collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
        friendlyName: 'Salesorders', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'salesorders' via column 'customer'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: { all: [ 'admin',  'sales',  ],  }, 
        }, 
      products: {
        collection: 'products', 
        via: 'supplier', 
        collectionList: {
          columns: [ 'name',  'price',  'class',  'description',  ], 
          }, 
        friendlyName: 'Products', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'products' via column 'supplier'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: {
          all: [ 'admin',  'purchasing',  ], 
          view: [ 'sales',  ], 
          }, 
        }, 
      purchaseorders: {
        collection: 'purchaseorders', 
        via: 'supplier', 
        collectionList: {
          columns: [ 'name',  'date',  'status',  'notes',  ], 
          }, 
        friendlyName: 'Purchaseorders', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: {
          all: [ 'admin',  'purchasing',  ], 
          view: [ 'sales',  ], 
          }, 
        }, 
      people: {
        friendlyName: 'Associated people', 
        collection: 'user', 
        via: 'organisation', 
        collectionList: {
          columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
          }, 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'user' via column 'organisation'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      }, 
    }, 
  1: {
    id: {
      friendlyName: 'User No', 
      type: 'number', 
      primaryKey: true, 
      autoincrement: true, 
      database: { }, 
      process: { }, 
      description: 'User No', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    createdAt: {
      friendlyName: 'Date created', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { createdAt: true,  }, 
      description: 'Date created', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedAt: {
      friendlyName: 'Date last updated', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { updatedAt: true,  }, 
      description: 'Date last updated', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedBy: {
      friendlyName: 'Last updated by', 
      description: 'The person who last updated the row.', 
      type: 'number', 
      model: 'user', 
      process: { updatedBy: true,  }, 
      database: { }, 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    fullName: {
      type: 'string', 
      description: 'Full representation of the user's name.', 
      example: 'Mary Sue van der McHenst', 
      input: {
        required: true, 
        placeholder: 'Please enter the persons full name', 
        class: 'form-control', 
        type: 'text', 
        }, 
      friendlyName: 'Full name', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    emailAddress: {
      type: 'string', 
      friendlyName: 'Email address', 
      database: { }, 
      process: { }, 
      description: 'Email address', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    password: {
      type: 'string', 
      description: 'Securely hashed representation of the user's login password.', 
      permission: '#superuser#', 
      example: '2$28a8eabna301089103-13948134nad', 
      friendlyName: 'Password', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salt: {
      type: 'string', 
      permission: '#superuser#', 
      friendlyName: 'Salt', 
      database: { }, 
      process: { }, 
      description: 'Salt', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    forgottenPasswordToken: {
      permission: '#superuser#', 
      type: 'string', 
      friendlyName: 'Forgotten password token', 
      database: { }, 
      process: { }, 
      description: 'Forgotten password token', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    forgottenPasswordExpire: {
      permission: '#superuser#', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Forgotten password expire', 
      process: { }, 
      description: 'Forgotten password expire', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    isSuperAdmin: {
      type: 'boolean', 
      description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
      friendlyName: 'Is super admin', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'checkbox',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSeenAt: {
      type: 'number', 
      description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
      example: 1502844074211, 
      input: { type: 'date',  class: 'form-control',  }, 
      display: { type: 'date',  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Last seen at', 
      process: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    streetAddress: {
      type: 'string', 
      input: {
        type: 'textarea', 
        rows: 5, 
        cols: 60, 
        placeholder: 'Please enter the street address of the user', 
        class: 'form-control', 
        }, 
      friendlyName: 'Street address', 
      database: { }, 
      process: { }, 
      description: 'Street address', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    zip: {
      type: 'string', 
      friendlyName: 'Zip', 
      database: { }, 
      process: { }, 
      description: 'Zip', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    country: {
      type: 'string', 
      friendlyName: 'Country', 
      database: { }, 
      process: { }, 
      description: 'Country', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    region: {
      description: 'This is an example of a select using the data in the isIn attribute.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: [
          'Europe', 
          'Middle East', 
          'Africa', 
          'South Asia', 
          'East', 
          'N America', 
          'S America', 
          ], 
        class: 'form-control', 
        }, 
      friendlyName: 'Region', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    permission: {
      friendlyName: 'Permission set', 
      type: 'string', 
      description: 'Permission set.', 
      extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
      allowNull: true, 
      input: {
        type: 'select', 
        values: Function, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    isOrg: {
      friendlyName: 'Person or Business?', 
      type: 'string', 
      description: 'This record describes a business rather than a person', 
      input: {
        type: 'radio', 
        values: { P: 'Person',  B: 'Business/Organisation',  }, 
        required: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    business: {
      type: 'string', 
      description: 'Description of the customer's business', 
      friendlyName: 'The type of business.', 
      input: {
        type: 'textarea', 
        rows: 3, 
        cols: 60, 
        placeholder: 'Please enter a description of the user's business and place in the organisation', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    organisation: {
      friendlyName: 'Organisation', 
      model: 'user', 
      description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
      input: {
        type: 'select', 
        search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    userType: {
      description: 'The type of user.  Customer/Supplier or in-house.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: {
          L: 'Sales lead', 
          P: 'Prospect', 
          C: 'Customer', 
          S: 'Supplier', 
          I: 'In-house staff', 
          N: 'No longer considered a prospect', 
          O: 'Other', 
          }, 
        required: true, 
        class: 'form-control', 
        }, 
      friendlyName: 'User type', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastContact: {
      model: 'contacts', 
      child: false, 
      friendlyName: 'Last contact', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Last contact', 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextActionDate: {
      friendlyName: 'Next action date', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
      input: {
        type: 'date', 
        hidden: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextAction: {
      friendlyName: 'Next action', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'text', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mobilePhone: {
      type: 'string', 
      friendlyName: 'Mobile phone', 
      database: { }, 
      process: { }, 
      description: 'Mobile phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mainPhone: {
      type: 'string', 
      friendlyName: 'Main phone', 
      database: { }, 
      process: { }, 
      description: 'Main phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSale: {
      type: 'number', 
      model: 'salesorders', 
      friendlyName: 'Last sale', 
      description: 'Created automatically. This is a link to the last sales order.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    notes: {
      type: 'string', 
      friendlyName: 'Notes', 
      input: {
        type: 'textarea', 
        rows: 6, 
        cols: 60, 
        placeholder: 'Please enter any notes about this user.', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Notes', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    webpages: {
      collection: 'webpages', 
      via: 'author', 
      friendlyName: 'Webpages', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'webpages' via column 'author'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    contacts: {
      collection: 'contacts', 
      via: 'user', 
      collectionList: {
        limit: 5, 
        order: 'date', 
        direction: 'DESC', 
        heading: 'Recent contacts', 
        columns: [ 'id',  'date',  'notes',  'closed',  ], 
        addChildTip: 'Add a new contact for this user.', 
        }, 
      friendlyName: 'Contacts', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'contacts' via column 'user'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salesorders: {
      collection: 'salesorders', 
      via: 'customer', 
      collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
      friendlyName: 'Salesorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'salesorders' via column 'customer'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      collection: 'products', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'price',  'class',  'description',  ], 
        }, 
      friendlyName: 'Products', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'products' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    purchaseorders: {
      collection: 'purchaseorders', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'date',  'status',  'notes',  ], 
        }, 
      friendlyName: 'Purchaseorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    people: {
      friendlyName: 'Associated people', 
      collection: 'user', 
      via: 'organisation', 
      collectionList: {
        columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
        }, 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'user' via column 'organisation'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    }, 
  }, 
}

------------------------------------------------------------
invert-groups.js:16:9 -> 0.016 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
invert-groups.js:18:11 -> 0.016 seconds - level verbose  
'basics'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.016 seconds - level verbose  
'profile'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.016 seconds - level verbose  
'location'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.016 seconds - level verbose  
'contacts'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.016 seconds - level verbose  
'sales'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.016 seconds - level verbose  
'products'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.016 seconds - level verbose  
'website'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.016 seconds - level verbose  
'other'

------------------------------------------------------------
invert-groups.js:31:9 -> 0.016 seconds - level verbose  
{
fullName: 'basics', 
emailAddress: 'basics', 
userType: 'basics', 
isOrg: 'basics', 
organisation: 'profile', 
business: 'profile', 
notes: 'profile', 
streetAddress: 'location', 
zip: 'location', 
country: 'location', 
region: 'location', 
mainPhone: 'location', 
mobilePhone: 'location', 
people: 'contacts', 
contacts: 'contacts', 
lastContact: 'contacts', 
nextAction: 'contacts', 
nextActionDate: 'contacts', 
salesorders: 'sales', 
lastSale: 'sales', 
products: 'products', 
purchaseorders: 'products', 
webpages: 'website', 
id: 'other', 
createdAt: 'other', 
updatedAt: 'other', 
updatedBy: 'other', 
password: 'other', 
salt: 'other', 
forgottenPasswordToken: 'other', 
forgottenPasswordExpire: 'other', 
isSuperAdmin: 'other', 
lastSeenAt: 'other', 
permission: 'other', 
}

------------------------------------------------------------
merge-attributes.js:26:9 -> 0.016 seconds - level verbose  
{
fullName: 'basics', 
emailAddress: 'basics', 
userType: 'basics', 
isOrg: 'basics', 
organisation: 'profile', 
business: 'profile', 
notes: 'profile', 
streetAddress: 'location', 
zip: 'location', 
country: 'location', 
region: 'location', 
mainPhone: 'location', 
mobilePhone: 'location', 
people: 'contacts', 
contacts: 'contacts', 
lastContact: 'contacts', 
nextAction: 'contacts', 
nextActionDate: 'contacts', 
salesorders: 'sales', 
lastSale: 'sales', 
products: 'products', 
purchaseorders: 'products', 
webpages: 'website', 
id: 'other', 
createdAt: 'other', 
updatedAt: 'other', 
updatedBy: 'other', 
password: 'other', 
salt: 'other', 
forgottenPasswordToken: 'other', 
forgottenPasswordExpire: 'other', 
isSuperAdmin: 'other', 
lastSeenAt: 'other', 
permission: 'other', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.017 seconds - level verbose  
{ key: 'id',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.017 seconds - level verbose  
{
key: 'id', 
type: {
  friendlyName: 'User No', 
  type: 'number', 
  primaryKey: true, 
  autoincrement: true, 
  database: { }, 
  process: { }, 
  description: 'User No', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.017 seconds - level verbose  
{ key: 'id',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.017 seconds - level verbose  
{
key: 'id', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.017 seconds - level verbose  
{ key: 'createdAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.017 seconds - level verbose  
{
key: 'createdAt', 
type: {
  friendlyName: 'Date created', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { createdAt: true,  }, 
  description: 'Date created', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.017 seconds - level verbose  
{ key: 'createdAt',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.017 seconds - level verbose  
{
key: 'createdAt', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.017 seconds - level verbose  
{ key: 'updatedAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.017 seconds - level verbose  
{
key: 'updatedAt', 
type: {
  friendlyName: 'Date last updated', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { updatedAt: true,  }, 
  description: 'Date last updated', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.017 seconds - level verbose  
{ key: 'updatedAt',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.018 seconds - level verbose  
{
key: 'updatedAt', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.018 seconds - level verbose  
{ key: 'updatedBy',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.018 seconds - level verbose  
{
key: 'updatedBy', 
type: {
  friendlyName: 'Last updated by', 
  description: 'The person who last updated the row.', 
  type: 'number', 
  model: 'user', 
  process: { updatedBy: true,  }, 
  database: { }, 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.018 seconds - level verbose  
{ key: 'updatedBy',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.018 seconds - level verbose  
{
key: 'updatedBy', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.018 seconds - level verbose  
{ key: 'fullName',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.018 seconds - level verbose  
{
key: 'fullName', 
type: {
  type: 'string', 
  description: 'Full representation of the user's name.', 
  example: 'Mary Sue van der McHenst', 
  input: {
    required: true, 
    placeholder: 'Please enter the persons full name', 
    class: 'form-control', 
    type: 'text', 
    }, 
  friendlyName: 'Full name', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.018 seconds - level verbose  
{ key: 'fullName',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.018 seconds - level verbose  
{
key: 'fullName', 
group: 'basics', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.018 seconds - level verbose  
{ key: 'emailAddress',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.018 seconds - level verbose  
{
key: 'emailAddress', 
type: {
  type: 'string', 
  friendlyName: 'Email address', 
  database: { }, 
  process: { }, 
  description: 'Email address', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.018 seconds - level verbose  
{ key: 'emailAddress',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.019 seconds - level verbose  
{
key: 'emailAddress', 
group: 'basics', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.019 seconds - level verbose  
{ key: 'password',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.019 seconds - level verbose  
{
key: 'password', 
type: {
  type: 'string', 
  description: 'Securely hashed representation of the user's login password.', 
  permission: '#superuser#', 
  example: '2$28a8eabna301089103-13948134nad', 
  friendlyName: 'Password', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.019 seconds - level verbose  
{ key: 'password',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.019 seconds - level verbose  
{
key: 'password', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.019 seconds - level verbose  
{ key: 'salt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.019 seconds - level verbose  
{
key: 'salt', 
type: {
  type: 'string', 
  permission: '#superuser#', 
  friendlyName: 'Salt', 
  database: { }, 
  process: { }, 
  description: 'Salt', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.019 seconds - level verbose  
{ key: 'salt',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.019 seconds - level verbose  
{
key: 'salt', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.019 seconds - level verbose  
{ key: 'forgottenPasswordToken',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.019 seconds - level verbose  
{
key: 'forgottenPasswordToken', 
type: {
  permission: '#superuser#', 
  type: 'string', 
  friendlyName: 'Forgotten password token', 
  database: { }, 
  process: { }, 
  description: 'Forgotten password token', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.019 seconds - level verbose  
{ key: 'forgottenPasswordToken',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.020 seconds - level verbose  
{
key: 'forgottenPasswordToken', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.020 seconds - level verbose  
{ key: 'forgottenPasswordExpire',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.020 seconds - level verbose  
{
key: 'forgottenPasswordExpire', 
type: {
  permission: '#superuser#', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Forgotten password expire', 
  process: { }, 
  description: 'Forgotten password expire', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.020 seconds - level verbose  
{ key: 'forgottenPasswordExpire',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.020 seconds - level verbose  
{
key: 'forgottenPasswordExpire', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.020 seconds - level verbose  
{ key: 'isSuperAdmin',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.021 seconds - level verbose  
{
key: 'isSuperAdmin', 
type: {
  type: 'boolean', 
  description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
  friendlyName: 'Is super admin', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'checkbox',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.021 seconds - level verbose  
{ key: 'isSuperAdmin',  type: 'checkbox',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.021 seconds - level verbose  
{
key: 'isSuperAdmin', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.021 seconds - level verbose  
{ key: 'lastSeenAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.021 seconds - level verbose  
{
key: 'lastSeenAt', 
type: {
  type: 'number', 
  description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
  example: 1502844074211, 
  input: { type: 'date',  class: 'form-control',  }, 
  display: { type: 'date',  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Last seen at', 
  process: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.021 seconds - level verbose  
{ key: 'lastSeenAt',  type: 'date',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.021 seconds - level verbose  
{
key: 'lastSeenAt', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.021 seconds - level verbose  
{ key: 'streetAddress',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.021 seconds - level verbose  
{
key: 'streetAddress', 
type: {
  type: 'string', 
  input: {
    type: 'textarea', 
    rows: 5, 
    cols: 60, 
    placeholder: 'Please enter the street address of the user', 
    class: 'form-control', 
    }, 
  friendlyName: 'Street address', 
  database: { }, 
  process: { }, 
  description: 'Street address', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.021 seconds - level verbose  
{ key: 'streetAddress',  type: 'textarea',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.021 seconds - level verbose  
{
key: 'streetAddress', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.021 seconds - level verbose  
{ key: 'zip',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.022 seconds - level verbose  
{
key: 'zip', 
type: {
  type: 'string', 
  friendlyName: 'Zip', 
  database: { }, 
  process: { }, 
  description: 'Zip', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.022 seconds - level verbose  
{ key: 'zip',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.022 seconds - level verbose  
{
key: 'zip', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.022 seconds - level verbose  
{ key: 'country',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.022 seconds - level verbose  
{
key: 'country', 
type: {
  type: 'string', 
  friendlyName: 'Country', 
  database: { }, 
  process: { }, 
  description: 'Country', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.022 seconds - level verbose  
{ key: 'country',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.022 seconds - level verbose  
{
key: 'country', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.022 seconds - level verbose  
{ key: 'region',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.022 seconds - level verbose  
{
key: 'region', 
type: {
  description: 'This is an example of a select using the data in the isIn attribute.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: [
      'Europe', 
      'Middle East', 
      'Africa', 
      'South Asia', 
      'East', 
      'N America', 
      'S America', 
      ], 
    class: 'form-control', 
    }, 
  friendlyName: 'Region', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.022 seconds - level verbose  
{ key: 'region',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.022 seconds - level verbose  
{
key: 'region', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.022 seconds - level verbose  
{ key: 'permission',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.023 seconds - level verbose  
{
key: 'permission', 
type: {
  friendlyName: 'Permission set', 
  type: 'string', 
  description: 'Permission set.', 
  extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
  allowNull: true, 
  input: {
    type: 'select', 
    values: Function, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.023 seconds - level verbose  
{ key: 'permission',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.023 seconds - level verbose  
{
key: 'permission', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.023 seconds - level verbose  
{ key: 'isOrg',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.023 seconds - level verbose  
{
key: 'isOrg', 
type: {
  friendlyName: 'Person or Business?', 
  type: 'string', 
  description: 'This record describes a business rather than a person', 
  input: {
    type: 'radio', 
    values: { P: 'Person',  B: 'Business/Organisation',  }, 
    required: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.023 seconds - level verbose  
{ key: 'isOrg',  type: 'radio',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.023 seconds - level verbose  
{
key: 'isOrg', 
group: 'basics', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.023 seconds - level verbose  
{ key: 'business',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.023 seconds - level verbose  
{
key: 'business', 
type: {
  type: 'string', 
  description: 'Description of the customer's business', 
  friendlyName: 'The type of business.', 
  input: {
    type: 'textarea', 
    rows: 3, 
    cols: 60, 
    placeholder: 'Please enter a description of the user's business and place in the organisation', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.023 seconds - level verbose  
{ key: 'business',  type: 'textarea',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.023 seconds - level verbose  
{
key: 'business', 
group: 'profile', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.023 seconds - level verbose  
{ key: 'organisation',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.024 seconds - level verbose  
{
key: 'organisation', 
type: {
  friendlyName: 'Organisation', 
  model: 'user', 
  description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
  input: {
    type: 'select', 
    search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.024 seconds - level verbose  
{ key: 'organisation',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.024 seconds - level verbose  
{
key: 'organisation', 
group: 'profile', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.024 seconds - level verbose  
{ key: 'userType',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.024 seconds - level verbose  
{
key: 'userType', 
type: {
  description: 'The type of user.  Customer/Supplier or in-house.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: {
      L: 'Sales lead', 
      P: 'Prospect', 
      C: 'Customer', 
      S: 'Supplier', 
      I: 'In-house staff', 
      N: 'No longer considered a prospect', 
      O: 'Other', 
      }, 
    required: true, 
    class: 'form-control', 
    }, 
  friendlyName: 'User type', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.024 seconds - level verbose  
{ key: 'userType',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.024 seconds - level verbose  
{
key: 'userType', 
group: 'basics', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.024 seconds - level verbose  
{ key: 'lastContact',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.024 seconds - level verbose  
{
key: 'lastContact', 
type: {
  model: 'contacts', 
  child: false, 
  friendlyName: 'Last contact', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Last contact', 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.024 seconds - level verbose  
{ key: 'lastContact',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.024 seconds - level verbose  
{
key: 'lastContact', 
group: 'contacts', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.025 seconds - level verbose  
{ key: 'nextActionDate',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.025 seconds - level verbose  
{
key: 'nextActionDate', 
type: {
  friendlyName: 'Next action date', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
  input: {
    type: 'date', 
    hidden: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.025 seconds - level verbose  
{ key: 'nextActionDate',  type: 'date',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.025 seconds - level verbose  
{
key: 'nextActionDate', 
group: 'contacts', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.025 seconds - level verbose  
{ key: 'nextAction',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.025 seconds - level verbose  
{
key: 'nextAction', 
type: {
  friendlyName: 'Next action', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'text', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.025 seconds - level verbose  
{ key: 'nextAction',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.025 seconds - level verbose  
{
key: 'nextAction', 
group: 'contacts', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.025 seconds - level verbose  
{ key: 'mobilePhone',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.025 seconds - level verbose  
{
key: 'mobilePhone', 
type: {
  type: 'string', 
  friendlyName: 'Mobile phone', 
  database: { }, 
  process: { }, 
  description: 'Mobile phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.025 seconds - level verbose  
{ key: 'mobilePhone',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.025 seconds - level verbose  
{
key: 'mobilePhone', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.026 seconds - level verbose  
{ key: 'mainPhone',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.026 seconds - level verbose  
{
key: 'mainPhone', 
type: {
  type: 'string', 
  friendlyName: 'Main phone', 
  database: { }, 
  process: { }, 
  description: 'Main phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.026 seconds - level verbose  
{ key: 'mainPhone',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.026 seconds - level verbose  
{
key: 'mainPhone', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.026 seconds - level verbose  
{ key: 'lastSale',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.026 seconds - level verbose  
{
key: 'lastSale', 
type: {
  type: 'number', 
  model: 'salesorders', 
  friendlyName: 'Last sale', 
  description: 'Created automatically. This is a link to the last sales order.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.026 seconds - level verbose  
{ key: 'lastSale',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.026 seconds - level verbose  
{
key: 'lastSale', 
group: 'sales', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.026 seconds - level verbose  
{ key: 'notes',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.026 seconds - level verbose  
{
key: 'notes', 
type: {
  type: 'string', 
  friendlyName: 'Notes', 
  input: {
    type: 'textarea', 
    rows: 6, 
    cols: 60, 
    placeholder: 'Please enter any notes about this user.', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Notes', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.026 seconds - level verbose  
{ key: 'notes',  type: 'textarea',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.026 seconds - level verbose  
{
key: 'notes', 
group: 'profile', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.027 seconds - level verbose  
{ key: 'webpages',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.027 seconds - level verbose  
{
key: 'webpages', 
type: {
  collection: 'webpages', 
  via: 'author', 
  friendlyName: 'Webpages', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'webpages' via column 'author'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.027 seconds - level verbose  
{ key: 'webpages',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.027 seconds - level verbose  
{
key: 'webpages', 
group: 'website', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.027 seconds - level verbose  
{ key: 'contacts',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.027 seconds - level verbose  
{
key: 'contacts', 
type: {
  collection: 'contacts', 
  via: 'user', 
  collectionList: {
    limit: 5, 
    order: 'date', 
    direction: 'DESC', 
    heading: 'Recent contacts', 
    columns: [ 'id',  'date',  'notes',  'closed',  ], 
    addChildTip: 'Add a new contact for this user.', 
    }, 
  friendlyName: 'Contacts', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'contacts' via column 'user'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.027 seconds - level verbose  
{ key: 'contacts',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.027 seconds - level verbose  
{
key: 'contacts', 
group: 'contacts', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.028 seconds - level verbose  
{ key: 'salesorders',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.028 seconds - level verbose  
{
key: 'salesorders', 
type: {
  collection: 'salesorders', 
  via: 'customer', 
  collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
  friendlyName: 'Salesorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'salesorders' via column 'customer'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.028 seconds - level verbose  
{ key: 'salesorders',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.028 seconds - level verbose  
{
key: 'salesorders', 
group: 'sales', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.028 seconds - level verbose  
{ key: 'products',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.028 seconds - level verbose  
{
key: 'products', 
type: {
  collection: 'products', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'price',  'class',  'description',  ], 
    }, 
  friendlyName: 'Products', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'products' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.028 seconds - level verbose  
{ key: 'products',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.028 seconds - level verbose  
{
key: 'products', 
group: 'products', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.028 seconds - level verbose  
{ key: 'purchaseorders',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.028 seconds - level verbose  
{
key: 'purchaseorders', 
type: {
  collection: 'purchaseorders', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'date',  'status',  'notes',  ], 
    }, 
  friendlyName: 'Purchaseorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.029 seconds - level verbose  
{ key: 'purchaseorders',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.029 seconds - level verbose  
{
key: 'purchaseorders', 
group: 'products', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.029 seconds - level verbose  
{ key: 'people',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.029 seconds - level verbose  
{
key: 'people', 
type: {
  friendlyName: 'Associated people', 
  collection: 'user', 
  via: 'organisation', 
  collectionList: {
    columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
    }, 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'user' via column 'organisation'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.029 seconds - level verbose  
{ key: 'people',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.029 seconds - level verbose  
{
key: 'people', 
group: 'contacts', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:162:9 -> 0.030 seconds - level verbose  
{
merged: {
  id: {
    friendlyName: 'User No', 
    type: 'number', 
    primaryKey: true, 
    autoincrement: true, 
    database: { }, 
    process: { }, 
    description: 'User No', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  createdAt: {
    friendlyName: 'Date created', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { createdAt: true,  }, 
    description: 'Date created', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedAt: {
    friendlyName: 'Date last updated', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { updatedAt: true,  }, 
    description: 'Date last updated', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedBy: {
    friendlyName: 'Last updated by', 
    description: 'The person who last updated the row.', 
    type: 'number', 
    model: 'user', 
    process: { updatedBy: true,  }, 
    database: { }, 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  fullName: {
    type: 'string', 
    description: 'Full representation of the user's name.', 
    example: 'Mary Sue van der McHenst', 
    input: {
      required: true, 
      placeholder: 'Please enter the persons full name', 
      class: 'form-control', 
      type: 'text', 
      }, 
    friendlyName: 'Full name', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  emailAddress: {
    type: 'string', 
    friendlyName: 'Email address', 
    database: { }, 
    process: { }, 
    description: 'Email address', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  password: {
    type: 'string', 
    description: 'Securely hashed representation of the user's login password.', 
    permission: '#superuser#', 
    example: '2$28a8eabna301089103-13948134nad', 
    friendlyName: 'Password', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salt: {
    type: 'string', 
    permission: '#superuser#', 
    friendlyName: 'Salt', 
    database: { }, 
    process: { }, 
    description: 'Salt', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  forgottenPasswordToken: {
    permission: '#superuser#', 
    type: 'string', 
    friendlyName: 'Forgotten password token', 
    database: { }, 
    process: { }, 
    description: 'Forgotten password token', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  forgottenPasswordExpire: {
    permission: '#superuser#', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Forgotten password expire', 
    process: { }, 
    description: 'Forgotten password expire', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  isSuperAdmin: {
    type: 'boolean', 
    description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
    friendlyName: 'Is super admin', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'checkbox',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSeenAt: {
    type: 'number', 
    description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
    example: 1502844074211, 
    input: { type: 'date',  class: 'form-control',  }, 
    display: { type: 'date',  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Last seen at', 
    process: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  streetAddress: {
    type: 'string', 
    input: {
      type: 'textarea', 
      rows: 5, 
      cols: 60, 
      placeholder: 'Please enter the street address of the user', 
      class: 'form-control', 
      }, 
    friendlyName: 'Street address', 
    database: { }, 
    process: { }, 
    description: 'Street address', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  zip: {
    type: 'string', 
    friendlyName: 'Zip', 
    database: { }, 
    process: { }, 
    description: 'Zip', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  country: {
    type: 'string', 
    friendlyName: 'Country', 
    database: { }, 
    process: { }, 
    description: 'Country', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  region: {
    description: 'This is an example of a select using the data in the isIn attribute.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: [
        'Europe', 
        'Middle East', 
        'Africa', 
        'South Asia', 
        'East', 
        'N America', 
        'S America', 
        ], 
      class: 'form-control', 
      }, 
    friendlyName: 'Region', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  permission: {
    friendlyName: 'Permission set', 
    type: 'string', 
    description: 'Permission set.', 
    extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
    allowNull: true, 
    input: {
      type: 'select', 
      values: Function, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  isOrg: {
    friendlyName: 'Person or Business?', 
    type: 'string', 
    description: 'This record describes a business rather than a person', 
    input: {
      type: 'radio', 
      values: { P: 'Person',  B: 'Business/Organisation',  }, 
      required: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  business: {
    type: 'string', 
    description: 'Description of the customer's business', 
    friendlyName: 'The type of business.', 
    input: {
      type: 'textarea', 
      rows: 3, 
      cols: 60, 
      placeholder: 'Please enter a description of the user's business and place in the organisation', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  organisation: {
    friendlyName: 'Organisation', 
    model: 'user', 
    description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
    input: {
      type: 'select', 
      search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  userType: {
    description: 'The type of user.  Customer/Supplier or in-house.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: {
        L: 'Sales lead', 
        P: 'Prospect', 
        C: 'Customer', 
        S: 'Supplier', 
        I: 'In-house staff', 
        N: 'No longer considered a prospect', 
        O: 'Other', 
        }, 
      required: true, 
      class: 'form-control', 
      }, 
    friendlyName: 'User type', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastContact: {
    model: 'contacts', 
    child: false, 
    friendlyName: 'Last contact', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Last contact', 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextActionDate: {
    friendlyName: 'Next action date', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
    input: {
      type: 'date', 
      hidden: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextAction: {
    friendlyName: 'Next action', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'text', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mobilePhone: {
    type: 'string', 
    friendlyName: 'Mobile phone', 
    database: { }, 
    process: { }, 
    description: 'Mobile phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mainPhone: {
    type: 'string', 
    friendlyName: 'Main phone', 
    database: { }, 
    process: { }, 
    description: 'Main phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSale: {
    type: 'number', 
    model: 'salesorders', 
    friendlyName: 'Last sale', 
    description: 'Created automatically. This is a link to the last sales order.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  notes: {
    type: 'string', 
    friendlyName: 'Notes', 
    input: {
      type: 'textarea', 
      rows: 6, 
      cols: 60, 
      placeholder: 'Please enter any notes about this user.', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Notes', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  webpages: {
    collection: 'webpages', 
    via: 'author', 
    friendlyName: 'Webpages', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'webpages' via column 'author'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'web',  ],  }, 
    }, 
  contacts: {
    collection: 'contacts', 
    via: 'user', 
    collectionList: {
      limit: 5, 
      order: 'date', 
      direction: 'DESC', 
      heading: 'Recent contacts', 
      columns: [ 'id',  'date',  'notes',  'closed',  ], 
      addChildTip: 'Add a new contact for this user.', 
      }, 
    friendlyName: 'Contacts', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'contacts' via column 'user'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salesorders: {
    collection: 'salesorders', 
    via: 'customer', 
    collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
    friendlyName: 'Salesorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'salesorders' via column 'customer'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  products: {
    collection: 'products', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'price',  'class',  'description',  ], 
      }, 
    friendlyName: 'Products', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'products' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  purchaseorders: {
    collection: 'purchaseorders', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'date',  'status',  'notes',  ], 
      }, 
    friendlyName: 'Purchaseorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  people: {
    friendlyName: 'Associated people', 
    collection: 'user', 
    via: 'organisation', 
    collectionList: {
      columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
      }, 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'user' via column 'organisation'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  }, 
}

------------------------------------------------------------
table-data.js:9:9 -> 0.030 seconds - level verbose  
{ inputs: { 0: 'user',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.030 seconds - level verbose  
'Users'

------------------------------------------------------------
table-data.js:26:13 -> 0.030 seconds - level verbose  
'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.'

------------------------------------------------------------
table-data.js:26:13 -> 0.030 seconds - level verbose  
{ all: [ 'sales',  'purchasing',  'admin',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.030 seconds - level verbose  
'Add a new user'

------------------------------------------------------------
table-data.js:26:13 -> 0.030 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:26:13 -> 0.030 seconds - level verbose  
{
columns: [
  'id', 
  'fullName', 
  'emailAddress', 
  'userType', 
  'organisation', 
  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.030 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.030 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.031 seconds - level verbose  
'User'

------------------------------------------------------------
table-data.js:100:9 -> 0.031 seconds - level verbose  
{
canedit: false, 
permission: undefined, 
mergedpermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
get-rows.js:33:9 -> 0.031 seconds - level norm  
{ searches: [ [ 'id',  'eq',  '35',  ],  ],  }

------------------------------------------------------------
get-instruction.js:24:9 -> 0.031 seconds - level norm  
{
input: {
  0: 'user', 
  1: { searches: [ [ 'id',  'eq',  '35',  ],  ],  }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:26:9 -> 0.031 seconds - level norm  
{
tableData: {
  friendlyName: 'Users', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  attributes: {
    id: [Deeper Object below level 3], 
    createdAt: [Deeper Object below level 3], 
    updatedAt: [Deeper Object below level 3], 
    updatedBy: [Deeper Object below level 3], 
    fullName: [Deeper Object below level 3], 
    emailAddress: [Deeper Object below level 3], 
    password: [Deeper Object below level 3], 
    salt: [Deeper Object below level 3], 
    forgottenPasswordToken: [Deeper Object below level 3], 
    forgottenPasswordExpire: [Deeper Object below level 3], 
    isSuperAdmin: [Deeper Object below level 3], 
    lastSeenAt: [Deeper Object below level 3], 
    streetAddress: [Deeper Object below level 3], 
    zip: [Deeper Object below level 3], 
    country: [Deeper Object below level 3], 
    region: [Deeper Object below level 3], 
    permission: [Deeper Object below level 3], 
    isOrg: [Deeper Object below level 3], 
    business: [Deeper Object below level 3], 
    organisation: [Deeper Object below level 3], 
    userType: [Deeper Object below level 3], 
    lastContact: [Deeper Object below level 3], 
    nextActionDate: [Deeper Object below level 3], 
    nextAction: [Deeper Object below level 3], 
    mobilePhone: [Deeper Object below level 3], 
    mainPhone: [Deeper Object below level 3], 
    lastSale: [Deeper Object below level 3], 
    notes: [Deeper Object below level 3], 
    webpages: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    salesorders: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    purchaseorders: [Deeper Object below level 3], 
    people: [Deeper Object below level 3], 
    }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:34:9 -> 0.031 seconds - level norm  
{ searches: [ [ 'id',  'eq',  '35',  ],  ],  }

------------------------------------------------------------
get-instruction.js:43:11 -> 0.031 seconds - level norm  
{
searchField: 'id', 
compare: 'eq', 
value: '35', 
}

------------------------------------------------------------
get-instruction.js:82:9 -> 0.031 seconds - level norm  
{
instruction: 'user.id = ?', 
bindings: [ '35',  ], 
}

------------------------------------------------------------
get-rows.js:40:11 -> 0.031 seconds - level norm  
{
instruction: 'user.id = ?', 
bindings: [ '35',  ], 
edit: false, 
}

------------------------------------------------------------
get-rows.js:58:9 -> 0.033 seconds - level norm  
[
{
  id: 35, 
  createdAt: 1629555493202, 
  updatedAt: 1629559194424, 
  updatedBy: 1, 
  fullName: 'Willy Loman', 
  emailAddress: 'willy@loman.com', 
  password: 'ae6e5548f467a669624b7d81e753b0663675b6a0b3f8902efee83aab38df72083e1322d4ed2d47be8c870da9f06cbb014cf05d0ffdec02ebea7f220a0adb0a0a', 
  salt: 'fd6b2c4bb7baaa90be133b528477c5afb606109d8f0b94ef3fbb1718b1805b41', 
  forgottenPasswordToken: '', 
  forgottenPasswordExpire: 0, 
  isSuperAdmin: 0, 
  lastSeenAt: 1629504000000, 
  streetAddress: '', 
  zip: '', 
  country: '', 
  region: '', 
  permission: 'sales', 
  isOrg: 'P', 
  business: '', 
  organisation: null, 
  userType: 'I', 
  lastContact: null, 
  nextActionDate: null, 
  nextAction: null, 
  mobilePhone: '', 
  mainPhone: '', 
  lastSale: null, 
  notes: '', 
  }, 
]

------------------------------------------------------------
get-row.js:18:9 -> 0.033 seconds - level norm  
{
table: 'user', 
value: '35', 
recordarray: [
  {
    id: 35, 
    createdAt: 1629555493202, 
    updatedAt: 1629559194424, 
    updatedBy: 1, 
    fullName: 'Willy Loman', 
    emailAddress: 'willy@loman.com', 
    password: 'ae6e5548f467a669624b7d81e753b0663675b6a0b3f8902efee83aab38df72083e1322d4ed2d47be8c870da9f06cbb014cf05d0ffdec02ebea7f220a0adb0a0a', 
    salt: 'fd6b2c4bb7baaa90be133b528477c5afb606109d8f0b94ef3fbb1718b1805b41', 
    forgottenPasswordToken: '', 
    forgottenPasswordExpire: 0, 
    isSuperAdmin: 0, 
    lastSeenAt: 1629504000000, 
    streetAddress: '', 
    zip: '', 
    country: '', 
    region: '', 
    permission: 'sales', 
    isOrg: 'P', 
    business: '', 
    organisation: null, 
    userType: 'I', 
    lastContact: null, 
    nextActionDate: null, 
    nextAction: null, 
    mobilePhone: '', 
    mainPhone: '', 
    lastSale: null, 
    notes: '', 
    }, 
  ], 
}

------------------------------------------------------------
get-row.js:21:11 -> 0.033 seconds - level norm  
'Record: 
'
{
id: 35, 
createdAt: 1629555493202, 
updatedAt: 1629559194424, 
updatedBy: 1, 
fullName: 'Willy Loman', 
emailAddress: 'willy@loman.com', 
password: 'ae6e5548f467a669624b7d81e753b0663675b6a0b3f8902efee83aab38df72083e1322d4ed2d47be8c870da9f06cbb014cf05d0ffdec02ebea7f220a0adb0a0a', 
salt: 'fd6b2c4bb7baaa90be133b528477c5afb606109d8f0b94ef3fbb1718b1805b41', 
forgottenPasswordToken: '', 
forgottenPasswordExpire: 0, 
isSuperAdmin: 0, 
lastSeenAt: 1629504000000, 
streetAddress: '', 
zip: '', 
country: '', 
region: '', 
permission: 'sales', 
isOrg: 'P', 
business: '', 
organisation: null, 
userType: 'I', 
lastContact: null, 
nextActionDate: null, 
nextAction: null, 
mobilePhone: '', 
mainPhone: '', 
lastSale: null, 
notes: '', 
}

------------------------------------------------------------
admin.js:68:15 -> 0.033 seconds - level verbose  
{
User record: {
  id: 35, 
  createdAt: 1629555493202, 
  updatedAt: 1629559194424, 
  updatedBy: 1, 
  fullName: 'Willy Loman', 
  emailAddress: 'willy@loman.com', 
  password: 'ae6e5548f467a669624b7d81e753b0663675b6a0b3f8902efee83aab38df72083e1322d4ed2d47be8c870da9f06cbb014cf05d0ffdec02ebea7f220a0adb0a0a', 
  salt: 'fd6b2c4bb7baaa90be133b528477c5afb606109d8f0b94ef3fbb1718b1805b41', 
  forgottenPasswordToken: '', 
  forgottenPasswordExpire: 0, 
  isSuperAdmin: 0, 
  lastSeenAt: 1629504000000, 
  streetAddress: '', 
  zip: '', 
  country: '', 
  region: '', 
  permission: 'sales', 
  isOrg: 'P', 
  business: '', 
  organisation: null, 
  userType: 'I', 
  lastContact: null, 
  nextActionDate: null, 
  nextAction: null, 
  mobilePhone: '', 
  mainPhone: '', 
  lastSale: null, 
  notes: '', 
  }, 
}

------------------------------------------------------------
admin.js:110:11 -> 0.033 seconds - level norm  
'sales'

------------------------------------------------------------
admin.js:143:11 -> 0.033 seconds - level norm  
{
query: { table: 'user',  mode: 'listrow',  id: '35',  }, 
path: '/admin', 
report: undefined, 
table: 'user', 
mode: 'listrow', 
id: 35, 
open: '', 
openGroup: '', 
}

------------------------------------------------------------
merge-attributes.js:9:10 -> 0.033 seconds - level norm  
{ inputs: { 0: 'user',  1: 'sales',  },  }

------------------------------------------------------------
merge-attributes.js:13:10 -> 0.034 seconds - level verbose  
{
tableData: {
  friendlyName: 'Users', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: {
    columns: [
      'id', 
      'fullName', 
      'emailAddress', 
      'userType', 
      'organisation', 
      ], 
    }, 
  groups: {
    basics: {
      static: true, 
      open: 'none', 
      columns: [
        'fullName', 
        'emailAddress', 
        'userType', 
        'isOrg', 
        ], 
      }, 
    profile: {
      friendlyName: 'profile', 
      open: 'none', 
      columns: [ 'organisation',  'business',  'notes',  ], 
      }, 
    location: {
      friendlyName: 'How to contact', 
      open: 'none', 
      columns: [
        'streetAddress', 
        'zip', 
        'country', 
        'region', 
        'mainPhone', 
        'mobilePhone', 
        ], 
      }, 
    contacts: {
      friendlyName: 'Contacts', 
      open: 'contacts', 
      columns: [
        'people', 
        'contacts', 
        'lastContact', 
        'nextAction', 
        'nextActionDate', 
        ], 
      }, 
    sales: {
      friendlyName: 'Sales', 
      open: 'salesorders', 
      columns: [ 'salesorders',  'lastSale',  ], 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      friendlyName: 'Products supplied', 
      open: 'products', 
      columns: [ 'products',  'purchaseorders',  ], 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    website: {
      friendlyName: 'Website', 
      open: 'website', 
      columns: [ 'webpages',  ], 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    other: {
      friendlyName: 'Other', 
      columns: [
        'id', 
        'createdAt', 
        'updatedAt', 
        'updatedBy', 
        'password', 
        'salt', 
        'forgottenPasswordToken', 
        'forgottenPasswordExpire', 
        'isSuperAdmin', 
        'lastSeenAt', 
        'permission', 
        ], 
      }, 
    }, 
  attributes: {
    id: {
      friendlyName: 'User No', 
      type: 'number', 
      primaryKey: true, 
      autoincrement: true, 
      database: { }, 
      process: { }, 
      description: 'User No', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    createdAt: {
      friendlyName: 'Date created', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { createdAt: true,  }, 
      description: 'Date created', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedAt: {
      friendlyName: 'Date last updated', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { updatedAt: true,  }, 
      description: 'Date last updated', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedBy: {
      friendlyName: 'Last updated by', 
      description: 'The person who last updated the row.', 
      type: 'number', 
      model: 'user', 
      process: { updatedBy: true,  }, 
      database: { }, 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    fullName: {
      type: 'string', 
      description: 'Full representation of the user's name.', 
      example: 'Mary Sue van der McHenst', 
      input: {
        required: true, 
        placeholder: 'Please enter the persons full name', 
        class: 'form-control', 
        type: 'text', 
        }, 
      friendlyName: 'Full name', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    emailAddress: {
      type: 'string', 
      friendlyName: 'Email address', 
      database: { }, 
      process: { }, 
      description: 'Email address', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    password: {
      type: 'string', 
      description: 'Securely hashed representation of the user's login password.', 
      permission: '#superuser#', 
      example: '2$28a8eabna301089103-13948134nad', 
      friendlyName: 'Password', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salt: {
      type: 'string', 
      permission: '#superuser#', 
      friendlyName: 'Salt', 
      database: { }, 
      process: { }, 
      description: 'Salt', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    forgottenPasswordToken: {
      permission: '#superuser#', 
      type: 'string', 
      friendlyName: 'Forgotten password token', 
      database: { }, 
      process: { }, 
      description: 'Forgotten password token', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    forgottenPasswordExpire: {
      permission: '#superuser#', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Forgotten password expire', 
      process: { }, 
      description: 'Forgotten password expire', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    isSuperAdmin: {
      type: 'boolean', 
      description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
      friendlyName: 'Is super admin', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'checkbox',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSeenAt: {
      type: 'number', 
      description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
      example: 1502844074211, 
      input: { type: 'date',  class: 'form-control',  }, 
      display: { type: 'date',  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Last seen at', 
      process: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    streetAddress: {
      type: 'string', 
      input: {
        type: 'textarea', 
        rows: 5, 
        cols: 60, 
        placeholder: 'Please enter the street address of the user', 
        class: 'form-control', 
        }, 
      friendlyName: 'Street address', 
      database: { }, 
      process: { }, 
      description: 'Street address', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    zip: {
      type: 'string', 
      friendlyName: 'Zip', 
      database: { }, 
      process: { }, 
      description: 'Zip', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    country: {
      type: 'string', 
      friendlyName: 'Country', 
      database: { }, 
      process: { }, 
      description: 'Country', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    region: {
      description: 'This is an example of a select using the data in the isIn attribute.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: [
          'Europe', 
          'Middle East', 
          'Africa', 
          'South Asia', 
          'East', 
          'N America', 
          'S America', 
          ], 
        class: 'form-control', 
        }, 
      friendlyName: 'Region', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    permission: {
      friendlyName: 'Permission set', 
      type: 'string', 
      description: 'Permission set.', 
      extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
      allowNull: true, 
      input: {
        type: 'select', 
        values: Function, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    isOrg: {
      friendlyName: 'Person or Business?', 
      type: 'string', 
      description: 'This record describes a business rather than a person', 
      input: {
        type: 'radio', 
        values: { P: 'Person',  B: 'Business/Organisation',  }, 
        required: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    business: {
      type: 'string', 
      description: 'Description of the customer's business', 
      friendlyName: 'The type of business.', 
      input: {
        type: 'textarea', 
        rows: 3, 
        cols: 60, 
        placeholder: 'Please enter a description of the user's business and place in the organisation', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    organisation: {
      friendlyName: 'Organisation', 
      model: 'user', 
      description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
      input: {
        type: 'select', 
        search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    userType: {
      description: 'The type of user.  Customer/Supplier or in-house.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: {
          L: 'Sales lead', 
          P: 'Prospect', 
          C: 'Customer', 
          S: 'Supplier', 
          I: 'In-house staff', 
          N: 'No longer considered a prospect', 
          O: 'Other', 
          }, 
        required: true, 
        class: 'form-control', 
        }, 
      friendlyName: 'User type', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastContact: {
      model: 'contacts', 
      child: false, 
      friendlyName: 'Last contact', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Last contact', 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextActionDate: {
      friendlyName: 'Next action date', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
      input: {
        type: 'date', 
        hidden: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextAction: {
      friendlyName: 'Next action', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'text', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mobilePhone: {
      type: 'string', 
      friendlyName: 'Mobile phone', 
      database: { }, 
      process: { }, 
      description: 'Mobile phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mainPhone: {
      type: 'string', 
      friendlyName: 'Main phone', 
      database: { }, 
      process: { }, 
      description: 'Main phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSale: {
      type: 'number', 
      model: 'salesorders', 
      friendlyName: 'Last sale', 
      description: 'Created automatically. This is a link to the last sales order.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    notes: {
      type: 'string', 
      friendlyName: 'Notes', 
      input: {
        type: 'textarea', 
        rows: 6, 
        cols: 60, 
        placeholder: 'Please enter any notes about this user.', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Notes', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    webpages: {
      collection: 'webpages', 
      via: 'author', 
      friendlyName: 'Webpages', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'webpages' via column 'author'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    contacts: {
      collection: 'contacts', 
      via: 'user', 
      collectionList: {
        limit: 5, 
        order: 'date', 
        direction: 'DESC', 
        heading: 'Recent contacts', 
        columns: [ 'id',  'date',  'notes',  'closed',  ], 
        addChildTip: 'Add a new contact for this user.', 
        }, 
      friendlyName: 'Contacts', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'contacts' via column 'user'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salesorders: {
      collection: 'salesorders', 
      via: 'customer', 
      collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
      friendlyName: 'Salesorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'salesorders' via column 'customer'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      collection: 'products', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'price',  'class',  'description',  ], 
        }, 
      friendlyName: 'Products', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'products' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    purchaseorders: {
      collection: 'purchaseorders', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'date',  'status',  'notes',  ], 
        }, 
      friendlyName: 'Purchaseorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    people: {
      friendlyName: 'Associated people', 
      collection: 'user', 
      via: 'organisation', 
      collectionList: {
        columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
        }, 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'user' via column 'organisation'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:21:9 -> 0.035 seconds - level verbose  
{
table: 'user', 
attributes: {
  id: {
    friendlyName: 'User No', 
    type: 'number', 
    primaryKey: true, 
    autoincrement: true, 
    database: { }, 
    process: { }, 
    description: 'User No', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  createdAt: {
    friendlyName: 'Date created', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { createdAt: true,  }, 
    description: 'Date created', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedAt: {
    friendlyName: 'Date last updated', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { updatedAt: true,  }, 
    description: 'Date last updated', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedBy: {
    friendlyName: 'Last updated by', 
    description: 'The person who last updated the row.', 
    type: 'number', 
    model: 'user', 
    process: { updatedBy: true,  }, 
    database: { }, 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  fullName: {
    type: 'string', 
    description: 'Full representation of the user's name.', 
    example: 'Mary Sue van der McHenst', 
    input: {
      required: true, 
      placeholder: 'Please enter the persons full name', 
      class: 'form-control', 
      type: 'text', 
      }, 
    friendlyName: 'Full name', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  emailAddress: {
    type: 'string', 
    friendlyName: 'Email address', 
    database: { }, 
    process: { }, 
    description: 'Email address', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  password: {
    type: 'string', 
    description: 'Securely hashed representation of the user's login password.', 
    permission: '#superuser#', 
    example: '2$28a8eabna301089103-13948134nad', 
    friendlyName: 'Password', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salt: {
    type: 'string', 
    permission: '#superuser#', 
    friendlyName: 'Salt', 
    database: { }, 
    process: { }, 
    description: 'Salt', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  forgottenPasswordToken: {
    permission: '#superuser#', 
    type: 'string', 
    friendlyName: 'Forgotten password token', 
    database: { }, 
    process: { }, 
    description: 'Forgotten password token', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  forgottenPasswordExpire: {
    permission: '#superuser#', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Forgotten password expire', 
    process: { }, 
    description: 'Forgotten password expire', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  isSuperAdmin: {
    type: 'boolean', 
    description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
    friendlyName: 'Is super admin', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'checkbox',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSeenAt: {
    type: 'number', 
    description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
    example: 1502844074211, 
    input: { type: 'date',  class: 'form-control',  }, 
    display: { type: 'date',  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Last seen at', 
    process: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  streetAddress: {
    type: 'string', 
    input: {
      type: 'textarea', 
      rows: 5, 
      cols: 60, 
      placeholder: 'Please enter the street address of the user', 
      class: 'form-control', 
      }, 
    friendlyName: 'Street address', 
    database: { }, 
    process: { }, 
    description: 'Street address', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  zip: {
    type: 'string', 
    friendlyName: 'Zip', 
    database: { }, 
    process: { }, 
    description: 'Zip', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  country: {
    type: 'string', 
    friendlyName: 'Country', 
    database: { }, 
    process: { }, 
    description: 'Country', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  region: {
    description: 'This is an example of a select using the data in the isIn attribute.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: [
        'Europe', 
        'Middle East', 
        'Africa', 
        'South Asia', 
        'East', 
        'N America', 
        'S America', 
        ], 
      class: 'form-control', 
      }, 
    friendlyName: 'Region', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  permission: {
    friendlyName: 'Permission set', 
    type: 'string', 
    description: 'Permission set.', 
    extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
    allowNull: true, 
    input: {
      type: 'select', 
      values: Function, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  isOrg: {
    friendlyName: 'Person or Business?', 
    type: 'string', 
    description: 'This record describes a business rather than a person', 
    input: {
      type: 'radio', 
      values: { P: 'Person',  B: 'Business/Organisation',  }, 
      required: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  business: {
    type: 'string', 
    description: 'Description of the customer's business', 
    friendlyName: 'The type of business.', 
    input: {
      type: 'textarea', 
      rows: 3, 
      cols: 60, 
      placeholder: 'Please enter a description of the user's business and place in the organisation', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  organisation: {
    friendlyName: 'Organisation', 
    model: 'user', 
    description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
    input: {
      type: 'select', 
      search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  userType: {
    description: 'The type of user.  Customer/Supplier or in-house.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: {
        L: 'Sales lead', 
        P: 'Prospect', 
        C: 'Customer', 
        S: 'Supplier', 
        I: 'In-house staff', 
        N: 'No longer considered a prospect', 
        O: 'Other', 
        }, 
      required: true, 
      class: 'form-control', 
      }, 
    friendlyName: 'User type', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastContact: {
    model: 'contacts', 
    child: false, 
    friendlyName: 'Last contact', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Last contact', 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextActionDate: {
    friendlyName: 'Next action date', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
    input: {
      type: 'date', 
      hidden: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextAction: {
    friendlyName: 'Next action', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'text', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mobilePhone: {
    type: 'string', 
    friendlyName: 'Mobile phone', 
    database: { }, 
    process: { }, 
    description: 'Mobile phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mainPhone: {
    type: 'string', 
    friendlyName: 'Main phone', 
    database: { }, 
    process: { }, 
    description: 'Main phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSale: {
    type: 'number', 
    model: 'salesorders', 
    friendlyName: 'Last sale', 
    description: 'Created automatically. This is a link to the last sales order.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  notes: {
    type: 'string', 
    friendlyName: 'Notes', 
    input: {
      type: 'textarea', 
      rows: 6, 
      cols: 60, 
      placeholder: 'Please enter any notes about this user.', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Notes', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  webpages: {
    collection: 'webpages', 
    via: 'author', 
    friendlyName: 'Webpages', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'webpages' via column 'author'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'web',  ],  }, 
    }, 
  contacts: {
    collection: 'contacts', 
    via: 'user', 
    collectionList: {
      limit: 5, 
      order: 'date', 
      direction: 'DESC', 
      heading: 'Recent contacts', 
      columns: [ 'id',  'date',  'notes',  'closed',  ], 
      addChildTip: 'Add a new contact for this user.', 
      }, 
    friendlyName: 'Contacts', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'contacts' via column 'user'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salesorders: {
    collection: 'salesorders', 
    via: 'customer', 
    collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
    friendlyName: 'Salesorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'salesorders' via column 'customer'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  products: {
    collection: 'products', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'price',  'class',  'description',  ], 
      }, 
    friendlyName: 'Products', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'products' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  purchaseorders: {
    collection: 'purchaseorders', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'date',  'status',  'notes',  ], 
      }, 
    friendlyName: 'Purchaseorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  people: {
    friendlyName: 'Associated people', 
    collection: 'user', 
    via: 'organisation', 
    collectionList: {
      columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
      }, 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'user' via column 'organisation'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  }, 
}

------------------------------------------------------------
invert-groups.js:5:9 -> 0.037 seconds - level verbose  
{
inputs: {
  0: {
    friendlyName: 'Users', 
    description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
    permission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
    addRow: 'Add a new user', 
    rowTitle: Function, 
    list: {
      columns: [
        'id', 
        'fullName', 
        'emailAddress', 
        'userType', 
        'organisation', 
        ], 
      }, 
    groups: {
      basics: {
        static: true, 
        open: 'none', 
        columns: [
          'fullName', 
          'emailAddress', 
          'userType', 
          'isOrg', 
          ], 
        }, 
      profile: {
        friendlyName: 'profile', 
        open: 'none', 
        columns: [ 'organisation',  'business',  'notes',  ], 
        }, 
      location: {
        friendlyName: 'How to contact', 
        open: 'none', 
        columns: [
          'streetAddress', 
          'zip', 
          'country', 
          'region', 
          'mainPhone', 
          'mobilePhone', 
          ], 
        }, 
      contacts: {
        friendlyName: 'Contacts', 
        open: 'contacts', 
        columns: [
          'people', 
          'contacts', 
          'lastContact', 
          'nextAction', 
          'nextActionDate', 
          ], 
        }, 
      sales: {
        friendlyName: 'Sales', 
        open: 'salesorders', 
        columns: [ 'salesorders',  'lastSale',  ], 
        permission: { all: [ 'admin',  'sales',  ],  }, 
        }, 
      products: {
        friendlyName: 'Products supplied', 
        open: 'products', 
        columns: [ 'products',  'purchaseorders',  ], 
        permission: {
          all: [ 'admin',  'purchasing',  ], 
          view: [ 'sales',  ], 
          }, 
        }, 
      website: {
        friendlyName: 'Website', 
        open: 'website', 
        columns: [ 'webpages',  ], 
        permission: { all: [ 'admin',  'web',  ],  }, 
        }, 
      other: {
        friendlyName: 'Other', 
        columns: [
          'id', 
          'createdAt', 
          'updatedAt', 
          'updatedBy', 
          'password', 
          'salt', 
          'forgottenPasswordToken', 
          'forgottenPasswordExpire', 
          'isSuperAdmin', 
          'lastSeenAt', 
          'permission', 
          ], 
        }, 
      }, 
    attributes: {
      id: {
        friendlyName: 'User No', 
        type: 'number', 
        primaryKey: true, 
        autoincrement: true, 
        database: { }, 
        process: { }, 
        description: 'User No', 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      createdAt: {
        friendlyName: 'Date created', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        process: { createdAt: true,  }, 
        description: 'Date created', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      updatedAt: {
        friendlyName: 'Date last updated', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        process: { updatedAt: true,  }, 
        description: 'Date last updated', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      updatedBy: {
        friendlyName: 'Last updated by', 
        description: 'The person who last updated the row.', 
        type: 'number', 
        model: 'user', 
        process: { updatedBy: true,  }, 
        database: { }, 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      fullName: {
        type: 'string', 
        description: 'Full representation of the user's name.', 
        example: 'Mary Sue van der McHenst', 
        input: {
          required: true, 
          placeholder: 'Please enter the persons full name', 
          class: 'form-control', 
          type: 'text', 
          }, 
        friendlyName: 'Full name', 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      emailAddress: {
        type: 'string', 
        friendlyName: 'Email address', 
        database: { }, 
        process: { }, 
        description: 'Email address', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      password: {
        type: 'string', 
        description: 'Securely hashed representation of the user's login password.', 
        permission: '#superuser#', 
        example: '2$28a8eabna301089103-13948134nad', 
        friendlyName: 'Password', 
        database: { }, 
        process: { }, 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      salt: {
        type: 'string', 
        permission: '#superuser#', 
        friendlyName: 'Salt', 
        database: { }, 
        process: { }, 
        description: 'Salt', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      forgottenPasswordToken: {
        permission: '#superuser#', 
        type: 'string', 
        friendlyName: 'Forgotten password token', 
        database: { }, 
        process: { }, 
        description: 'Forgotten password token', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      forgottenPasswordExpire: {
        permission: '#superuser#', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        friendlyName: 'Forgotten password expire', 
        process: { }, 
        description: 'Forgotten password expire', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      isSuperAdmin: {
        type: 'boolean', 
        description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
        friendlyName: 'Is super admin', 
        database: { }, 
        process: { }, 
        input: { class: 'form-control',  type: 'checkbox',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      lastSeenAt: {
        type: 'number', 
        description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
        example: 1502844074211, 
        input: { type: 'date',  class: 'form-control',  }, 
        display: { type: 'date',  }, 
        database: { type: 'biginteger',  }, 
        friendlyName: 'Last seen at', 
        process: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      streetAddress: {
        type: 'string', 
        input: {
          type: 'textarea', 
          rows: 5, 
          cols: 60, 
          placeholder: 'Please enter the street address of the user', 
          class: 'form-control', 
          }, 
        friendlyName: 'Street address', 
        database: { }, 
        process: { }, 
        description: 'Street address', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      zip: {
        type: 'string', 
        friendlyName: 'Zip', 
        database: { }, 
        process: { }, 
        description: 'Zip', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      country: {
        type: 'string', 
        friendlyName: 'Country', 
        database: { }, 
        process: { }, 
        description: 'Country', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      region: {
        description: 'This is an example of a select using the data in the isIn attribute.', 
        type: 'string', 
        input: {
          type: 'select', 
          values: [
            'Europe', 
            'Middle East', 
            'Africa', 
            'South Asia', 
            'East', 
            'N America', 
            'S America', 
            ], 
          class: 'form-control', 
          }, 
        friendlyName: 'Region', 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      permission: {
        friendlyName: 'Permission set', 
        type: 'string', 
        description: 'Permission set.', 
        extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
        allowNull: true, 
        input: {
          type: 'select', 
          values: Function, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      isOrg: {
        friendlyName: 'Person or Business?', 
        type: 'string', 
        description: 'This record describes a business rather than a person', 
        input: {
          type: 'radio', 
          values: { P: 'Person',  B: 'Business/Organisation',  }, 
          required: true, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      business: {
        type: 'string', 
        description: 'Description of the customer's business', 
        friendlyName: 'The type of business.', 
        input: {
          type: 'textarea', 
          rows: 3, 
          cols: 60, 
          placeholder: 'Please enter a description of the user's business and place in the organisation', 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      organisation: {
        friendlyName: 'Organisation', 
        model: 'user', 
        description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
        input: {
          type: 'select', 
          search: { searches: [ [Deeper Object below level 8],  ],  }, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        type: 'number', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      userType: {
        description: 'The type of user.  Customer/Supplier or in-house.', 
        type: 'string', 
        input: {
          type: 'select', 
          values: {
            L: 'Sales lead', 
            P: 'Prospect', 
            C: 'Customer', 
            S: 'Supplier', 
            I: 'In-house staff', 
            N: 'No longer considered a prospect', 
            O: 'Other', 
            }, 
          required: true, 
          class: 'form-control', 
          }, 
        friendlyName: 'User type', 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      lastContact: {
        model: 'contacts', 
        child: false, 
        friendlyName: 'Last contact', 
        input: {
          hidden: true, 
          class: 'form-control', 
          type: 'number', 
          }, 
        database: { }, 
        process: { }, 
        description: 'Last contact', 
        type: 'number', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      nextActionDate: {
        friendlyName: 'Next action date', 
        type: 'string', 
        description: 'When a contact is entered, this is updated.', 
        extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
        input: {
          type: 'date', 
          hidden: true, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      nextAction: {
        friendlyName: 'Next action', 
        type: 'string', 
        description: 'When a contact is entered, this is updated.', 
        extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
        input: {
          hidden: true, 
          class: 'form-control', 
          type: 'text', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      mobilePhone: {
        type: 'string', 
        friendlyName: 'Mobile phone', 
        database: { }, 
        process: { }, 
        description: 'Mobile phone', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      mainPhone: {
        type: 'string', 
        friendlyName: 'Main phone', 
        database: { }, 
        process: { }, 
        description: 'Main phone', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      lastSale: {
        type: 'number', 
        model: 'salesorders', 
        friendlyName: 'Last sale', 
        description: 'Created automatically. This is a link to the last sales order.', 
        input: {
          hidden: true, 
          class: 'form-control', 
          type: 'number', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: { all: [ 'admin',  'sales',  ],  }, 
        }, 
      notes: {
        type: 'string', 
        friendlyName: 'Notes', 
        input: {
          type: 'textarea', 
          rows: 6, 
          cols: 60, 
          placeholder: 'Please enter any notes about this user.', 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        description: 'Notes', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      webpages: {
        collection: 'webpages', 
        via: 'author', 
        friendlyName: 'Webpages', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'webpages' via column 'author'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: { all: [ 'admin',  'web',  ],  }, 
        }, 
      contacts: {
        collection: 'contacts', 
        via: 'user', 
        collectionList: {
          limit: 5, 
          order: 'date', 
          direction: 'DESC', 
          heading: 'Recent contacts', 
          columns: [ 'id',  'date',  'notes',  'closed',  ], 
          addChildTip: 'Add a new contact for this user.', 
          }, 
        friendlyName: 'Contacts', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'contacts' via column 'user'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      salesorders: {
        collection: 'salesorders', 
        via: 'customer', 
        collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
        friendlyName: 'Salesorders', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'salesorders' via column 'customer'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: { all: [ 'admin',  'sales',  ],  }, 
        }, 
      products: {
        collection: 'products', 
        via: 'supplier', 
        collectionList: {
          columns: [ 'name',  'price',  'class',  'description',  ], 
          }, 
        friendlyName: 'Products', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'products' via column 'supplier'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: {
          all: [ 'admin',  'purchasing',  ], 
          view: [ 'sales',  ], 
          }, 
        }, 
      purchaseorders: {
        collection: 'purchaseorders', 
        via: 'supplier', 
        collectionList: {
          columns: [ 'name',  'date',  'status',  'notes',  ], 
          }, 
        friendlyName: 'Purchaseorders', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: {
          all: [ 'admin',  'purchasing',  ], 
          view: [ 'sales',  ], 
          }, 
        }, 
      people: {
        friendlyName: 'Associated people', 
        collection: 'user', 
        via: 'organisation', 
        collectionList: {
          columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
          }, 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'user' via column 'organisation'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      }, 
    }, 
  1: {
    id: {
      friendlyName: 'User No', 
      type: 'number', 
      primaryKey: true, 
      autoincrement: true, 
      database: { }, 
      process: { }, 
      description: 'User No', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    createdAt: {
      friendlyName: 'Date created', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { createdAt: true,  }, 
      description: 'Date created', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedAt: {
      friendlyName: 'Date last updated', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { updatedAt: true,  }, 
      description: 'Date last updated', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedBy: {
      friendlyName: 'Last updated by', 
      description: 'The person who last updated the row.', 
      type: 'number', 
      model: 'user', 
      process: { updatedBy: true,  }, 
      database: { }, 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    fullName: {
      type: 'string', 
      description: 'Full representation of the user's name.', 
      example: 'Mary Sue van der McHenst', 
      input: {
        required: true, 
        placeholder: 'Please enter the persons full name', 
        class: 'form-control', 
        type: 'text', 
        }, 
      friendlyName: 'Full name', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    emailAddress: {
      type: 'string', 
      friendlyName: 'Email address', 
      database: { }, 
      process: { }, 
      description: 'Email address', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    password: {
      type: 'string', 
      description: 'Securely hashed representation of the user's login password.', 
      permission: '#superuser#', 
      example: '2$28a8eabna301089103-13948134nad', 
      friendlyName: 'Password', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salt: {
      type: 'string', 
      permission: '#superuser#', 
      friendlyName: 'Salt', 
      database: { }, 
      process: { }, 
      description: 'Salt', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    forgottenPasswordToken: {
      permission: '#superuser#', 
      type: 'string', 
      friendlyName: 'Forgotten password token', 
      database: { }, 
      process: { }, 
      description: 'Forgotten password token', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    forgottenPasswordExpire: {
      permission: '#superuser#', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Forgotten password expire', 
      process: { }, 
      description: 'Forgotten password expire', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    isSuperAdmin: {
      type: 'boolean', 
      description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
      friendlyName: 'Is super admin', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'checkbox',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSeenAt: {
      type: 'number', 
      description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
      example: 1502844074211, 
      input: { type: 'date',  class: 'form-control',  }, 
      display: { type: 'date',  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Last seen at', 
      process: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    streetAddress: {
      type: 'string', 
      input: {
        type: 'textarea', 
        rows: 5, 
        cols: 60, 
        placeholder: 'Please enter the street address of the user', 
        class: 'form-control', 
        }, 
      friendlyName: 'Street address', 
      database: { }, 
      process: { }, 
      description: 'Street address', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    zip: {
      type: 'string', 
      friendlyName: 'Zip', 
      database: { }, 
      process: { }, 
      description: 'Zip', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    country: {
      type: 'string', 
      friendlyName: 'Country', 
      database: { }, 
      process: { }, 
      description: 'Country', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    region: {
      description: 'This is an example of a select using the data in the isIn attribute.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: [
          'Europe', 
          'Middle East', 
          'Africa', 
          'South Asia', 
          'East', 
          'N America', 
          'S America', 
          ], 
        class: 'form-control', 
        }, 
      friendlyName: 'Region', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    permission: {
      friendlyName: 'Permission set', 
      type: 'string', 
      description: 'Permission set.', 
      extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
      allowNull: true, 
      input: {
        type: 'select', 
        values: Function, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    isOrg: {
      friendlyName: 'Person or Business?', 
      type: 'string', 
      description: 'This record describes a business rather than a person', 
      input: {
        type: 'radio', 
        values: { P: 'Person',  B: 'Business/Organisation',  }, 
        required: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    business: {
      type: 'string', 
      description: 'Description of the customer's business', 
      friendlyName: 'The type of business.', 
      input: {
        type: 'textarea', 
        rows: 3, 
        cols: 60, 
        placeholder: 'Please enter a description of the user's business and place in the organisation', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    organisation: {
      friendlyName: 'Organisation', 
      model: 'user', 
      description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
      input: {
        type: 'select', 
        search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    userType: {
      description: 'The type of user.  Customer/Supplier or in-house.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: {
          L: 'Sales lead', 
          P: 'Prospect', 
          C: 'Customer', 
          S: 'Supplier', 
          I: 'In-house staff', 
          N: 'No longer considered a prospect', 
          O: 'Other', 
          }, 
        required: true, 
        class: 'form-control', 
        }, 
      friendlyName: 'User type', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastContact: {
      model: 'contacts', 
      child: false, 
      friendlyName: 'Last contact', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Last contact', 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextActionDate: {
      friendlyName: 'Next action date', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
      input: {
        type: 'date', 
        hidden: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextAction: {
      friendlyName: 'Next action', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'text', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mobilePhone: {
      type: 'string', 
      friendlyName: 'Mobile phone', 
      database: { }, 
      process: { }, 
      description: 'Mobile phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mainPhone: {
      type: 'string', 
      friendlyName: 'Main phone', 
      database: { }, 
      process: { }, 
      description: 'Main phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSale: {
      type: 'number', 
      model: 'salesorders', 
      friendlyName: 'Last sale', 
      description: 'Created automatically. This is a link to the last sales order.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    notes: {
      type: 'string', 
      friendlyName: 'Notes', 
      input: {
        type: 'textarea', 
        rows: 6, 
        cols: 60, 
        placeholder: 'Please enter any notes about this user.', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Notes', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    webpages: {
      collection: 'webpages', 
      via: 'author', 
      friendlyName: 'Webpages', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'webpages' via column 'author'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    contacts: {
      collection: 'contacts', 
      via: 'user', 
      collectionList: {
        limit: 5, 
        order: 'date', 
        direction: 'DESC', 
        heading: 'Recent contacts', 
        columns: [ 'id',  'date',  'notes',  'closed',  ], 
        addChildTip: 'Add a new contact for this user.', 
        }, 
      friendlyName: 'Contacts', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'contacts' via column 'user'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salesorders: {
      collection: 'salesorders', 
      via: 'customer', 
      collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
      friendlyName: 'Salesorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'salesorders' via column 'customer'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      collection: 'products', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'price',  'class',  'description',  ], 
        }, 
      friendlyName: 'Products', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'products' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    purchaseorders: {
      collection: 'purchaseorders', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'date',  'status',  'notes',  ], 
        }, 
      friendlyName: 'Purchaseorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    people: {
      friendlyName: 'Associated people', 
      collection: 'user', 
      via: 'organisation', 
      collectionList: {
        columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
        }, 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'user' via column 'organisation'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    }, 
  }, 
}

------------------------------------------------------------
invert-groups.js:16:9 -> 0.037 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
invert-groups.js:18:11 -> 0.037 seconds - level verbose  
'basics'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.037 seconds - level verbose  
'profile'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.037 seconds - level verbose  
'location'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.037 seconds - level verbose  
'contacts'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.037 seconds - level verbose  
'sales'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.037 seconds - level verbose  
'products'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.037 seconds - level verbose  
'website'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.037 seconds - level verbose  
'other'

------------------------------------------------------------
invert-groups.js:31:9 -> 0.038 seconds - level verbose  
{
fullName: 'basics', 
emailAddress: 'basics', 
userType: 'basics', 
isOrg: 'basics', 
organisation: 'profile', 
business: 'profile', 
notes: 'profile', 
streetAddress: 'location', 
zip: 'location', 
country: 'location', 
region: 'location', 
mainPhone: 'location', 
mobilePhone: 'location', 
people: 'contacts', 
contacts: 'contacts', 
lastContact: 'contacts', 
nextAction: 'contacts', 
nextActionDate: 'contacts', 
salesorders: 'sales', 
lastSale: 'sales', 
products: 'products', 
purchaseorders: 'products', 
webpages: 'website', 
id: 'other', 
createdAt: 'other', 
updatedAt: 'other', 
updatedBy: 'other', 
password: 'other', 
salt: 'other', 
forgottenPasswordToken: 'other', 
forgottenPasswordExpire: 'other', 
isSuperAdmin: 'other', 
lastSeenAt: 'other', 
permission: 'other', 
}

------------------------------------------------------------
merge-attributes.js:26:9 -> 0.038 seconds - level verbose  
{
fullName: 'basics', 
emailAddress: 'basics', 
userType: 'basics', 
isOrg: 'basics', 
organisation: 'profile', 
business: 'profile', 
notes: 'profile', 
streetAddress: 'location', 
zip: 'location', 
country: 'location', 
region: 'location', 
mainPhone: 'location', 
mobilePhone: 'location', 
people: 'contacts', 
contacts: 'contacts', 
lastContact: 'contacts', 
nextAction: 'contacts', 
nextActionDate: 'contacts', 
salesorders: 'sales', 
lastSale: 'sales', 
products: 'products', 
purchaseorders: 'products', 
webpages: 'website', 
id: 'other', 
createdAt: 'other', 
updatedAt: 'other', 
updatedBy: 'other', 
password: 'other', 
salt: 'other', 
forgottenPasswordToken: 'other', 
forgottenPasswordExpire: 'other', 
isSuperAdmin: 'other', 
lastSeenAt: 'other', 
permission: 'other', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.038 seconds - level verbose  
{ key: 'id',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.038 seconds - level verbose  
{
key: 'id', 
type: {
  friendlyName: 'User No', 
  type: 'number', 
  primaryKey: true, 
  autoincrement: true, 
  database: { }, 
  process: { }, 
  description: 'User No', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.038 seconds - level verbose  
{ key: 'id',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.038 seconds - level verbose  
{
key: 'id', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.038 seconds - level verbose  
'user'
'id'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.038 seconds - level verbose  
{
text: 'end loop', 
key: 'id', 
merged: {
  friendlyName: 'User No', 
  type: 'number', 
  primaryKey: true, 
  autoincrement: true, 
  database: { }, 
  process: { }, 
  description: 'User No', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.038 seconds - level verbose  
{ key: 'createdAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.038 seconds - level verbose  
{
key: 'createdAt', 
type: {
  friendlyName: 'Date created', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { createdAt: true,  }, 
  description: 'Date created', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.038 seconds - level verbose  
{ key: 'createdAt',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.038 seconds - level verbose  
{
key: 'createdAt', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.038 seconds - level verbose  
'user'
'createdAt'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.039 seconds - level verbose  
{
text: 'end loop', 
key: 'createdAt', 
merged: {
  friendlyName: 'Date created', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { createdAt: true,  }, 
  description: 'Date created', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.039 seconds - level verbose  
{ key: 'updatedAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.039 seconds - level verbose  
{
key: 'updatedAt', 
type: {
  friendlyName: 'Date last updated', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { updatedAt: true,  }, 
  description: 'Date last updated', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.039 seconds - level verbose  
{ key: 'updatedAt',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.039 seconds - level verbose  
{
key: 'updatedAt', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.039 seconds - level verbose  
'user'
'updatedAt'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.039 seconds - level verbose  
{
text: 'end loop', 
key: 'updatedAt', 
merged: {
  friendlyName: 'Date last updated', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { updatedAt: true,  }, 
  description: 'Date last updated', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.039 seconds - level verbose  
{ key: 'updatedBy',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.039 seconds - level verbose  
{
key: 'updatedBy', 
type: {
  friendlyName: 'Last updated by', 
  description: 'The person who last updated the row.', 
  type: 'number', 
  model: 'user', 
  process: { updatedBy: true,  }, 
  database: { }, 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.039 seconds - level verbose  
{ key: 'updatedBy',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.039 seconds - level verbose  
{
key: 'updatedBy', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.039 seconds - level verbose  
'user'
'updatedBy'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.039 seconds - level verbose  
{
text: 'end loop', 
key: 'updatedBy', 
merged: {
  friendlyName: 'Last updated by', 
  description: 'The person who last updated the row.', 
  type: 'number', 
  model: 'user', 
  process: { updatedBy: true,  }, 
  database: { }, 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.040 seconds - level verbose  
{ key: 'fullName',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.040 seconds - level verbose  
{
key: 'fullName', 
type: {
  type: 'string', 
  description: 'Full representation of the user's name.', 
  example: 'Mary Sue van der McHenst', 
  input: {
    required: true, 
    placeholder: 'Please enter the persons full name', 
    class: 'form-control', 
    type: 'text', 
    }, 
  friendlyName: 'Full name', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.040 seconds - level verbose  
{ key: 'fullName',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.040 seconds - level verbose  
{
key: 'fullName', 
group: 'basics', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.040 seconds - level verbose  
'user'
'fullName'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.040 seconds - level verbose  
{
text: 'end loop', 
key: 'fullName', 
merged: {
  type: 'string', 
  description: 'Full representation of the user's name.', 
  example: 'Mary Sue van der McHenst', 
  input: {
    required: true, 
    placeholder: 'Please enter the persons full name', 
    class: 'form-control', 
    type: 'text', 
    }, 
  friendlyName: 'Full name', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.040 seconds - level verbose  
{ key: 'emailAddress',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.040 seconds - level verbose  
{
key: 'emailAddress', 
type: {
  type: 'string', 
  friendlyName: 'Email address', 
  database: { }, 
  process: { }, 
  description: 'Email address', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.040 seconds - level verbose  
{ key: 'emailAddress',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.041 seconds - level verbose  
{
key: 'emailAddress', 
group: 'basics', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.041 seconds - level verbose  
'user'
'emailAddress'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.041 seconds - level verbose  
{
text: 'end loop', 
key: 'emailAddress', 
merged: {
  type: 'string', 
  friendlyName: 'Email address', 
  database: { }, 
  process: { }, 
  description: 'Email address', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.041 seconds - level verbose  
{ key: 'password',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.041 seconds - level verbose  
{
key: 'password', 
type: {
  type: 'string', 
  description: 'Securely hashed representation of the user's login password.', 
  permission: '#superuser#', 
  example: '2$28a8eabna301089103-13948134nad', 
  friendlyName: 'Password', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.041 seconds - level verbose  
{ key: 'password',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.041 seconds - level verbose  
{
key: 'password', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.041 seconds - level verbose  
'user'
'password'
'sales'
'#superuser#'

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.042 seconds - level verbose  
{
text: 'end loop', 
key: 'password', 
merged: {
  type: 'string', 
  description: 'Securely hashed representation of the user's login password.', 
  permission: '#superuser#', 
  example: '2$28a8eabna301089103-13948134nad', 
  friendlyName: 'Password', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.042 seconds - level verbose  
{ key: 'salt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.042 seconds - level verbose  
{
key: 'salt', 
type: {
  type: 'string', 
  permission: '#superuser#', 
  friendlyName: 'Salt', 
  database: { }, 
  process: { }, 
  description: 'Salt', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.042 seconds - level verbose  
{ key: 'salt',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.042 seconds - level verbose  
{
key: 'salt', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.043 seconds - level verbose  
'user'
'salt'
'sales'
'#superuser#'

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.043 seconds - level verbose  
{
text: 'end loop', 
key: 'salt', 
merged: {
  type: 'string', 
  permission: '#superuser#', 
  friendlyName: 'Salt', 
  database: { }, 
  process: { }, 
  description: 'Salt', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.043 seconds - level verbose  
{ key: 'forgottenPasswordToken',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.043 seconds - level verbose  
{
key: 'forgottenPasswordToken', 
type: {
  permission: '#superuser#', 
  type: 'string', 
  friendlyName: 'Forgotten password token', 
  database: { }, 
  process: { }, 
  description: 'Forgotten password token', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.043 seconds - level verbose  
{ key: 'forgottenPasswordToken',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.043 seconds - level verbose  
{
key: 'forgottenPasswordToken', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.043 seconds - level verbose  
'user'
'forgottenPasswordToken'
'sales'
'#superuser#'

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.044 seconds - level verbose  
{
text: 'end loop', 
key: 'forgottenPasswordToken', 
merged: {
  permission: '#superuser#', 
  type: 'string', 
  friendlyName: 'Forgotten password token', 
  database: { }, 
  process: { }, 
  description: 'Forgotten password token', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.044 seconds - level verbose  
{ key: 'forgottenPasswordExpire',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.044 seconds - level verbose  
{
key: 'forgottenPasswordExpire', 
type: {
  permission: '#superuser#', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Forgotten password expire', 
  process: { }, 
  description: 'Forgotten password expire', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.044 seconds - level verbose  
{ key: 'forgottenPasswordExpire',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.044 seconds - level verbose  
{
key: 'forgottenPasswordExpire', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.044 seconds - level verbose  
'user'
'forgottenPasswordExpire'
'sales'
'#superuser#'

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.044 seconds - level verbose  
{
text: 'end loop', 
key: 'forgottenPasswordExpire', 
merged: {
  permission: '#superuser#', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Forgotten password expire', 
  process: { }, 
  description: 'Forgotten password expire', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.045 seconds - level verbose  
{ key: 'isSuperAdmin',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.045 seconds - level verbose  
{
key: 'isSuperAdmin', 
type: {
  type: 'boolean', 
  description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
  friendlyName: 'Is super admin', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'checkbox',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.045 seconds - level verbose  
{ key: 'isSuperAdmin',  type: 'checkbox',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.045 seconds - level verbose  
{
key: 'isSuperAdmin', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.045 seconds - level verbose  
'user'
'isSuperAdmin'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.045 seconds - level verbose  
{
text: 'end loop', 
key: 'isSuperAdmin', 
merged: {
  type: 'boolean', 
  description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
  friendlyName: 'Is super admin', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'checkbox',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.045 seconds - level verbose  
{ key: 'lastSeenAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.045 seconds - level verbose  
{
key: 'lastSeenAt', 
type: {
  type: 'number', 
  description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
  example: 1502844074211, 
  input: { type: 'date',  class: 'form-control',  }, 
  display: { type: 'date',  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Last seen at', 
  process: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.045 seconds - level verbose  
{ key: 'lastSeenAt',  type: 'date',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.046 seconds - level verbose  
{
key: 'lastSeenAt', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.046 seconds - level verbose  
'user'
'lastSeenAt'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.046 seconds - level verbose  
{
text: 'end loop', 
key: 'lastSeenAt', 
merged: {
  type: 'number', 
  description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
  example: 1502844074211, 
  input: { type: 'date',  class: 'form-control',  }, 
  display: { type: 'date',  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Last seen at', 
  process: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.046 seconds - level verbose  
{ key: 'streetAddress',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.046 seconds - level verbose  
{
key: 'streetAddress', 
type: {
  type: 'string', 
  input: {
    type: 'textarea', 
    rows: 5, 
    cols: 60, 
    placeholder: 'Please enter the street address of the user', 
    class: 'form-control', 
    }, 
  friendlyName: 'Street address', 
  database: { }, 
  process: { }, 
  description: 'Street address', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.046 seconds - level verbose  
{ key: 'streetAddress',  type: 'textarea',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.046 seconds - level verbose  
{
key: 'streetAddress', 
group: 'location', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.046 seconds - level verbose  
'user'
'streetAddress'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.046 seconds - level verbose  
{
text: 'end loop', 
key: 'streetAddress', 
merged: {
  type: 'string', 
  input: {
    type: 'textarea', 
    rows: 5, 
    cols: 60, 
    placeholder: 'Please enter the street address of the user', 
    class: 'form-control', 
    }, 
  friendlyName: 'Street address', 
  database: { }, 
  process: { }, 
  description: 'Street address', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.047 seconds - level verbose  
{ key: 'zip',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.047 seconds - level verbose  
{
key: 'zip', 
type: {
  type: 'string', 
  friendlyName: 'Zip', 
  database: { }, 
  process: { }, 
  description: 'Zip', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.047 seconds - level verbose  
{ key: 'zip',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.047 seconds - level verbose  
{
key: 'zip', 
group: 'location', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.047 seconds - level verbose  
'user'
'zip'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.047 seconds - level verbose  
{
text: 'end loop', 
key: 'zip', 
merged: {
  type: 'string', 
  friendlyName: 'Zip', 
  database: { }, 
  process: { }, 
  description: 'Zip', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.047 seconds - level verbose  
{ key: 'country',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.047 seconds - level verbose  
{
key: 'country', 
type: {
  type: 'string', 
  friendlyName: 'Country', 
  database: { }, 
  process: { }, 
  description: 'Country', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.047 seconds - level verbose  
{ key: 'country',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.047 seconds - level verbose  
{
key: 'country', 
group: 'location', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.047 seconds - level verbose  
'user'
'country'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.048 seconds - level verbose  
{
text: 'end loop', 
key: 'country', 
merged: {
  type: 'string', 
  friendlyName: 'Country', 
  database: { }, 
  process: { }, 
  description: 'Country', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.048 seconds - level verbose  
{ key: 'region',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.048 seconds - level verbose  
{
key: 'region', 
type: {
  description: 'This is an example of a select using the data in the isIn attribute.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: [
      'Europe', 
      'Middle East', 
      'Africa', 
      'South Asia', 
      'East', 
      'N America', 
      'S America', 
      ], 
    class: 'form-control', 
    }, 
  friendlyName: 'Region', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.048 seconds - level verbose  
{ key: 'region',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.048 seconds - level verbose  
{
key: 'region', 
group: 'location', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.048 seconds - level verbose  
'user'
'region'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.048 seconds - level verbose  
{
text: 'end loop', 
key: 'region', 
merged: {
  description: 'This is an example of a select using the data in the isIn attribute.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: [
      'Europe', 
      'Middle East', 
      'Africa', 
      'South Asia', 
      'East', 
      'N America', 
      'S America', 
      ], 
    class: 'form-control', 
    }, 
  friendlyName: 'Region', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.048 seconds - level verbose  
{ key: 'permission',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.048 seconds - level verbose  
{
key: 'permission', 
type: {
  friendlyName: 'Permission set', 
  type: 'string', 
  description: 'Permission set.', 
  extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
  allowNull: true, 
  input: {
    type: 'select', 
    values: Function, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.049 seconds - level verbose  
{ key: 'permission',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.049 seconds - level verbose  
{
key: 'permission', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.049 seconds - level verbose  
'user'
'permission'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.049 seconds - level verbose  
{
text: 'end loop', 
key: 'permission', 
merged: {
  friendlyName: 'Permission set', 
  type: 'string', 
  description: 'Permission set.', 
  extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
  allowNull: true, 
  input: {
    type: 'select', 
    values: Function, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.049 seconds - level verbose  
{ key: 'isOrg',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.049 seconds - level verbose  
{
key: 'isOrg', 
type: {
  friendlyName: 'Person or Business?', 
  type: 'string', 
  description: 'This record describes a business rather than a person', 
  input: {
    type: 'radio', 
    values: { P: 'Person',  B: 'Business/Organisation',  }, 
    required: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.049 seconds - level verbose  
{ key: 'isOrg',  type: 'radio',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.049 seconds - level verbose  
{
key: 'isOrg', 
group: 'basics', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.049 seconds - level verbose  
'user'
'isOrg'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.049 seconds - level verbose  
{
text: 'end loop', 
key: 'isOrg', 
merged: {
  friendlyName: 'Person or Business?', 
  type: 'string', 
  description: 'This record describes a business rather than a person', 
  input: {
    type: 'radio', 
    values: { P: 'Person',  B: 'Business/Organisation',  }, 
    required: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.049 seconds - level verbose  
{ key: 'business',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.049 seconds - level verbose  
{
key: 'business', 
type: {
  type: 'string', 
  description: 'Description of the customer's business', 
  friendlyName: 'The type of business.', 
  input: {
    type: 'textarea', 
    rows: 3, 
    cols: 60, 
    placeholder: 'Please enter a description of the user's business and place in the organisation', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.049 seconds - level verbose  
{ key: 'business',  type: 'textarea',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.049 seconds - level verbose  
{
key: 'business', 
group: 'profile', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.049 seconds - level verbose  
'user'
'business'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.050 seconds - level verbose  
{
text: 'end loop', 
key: 'business', 
merged: {
  type: 'string', 
  description: 'Description of the customer's business', 
  friendlyName: 'The type of business.', 
  input: {
    type: 'textarea', 
    rows: 3, 
    cols: 60, 
    placeholder: 'Please enter a description of the user's business and place in the organisation', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.050 seconds - level verbose  
{ key: 'organisation',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.052 seconds - level verbose  
{
key: 'organisation', 
type: {
  friendlyName: 'Organisation', 
  model: 'user', 
  description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
  input: {
    type: 'select', 
    search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.052 seconds - level verbose  
{ key: 'organisation',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.052 seconds - level verbose  
{
key: 'organisation', 
group: 'profile', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.052 seconds - level verbose  
'user'
'organisation'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.053 seconds - level verbose  
{
text: 'end loop', 
key: 'organisation', 
merged: {
  friendlyName: 'Organisation', 
  model: 'user', 
  description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
  input: {
    type: 'select', 
    search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.053 seconds - level verbose  
{ key: 'userType',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.053 seconds - level verbose  
{
key: 'userType', 
type: {
  description: 'The type of user.  Customer/Supplier or in-house.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: {
      L: 'Sales lead', 
      P: 'Prospect', 
      C: 'Customer', 
      S: 'Supplier', 
      I: 'In-house staff', 
      N: 'No longer considered a prospect', 
      O: 'Other', 
      }, 
    required: true, 
    class: 'form-control', 
    }, 
  friendlyName: 'User type', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.053 seconds - level verbose  
{ key: 'userType',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.053 seconds - level verbose  
{
key: 'userType', 
group: 'basics', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.053 seconds - level verbose  
'user'
'userType'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.053 seconds - level verbose  
{
text: 'end loop', 
key: 'userType', 
merged: {
  description: 'The type of user.  Customer/Supplier or in-house.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: {
      L: 'Sales lead', 
      P: 'Prospect', 
      C: 'Customer', 
      S: 'Supplier', 
      I: 'In-house staff', 
      N: 'No longer considered a prospect', 
      O: 'Other', 
      }, 
    required: true, 
    class: 'form-control', 
    }, 
  friendlyName: 'User type', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.053 seconds - level verbose  
{ key: 'lastContact',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.053 seconds - level verbose  
{
key: 'lastContact', 
type: {
  model: 'contacts', 
  child: false, 
  friendlyName: 'Last contact', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Last contact', 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.053 seconds - level verbose  
{ key: 'lastContact',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.053 seconds - level verbose  
{
key: 'lastContact', 
group: 'contacts', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.053 seconds - level verbose  
'user'
'lastContact'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.054 seconds - level verbose  
{
text: 'end loop', 
key: 'lastContact', 
merged: {
  model: 'contacts', 
  child: false, 
  friendlyName: 'Last contact', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Last contact', 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.054 seconds - level verbose  
{ key: 'nextActionDate',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.054 seconds - level verbose  
{
key: 'nextActionDate', 
type: {
  friendlyName: 'Next action date', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
  input: {
    type: 'date', 
    hidden: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.054 seconds - level verbose  
{ key: 'nextActionDate',  type: 'date',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.054 seconds - level verbose  
{
key: 'nextActionDate', 
group: 'contacts', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.054 seconds - level verbose  
'user'
'nextActionDate'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.054 seconds - level verbose  
{
text: 'end loop', 
key: 'nextActionDate', 
merged: {
  friendlyName: 'Next action date', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
  input: {
    type: 'date', 
    hidden: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.054 seconds - level verbose  
{ key: 'nextAction',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.054 seconds - level verbose  
{
key: 'nextAction', 
type: {
  friendlyName: 'Next action', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'text', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.054 seconds - level verbose  
{ key: 'nextAction',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.054 seconds - level verbose  
{
key: 'nextAction', 
group: 'contacts', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.054 seconds - level verbose  
'user'
'nextAction'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.054 seconds - level verbose  
{
text: 'end loop', 
key: 'nextAction', 
merged: {
  friendlyName: 'Next action', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'text', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.055 seconds - level verbose  
{ key: 'mobilePhone',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.055 seconds - level verbose  
{
key: 'mobilePhone', 
type: {
  type: 'string', 
  friendlyName: 'Mobile phone', 
  database: { }, 
  process: { }, 
  description: 'Mobile phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.055 seconds - level verbose  
{ key: 'mobilePhone',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.055 seconds - level verbose  
{
key: 'mobilePhone', 
group: 'location', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.055 seconds - level verbose  
'user'
'mobilePhone'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.055 seconds - level verbose  
{
text: 'end loop', 
key: 'mobilePhone', 
merged: {
  type: 'string', 
  friendlyName: 'Mobile phone', 
  database: { }, 
  process: { }, 
  description: 'Mobile phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.055 seconds - level verbose  
{ key: 'mainPhone',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.055 seconds - level verbose  
{
key: 'mainPhone', 
type: {
  type: 'string', 
  friendlyName: 'Main phone', 
  database: { }, 
  process: { }, 
  description: 'Main phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.055 seconds - level verbose  
{ key: 'mainPhone',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.055 seconds - level verbose  
{
key: 'mainPhone', 
group: 'location', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.055 seconds - level verbose  
'user'
'mainPhone'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.055 seconds - level verbose  
{
text: 'end loop', 
key: 'mainPhone', 
merged: {
  type: 'string', 
  friendlyName: 'Main phone', 
  database: { }, 
  process: { }, 
  description: 'Main phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.055 seconds - level verbose  
{ key: 'lastSale',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.055 seconds - level verbose  
{
key: 'lastSale', 
type: {
  type: 'number', 
  model: 'salesorders', 
  friendlyName: 'Last sale', 
  description: 'Created automatically. This is a link to the last sales order.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.055 seconds - level verbose  
{ key: 'lastSale',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.056 seconds - level verbose  
{
key: 'lastSale', 
group: 'sales', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.056 seconds - level verbose  
'user'
'lastSale'
'sales'
{ all: [ 'admin',  'sales',  ],  }

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.056 seconds - level verbose  
{
text: 'end loop', 
key: 'lastSale', 
merged: {
  type: 'number', 
  model: 'salesorders', 
  friendlyName: 'Last sale', 
  description: 'Created automatically. This is a link to the last sales order.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.056 seconds - level verbose  
{ key: 'notes',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.056 seconds - level verbose  
{
key: 'notes', 
type: {
  type: 'string', 
  friendlyName: 'Notes', 
  input: {
    type: 'textarea', 
    rows: 6, 
    cols: 60, 
    placeholder: 'Please enter any notes about this user.', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Notes', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.056 seconds - level verbose  
{ key: 'notes',  type: 'textarea',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.056 seconds - level verbose  
{
key: 'notes', 
group: 'profile', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.056 seconds - level verbose  
'user'
'notes'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.056 seconds - level verbose  
{
text: 'end loop', 
key: 'notes', 
merged: {
  type: 'string', 
  friendlyName: 'Notes', 
  input: {
    type: 'textarea', 
    rows: 6, 
    cols: 60, 
    placeholder: 'Please enter any notes about this user.', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Notes', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.056 seconds - level verbose  
{ key: 'webpages',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.056 seconds - level verbose  
{
key: 'webpages', 
type: {
  collection: 'webpages', 
  via: 'author', 
  friendlyName: 'Webpages', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'webpages' via column 'author'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.057 seconds - level verbose  
{ key: 'webpages',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.057 seconds - level verbose  
{
key: 'webpages', 
group: 'website', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.057 seconds - level verbose  
'user'
'webpages'
'sales'
{ all: [ 'admin',  'web',  ],  }

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.057 seconds - level verbose  
{
text: 'end loop', 
key: 'webpages', 
merged: {
  collection: 'webpages', 
  via: 'author', 
  friendlyName: 'Webpages', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'webpages' via column 'author'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.057 seconds - level verbose  
{ key: 'contacts',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.057 seconds - level verbose  
{
key: 'contacts', 
type: {
  collection: 'contacts', 
  via: 'user', 
  collectionList: {
    limit: 5, 
    order: 'date', 
    direction: 'DESC', 
    heading: 'Recent contacts', 
    columns: [ 'id',  'date',  'notes',  'closed',  ], 
    addChildTip: 'Add a new contact for this user.', 
    }, 
  friendlyName: 'Contacts', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'contacts' via column 'user'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.057 seconds - level verbose  
{ key: 'contacts',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.057 seconds - level verbose  
{
key: 'contacts', 
group: 'contacts', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.057 seconds - level verbose  
'user'
'contacts'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.057 seconds - level verbose  
{
text: 'end loop', 
key: 'contacts', 
merged: {
  collection: 'contacts', 
  via: 'user', 
  collectionList: {
    limit: 5, 
    order: 'date', 
    direction: 'DESC', 
    heading: 'Recent contacts', 
    columns: [ 'id',  'date',  'notes',  'closed',  ], 
    addChildTip: 'Add a new contact for this user.', 
    }, 
  friendlyName: 'Contacts', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'contacts' via column 'user'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.057 seconds - level verbose  
{ key: 'salesorders',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.058 seconds - level verbose  
{
key: 'salesorders', 
type: {
  collection: 'salesorders', 
  via: 'customer', 
  collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
  friendlyName: 'Salesorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'salesorders' via column 'customer'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.058 seconds - level verbose  
{ key: 'salesorders',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.058 seconds - level verbose  
{
key: 'salesorders', 
group: 'sales', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.058 seconds - level verbose  
'user'
'salesorders'
'sales'
{ all: [ 'admin',  'sales',  ],  }

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.058 seconds - level verbose  
{
text: 'end loop', 
key: 'salesorders', 
merged: {
  collection: 'salesorders', 
  via: 'customer', 
  collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
  friendlyName: 'Salesorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'salesorders' via column 'customer'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.058 seconds - level verbose  
{ key: 'products',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.058 seconds - level verbose  
{
key: 'products', 
type: {
  collection: 'products', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'price',  'class',  'description',  ], 
    }, 
  friendlyName: 'Products', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'products' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.058 seconds - level verbose  
{ key: 'products',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.058 seconds - level verbose  
{
key: 'products', 
group: 'products', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.058 seconds - level verbose  
'user'
'products'
'sales'
{
all: [ 'admin',  'purchasing',  ], 
view: [ 'sales',  ], 
}

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.059 seconds - level verbose  
{
text: 'end loop', 
key: 'products', 
merged: {
  collection: 'products', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'price',  'class',  'description',  ], 
    }, 
  friendlyName: 'Products', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'products' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.059 seconds - level verbose  
{ key: 'purchaseorders',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.059 seconds - level verbose  
{
key: 'purchaseorders', 
type: {
  collection: 'purchaseorders', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'date',  'status',  'notes',  ], 
    }, 
  friendlyName: 'Purchaseorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.059 seconds - level verbose  
{ key: 'purchaseorders',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.059 seconds - level verbose  
{
key: 'purchaseorders', 
group: 'products', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.059 seconds - level verbose  
'user'
'purchaseorders'
'sales'
{
all: [ 'admin',  'purchasing',  ], 
view: [ 'sales',  ], 
}

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.060 seconds - level verbose  
{
text: 'end loop', 
key: 'purchaseorders', 
merged: {
  collection: 'purchaseorders', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'date',  'status',  'notes',  ], 
    }, 
  friendlyName: 'Purchaseorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.060 seconds - level verbose  
{ key: 'people',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.060 seconds - level verbose  
{
key: 'people', 
type: {
  friendlyName: 'Associated people', 
  collection: 'user', 
  via: 'organisation', 
  collectionList: {
    columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
    }, 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'user' via column 'organisation'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.060 seconds - level verbose  
{ key: 'people',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.060 seconds - level verbose  
{
key: 'people', 
group: 'contacts', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.060 seconds - level verbose  
'user'
'people'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.060 seconds - level verbose  
{
text: 'end loop', 
key: 'people', 
merged: {
  friendlyName: 'Associated people', 
  collection: 'user', 
  via: 'organisation', 
  collectionList: {
    columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
    }, 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'user' via column 'organisation'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:162:9 -> 0.061 seconds - level verbose  
{
merged: {
  id: {
    friendlyName: 'User No', 
    type: 'number', 
    primaryKey: true, 
    autoincrement: true, 
    database: { }, 
    process: { }, 
    description: 'User No', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  createdAt: {
    friendlyName: 'Date created', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { createdAt: true,  }, 
    description: 'Date created', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedAt: {
    friendlyName: 'Date last updated', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { updatedAt: true,  }, 
    description: 'Date last updated', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedBy: {
    friendlyName: 'Last updated by', 
    description: 'The person who last updated the row.', 
    type: 'number', 
    model: 'user', 
    process: { updatedBy: true,  }, 
    database: { }, 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  fullName: {
    type: 'string', 
    description: 'Full representation of the user's name.', 
    example: 'Mary Sue van der McHenst', 
    input: {
      required: true, 
      placeholder: 'Please enter the persons full name', 
      class: 'form-control', 
      type: 'text', 
      }, 
    friendlyName: 'Full name', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  emailAddress: {
    type: 'string', 
    friendlyName: 'Email address', 
    database: { }, 
    process: { }, 
    description: 'Email address', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  password: {
    type: 'string', 
    description: 'Securely hashed representation of the user's login password.', 
    permission: '#superuser#', 
    example: '2$28a8eabna301089103-13948134nad', 
    friendlyName: 'Password', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    }, 
  salt: {
    type: 'string', 
    permission: '#superuser#', 
    friendlyName: 'Salt', 
    database: { }, 
    process: { }, 
    description: 'Salt', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    }, 
  forgottenPasswordToken: {
    permission: '#superuser#', 
    type: 'string', 
    friendlyName: 'Forgotten password token', 
    database: { }, 
    process: { }, 
    description: 'Forgotten password token', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    }, 
  forgottenPasswordExpire: {
    permission: '#superuser#', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Forgotten password expire', 
    process: { }, 
    description: 'Forgotten password expire', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: false, 
    canView: false, 
    }, 
  isSuperAdmin: {
    type: 'boolean', 
    description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
    friendlyName: 'Is super admin', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'checkbox',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSeenAt: {
    type: 'number', 
    description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
    example: 1502844074211, 
    input: { type: 'date',  class: 'form-control',  }, 
    display: { type: 'date',  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Last seen at', 
    process: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  streetAddress: {
    type: 'string', 
    input: {
      type: 'textarea', 
      rows: 5, 
      cols: 60, 
      placeholder: 'Please enter the street address of the user', 
      class: 'form-control', 
      }, 
    friendlyName: 'Street address', 
    database: { }, 
    process: { }, 
    description: 'Street address', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  zip: {
    type: 'string', 
    friendlyName: 'Zip', 
    database: { }, 
    process: { }, 
    description: 'Zip', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  country: {
    type: 'string', 
    friendlyName: 'Country', 
    database: { }, 
    process: { }, 
    description: 'Country', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  region: {
    description: 'This is an example of a select using the data in the isIn attribute.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: [
        'Europe', 
        'Middle East', 
        'Africa', 
        'South Asia', 
        'East', 
        'N America', 
        'S America', 
        ], 
      class: 'form-control', 
      }, 
    friendlyName: 'Region', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  permission: {
    friendlyName: 'Permission set', 
    type: 'string', 
    description: 'Permission set.', 
    extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
    allowNull: true, 
    input: {
      type: 'select', 
      values: Function, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  isOrg: {
    friendlyName: 'Person or Business?', 
    type: 'string', 
    description: 'This record describes a business rather than a person', 
    input: {
      type: 'radio', 
      values: { P: 'Person',  B: 'Business/Organisation',  }, 
      required: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  business: {
    type: 'string', 
    description: 'Description of the customer's business', 
    friendlyName: 'The type of business.', 
    input: {
      type: 'textarea', 
      rows: 3, 
      cols: 60, 
      placeholder: 'Please enter a description of the user's business and place in the organisation', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  organisation: {
    friendlyName: 'Organisation', 
    model: 'user', 
    description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
    input: {
      type: 'select', 
      search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  userType: {
    description: 'The type of user.  Customer/Supplier or in-house.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: {
        L: 'Sales lead', 
        P: 'Prospect', 
        C: 'Customer', 
        S: 'Supplier', 
        I: 'In-house staff', 
        N: 'No longer considered a prospect', 
        O: 'Other', 
        }, 
      required: true, 
      class: 'form-control', 
      }, 
    friendlyName: 'User type', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastContact: {
    model: 'contacts', 
    child: false, 
    friendlyName: 'Last contact', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Last contact', 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextActionDate: {
    friendlyName: 'Next action date', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
    input: {
      type: 'date', 
      hidden: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextAction: {
    friendlyName: 'Next action', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'text', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mobilePhone: {
    type: 'string', 
    friendlyName: 'Mobile phone', 
    database: { }, 
    process: { }, 
    description: 'Mobile phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mainPhone: {
    type: 'string', 
    friendlyName: 'Main phone', 
    database: { }, 
    process: { }, 
    description: 'Main phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSale: {
    type: 'number', 
    model: 'salesorders', 
    friendlyName: 'Last sale', 
    description: 'Created automatically. This is a link to the last sales order.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  notes: {
    type: 'string', 
    friendlyName: 'Notes', 
    input: {
      type: 'textarea', 
      rows: 6, 
      cols: 60, 
      placeholder: 'Please enter any notes about this user.', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Notes', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  webpages: {
    collection: 'webpages', 
    via: 'author', 
    friendlyName: 'Webpages', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'webpages' via column 'author'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    permission: { all: [ 'admin',  'web',  ],  }, 
    }, 
  contacts: {
    collection: 'contacts', 
    via: 'user', 
    collectionList: {
      limit: 5, 
      order: 'date', 
      direction: 'DESC', 
      heading: 'Recent contacts', 
      columns: [ 'id',  'date',  'notes',  'closed',  ], 
      addChildTip: 'Add a new contact for this user.', 
      }, 
    friendlyName: 'Contacts', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'contacts' via column 'user'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salesorders: {
    collection: 'salesorders', 
    via: 'customer', 
    collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
    friendlyName: 'Salesorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'salesorders' via column 'customer'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  products: {
    collection: 'products', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'price',  'class',  'description',  ], 
      }, 
    friendlyName: 'Products', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'products' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  purchaseorders: {
    collection: 'purchaseorders', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'date',  'status',  'notes',  ], 
      }, 
    friendlyName: 'Purchaseorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  people: {
    friendlyName: 'Associated people', 
    collection: 'user', 
    via: 'organisation', 
    collectionList: {
      columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
      }, 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'user' via column 'organisation'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  }, 
}

------------------------------------------------------------
admin.js:193:11 -> 0.061 seconds - level norm  
{
text: 'after validate URL', 
errors: 0, 
errortext: '', 
}

------------------------------------------------------------
create-row.js:12:9 -> 0.061 seconds - level norm  
{
inputs: {
  0: 'audit', 
  1: {
    updatedBy: '35', 
    table: 'user', 
    mode: 'listrow', 
    row: 35, 
    data: '{"table":"user","mode":"listrow","id":"35"}', 
    }, 
  }, 
}

------------------------------------------------------------
table-data.js:9:9 -> 0.061 seconds - level verbose  
{ inputs: { 0: 'audit',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.061 seconds - level verbose  
'This table is maintained by the system to record every action. The table can get very 
  large, so it can be automatically trimmed.  The trimming rules are set in the suds configuration file.'

------------------------------------------------------------
table-data.js:26:13 -> 0.061 seconds - level verbose  
{
other: {
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'table', 
    'mode', 
    'row', 
    'data', 
    ], 
  }, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.061 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.061 seconds - level verbose  
'Audit'

------------------------------------------------------------
merge-attributes.js:9:10 -> 0.061 seconds - level norm  
{ inputs: { 0: 'audit',  },  }

------------------------------------------------------------
merge-attributes.js:13:10 -> 0.061 seconds - level verbose  
{
tableData: {
  description: 'This table is maintained by the system to record every action. The table can get very 
  large, so it can be automatically trimmed.  The trimming rules are set in the suds configuration file.', 
  attributes: {
    id: {
      friendlyName: 'User No', 
      type: 'number', 
      autoincrement: true, 
      primaryKey: true, 
      database: { }, 
      process: { }, 
      description: 'User No', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    createdAt: {
      friendlyName: 'Date created', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { createdAt: true,  }, 
      description: 'Date created', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedAt: {
      friendlyName: 'Date last updated', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { updatedAt: true,  }, 
      description: 'Date last updated', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedBy: {
      friendlyName: 'Last updated by', 
      description: 'The person who last updated the row.', 
      type: 'number', 
      model: 'user', 
      process: { updatedBy: true,  }, 
      database: { }, 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    table: {
      type: 'string', 
      database: { type: 'tinytext',  }, 
      friendlyName: 'Table', 
      process: { }, 
      description: 'Table', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mode: {
      type: 'string', 
      database: { type: 'tinytext',  length: 10,  }, 
      friendlyName: 'Mode', 
      process: { }, 
      description: 'Mode', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    row: {
      type: 'number', 
      friendlyName: 'Row', 
      database: { }, 
      process: { }, 
      description: 'Row', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    data: {
      type: 'string', 
      database: { type: 'longtext',  }, 
      friendlyName: 'Data', 
      process: { }, 
      description: 'Data', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    }, 
  groups: {
    other: {
      columns: [
        'id', 
        'createdAt', 
        'updatedAt', 
        'updatedBy', 
        'table', 
        'mode', 
        'row', 
        'data', 
        ], 
      }, 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:21:9 -> 0.062 seconds - level verbose  
{
table: 'audit', 
attributes: {
  id: {
    friendlyName: 'User No', 
    type: 'number', 
    autoincrement: true, 
    primaryKey: true, 
    database: { }, 
    process: { }, 
    description: 'User No', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  createdAt: {
    friendlyName: 'Date created', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { createdAt: true,  }, 
    description: 'Date created', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedAt: {
    friendlyName: 'Date last updated', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { updatedAt: true,  }, 
    description: 'Date last updated', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedBy: {
    friendlyName: 'Last updated by', 
    description: 'The person who last updated the row.', 
    type: 'number', 
    model: 'user', 
    process: { updatedBy: true,  }, 
    database: { }, 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  table: {
    type: 'string', 
    database: { type: 'tinytext',  }, 
    friendlyName: 'Table', 
    process: { }, 
    description: 'Table', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mode: {
    type: 'string', 
    database: { type: 'tinytext',  length: 10,  }, 
    friendlyName: 'Mode', 
    process: { }, 
    description: 'Mode', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  row: {
    type: 'number', 
    friendlyName: 'Row', 
    database: { }, 
    process: { }, 
    description: 'Row', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  data: {
    type: 'string', 
    database: { type: 'longtext',  }, 
    friendlyName: 'Data', 
    process: { }, 
    description: 'Data', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  }, 
}

------------------------------------------------------------
invert-groups.js:5:9 -> 0.062 seconds - level verbose  
{
inputs: {
  0: {
    description: 'This table is maintained by the system to record every action. The table can get very 
  large, so it can be automatically trimmed.  The trimming rules are set in the suds configuration file.', 
    attributes: {
      id: {
        friendlyName: 'User No', 
        type: 'number', 
        autoincrement: true, 
        primaryKey: true, 
        database: { }, 
        process: { }, 
        description: 'User No', 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      createdAt: {
        friendlyName: 'Date created', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        process: { createdAt: true,  }, 
        description: 'Date created', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      updatedAt: {
        friendlyName: 'Date last updated', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        process: { updatedAt: true,  }, 
        description: 'Date last updated', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      updatedBy: {
        friendlyName: 'Last updated by', 
        description: 'The person who last updated the row.', 
        type: 'number', 
        model: 'user', 
        process: { updatedBy: true,  }, 
        database: { }, 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      table: {
        type: 'string', 
        database: { type: 'tinytext',  }, 
        friendlyName: 'Table', 
        process: { }, 
        description: 'Table', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      mode: {
        type: 'string', 
        database: { type: 'tinytext',  length: 10,  }, 
        friendlyName: 'Mode', 
        process: { }, 
        description: 'Mode', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      row: {
        type: 'number', 
        friendlyName: 'Row', 
        database: { }, 
        process: { }, 
        description: 'Row', 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      data: {
        type: 'string', 
        database: { type: 'longtext',  }, 
        friendlyName: 'Data', 
        process: { }, 
        description: 'Data', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      }, 
    groups: {
      other: {
        columns: [
          'id', 
          'createdAt', 
          'updatedAt', 
          'updatedBy', 
          'table', 
          'mode', 
          'row', 
          'data', 
          ], 
        }, 
      }, 
    }, 
  1: {
    id: {
      friendlyName: 'User No', 
      type: 'number', 
      autoincrement: true, 
      primaryKey: true, 
      database: { }, 
      process: { }, 
      description: 'User No', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    createdAt: {
      friendlyName: 'Date created', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { createdAt: true,  }, 
      description: 'Date created', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedAt: {
      friendlyName: 'Date last updated', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { updatedAt: true,  }, 
      description: 'Date last updated', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedBy: {
      friendlyName: 'Last updated by', 
      description: 'The person who last updated the row.', 
      type: 'number', 
      model: 'user', 
      process: { updatedBy: true,  }, 
      database: { }, 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    table: {
      type: 'string', 
      database: { type: 'tinytext',  }, 
      friendlyName: 'Table', 
      process: { }, 
      description: 'Table', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mode: {
      type: 'string', 
      database: { type: 'tinytext',  length: 10,  }, 
      friendlyName: 'Mode', 
      process: { }, 
      description: 'Mode', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    row: {
      type: 'number', 
      friendlyName: 'Row', 
      database: { }, 
      process: { }, 
      description: 'Row', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    data: {
      type: 'string', 
      database: { type: 'longtext',  }, 
      friendlyName: 'Data', 
      process: { }, 
      description: 'Data', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    }, 
  }, 
}

------------------------------------------------------------
invert-groups.js:16:9 -> 0.062 seconds - level verbose  
{
other: {
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'table', 
    'mode', 
    'row', 
    'data', 
    ], 
  }, 
}

------------------------------------------------------------
invert-groups.js:18:11 -> 0.062 seconds - level verbose  
'other'

------------------------------------------------------------
invert-groups.js:31:9 -> 0.062 seconds - level verbose  
{
id: 'other', 
createdAt: 'other', 
updatedAt: 'other', 
updatedBy: 'other', 
table: 'other', 
mode: 'other', 
row: 'other', 
data: 'other', 
}

------------------------------------------------------------
merge-attributes.js:26:9 -> 0.062 seconds - level verbose  
{
id: 'other', 
createdAt: 'other', 
updatedAt: 'other', 
updatedBy: 'other', 
table: 'other', 
mode: 'other', 
row: 'other', 
data: 'other', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.062 seconds - level verbose  
{ key: 'id',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.062 seconds - level verbose  
{
key: 'id', 
type: {
  friendlyName: 'User No', 
  type: 'number', 
  autoincrement: true, 
  primaryKey: true, 
  database: { }, 
  process: { }, 
  description: 'User No', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.062 seconds - level verbose  
{ key: 'id',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.062 seconds - level verbose  
{
key: 'id', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.062 seconds - level verbose  
'audit'
'id'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.063 seconds - level verbose  
{
text: 'end loop', 
key: 'id', 
merged: {
  friendlyName: 'User No', 
  type: 'number', 
  autoincrement: true, 
  primaryKey: true, 
  database: { }, 
  process: { }, 
  description: 'User No', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.063 seconds - level verbose  
{ key: 'createdAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.063 seconds - level verbose  
{
key: 'createdAt', 
type: {
  friendlyName: 'Date created', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { createdAt: true,  }, 
  description: 'Date created', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.063 seconds - level verbose  
{ key: 'createdAt',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.063 seconds - level verbose  
{
key: 'createdAt', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.063 seconds - level verbose  
'audit'
'createdAt'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.063 seconds - level verbose  
{
text: 'end loop', 
key: 'createdAt', 
merged: {
  friendlyName: 'Date created', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { createdAt: true,  }, 
  description: 'Date created', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.063 seconds - level verbose  
{ key: 'updatedAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.063 seconds - level verbose  
{
key: 'updatedAt', 
type: {
  friendlyName: 'Date last updated', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { updatedAt: true,  }, 
  description: 'Date last updated', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.064 seconds - level verbose  
{ key: 'updatedAt',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.064 seconds - level verbose  
{
key: 'updatedAt', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.064 seconds - level verbose  
'audit'
'updatedAt'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.064 seconds - level verbose  
{
text: 'end loop', 
key: 'updatedAt', 
merged: {
  friendlyName: 'Date last updated', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { updatedAt: true,  }, 
  description: 'Date last updated', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.064 seconds - level verbose  
{ key: 'updatedBy',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.064 seconds - level verbose  
{
key: 'updatedBy', 
type: {
  friendlyName: 'Last updated by', 
  description: 'The person who last updated the row.', 
  type: 'number', 
  model: 'user', 
  process: { updatedBy: true,  }, 
  database: { }, 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.064 seconds - level verbose  
{ key: 'updatedBy',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.064 seconds - level verbose  
{
key: 'updatedBy', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.064 seconds - level verbose  
'audit'
'updatedBy'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.064 seconds - level verbose  
{
text: 'end loop', 
key: 'updatedBy', 
merged: {
  friendlyName: 'Last updated by', 
  description: 'The person who last updated the row.', 
  type: 'number', 
  model: 'user', 
  process: { updatedBy: true,  }, 
  database: { }, 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.064 seconds - level verbose  
{ key: 'table',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.064 seconds - level verbose  
{
key: 'table', 
type: {
  type: 'string', 
  database: { type: 'tinytext',  }, 
  friendlyName: 'Table', 
  process: { }, 
  description: 'Table', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.065 seconds - level verbose  
{ key: 'table',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.065 seconds - level verbose  
{
key: 'table', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.065 seconds - level verbose  
'audit'
'table'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.065 seconds - level verbose  
{
text: 'end loop', 
key: 'table', 
merged: {
  type: 'string', 
  database: { type: 'tinytext',  }, 
  friendlyName: 'Table', 
  process: { }, 
  description: 'Table', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.065 seconds - level verbose  
{ key: 'mode',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.065 seconds - level verbose  
{
key: 'mode', 
type: {
  type: 'string', 
  database: { type: 'tinytext',  length: 10,  }, 
  friendlyName: 'Mode', 
  process: { }, 
  description: 'Mode', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.065 seconds - level verbose  
{ key: 'mode',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.065 seconds - level verbose  
{
key: 'mode', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.065 seconds - level verbose  
'audit'
'mode'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.065 seconds - level verbose  
{
text: 'end loop', 
key: 'mode', 
merged: {
  type: 'string', 
  database: { type: 'tinytext',  length: 10,  }, 
  friendlyName: 'Mode', 
  process: { }, 
  description: 'Mode', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.065 seconds - level verbose  
{ key: 'row',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.065 seconds - level verbose  
{
key: 'row', 
type: {
  type: 'number', 
  friendlyName: 'Row', 
  database: { }, 
  process: { }, 
  description: 'Row', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.065 seconds - level verbose  
{ key: 'row',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.066 seconds - level verbose  
{
key: 'row', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.066 seconds - level verbose  
'audit'
'row'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.066 seconds - level verbose  
{
text: 'end loop', 
key: 'row', 
merged: {
  type: 'number', 
  friendlyName: 'Row', 
  database: { }, 
  process: { }, 
  description: 'Row', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.066 seconds - level verbose  
{ key: 'data',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.066 seconds - level verbose  
{
key: 'data', 
type: {
  type: 'string', 
  database: { type: 'longtext',  }, 
  friendlyName: 'Data', 
  process: { }, 
  description: 'Data', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.066 seconds - level verbose  
{ key: 'data',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.066 seconds - level verbose  
{
key: 'data', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.066 seconds - level verbose  
'audit'
'data'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.066 seconds - level verbose  
{
text: 'end loop', 
key: 'data', 
merged: {
  type: 'string', 
  database: { type: 'longtext',  }, 
  friendlyName: 'Data', 
  process: { }, 
  description: 'Data', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:162:9 -> 0.066 seconds - level verbose  
{
merged: {
  id: {
    friendlyName: 'User No', 
    type: 'number', 
    autoincrement: true, 
    primaryKey: true, 
    database: { }, 
    process: { }, 
    description: 'User No', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  createdAt: {
    friendlyName: 'Date created', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { createdAt: true,  }, 
    description: 'Date created', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedAt: {
    friendlyName: 'Date last updated', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { updatedAt: true,  }, 
    description: 'Date last updated', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedBy: {
    friendlyName: 'Last updated by', 
    description: 'The person who last updated the row.', 
    type: 'number', 
    model: 'user', 
    process: { updatedBy: true,  }, 
    database: { }, 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  table: {
    type: 'string', 
    database: { type: 'tinytext',  }, 
    friendlyName: 'Table', 
    process: { }, 
    description: 'Table', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mode: {
    type: 'string', 
    database: { type: 'tinytext',  length: 10,  }, 
    friendlyName: 'Mode', 
    process: { }, 
    description: 'Mode', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  row: {
    type: 'number', 
    friendlyName: 'Row', 
    database: { }, 
    process: { }, 
    description: 'Row', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  data: {
    type: 'string', 
    database: { type: 'longtext',  }, 
    friendlyName: 'Data', 
    process: { }, 
    description: 'Data', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  }, 
}

------------------------------------------------------------
fix-record.js:15:11 -> 0.066 seconds - level norm  
{
inputs: {
  0: 'audit', 
  1: {
    updatedBy: '35', 
    table: 'user', 
    mode: 'listrow', 
    row: 35, 
    data: '{"table":"user","mode":"listrow","id":"35"}', 
    }, 
  }, 
}

------------------------------------------------------------
table-data.js:9:9 -> 0.067 seconds - level verbose  
{ inputs: { 0: 'audit',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.067 seconds - level verbose  
'This table is maintained by the system to record every action. The table can get very 
  large, so it can be automatically trimmed.  The trimming rules are set in the suds configuration file.'

------------------------------------------------------------
table-data.js:26:13 -> 0.067 seconds - level verbose  
{
other: {
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'table', 
    'mode', 
    'row', 
    'data', 
    ], 
  }, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.067 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.067 seconds - level verbose  
'Audit'

------------------------------------------------------------
merge-attributes.js:9:10 -> 0.067 seconds - level norm  
{ inputs: { 0: 'audit',  },  }

------------------------------------------------------------
merge-attributes.js:13:10 -> 0.067 seconds - level verbose  
{
tableData: {
  description: 'This table is maintained by the system to record every action. The table can get very 
  large, so it can be automatically trimmed.  The trimming rules are set in the suds configuration file.', 
  attributes: {
    id: {
      friendlyName: 'User No', 
      type: 'number', 
      autoincrement: true, 
      primaryKey: true, 
      database: { }, 
      process: { }, 
      description: 'User No', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    createdAt: {
      friendlyName: 'Date created', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { createdAt: true,  }, 
      description: 'Date created', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedAt: {
      friendlyName: 'Date last updated', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { updatedAt: true,  }, 
      description: 'Date last updated', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedBy: {
      friendlyName: 'Last updated by', 
      description: 'The person who last updated the row.', 
      type: 'number', 
      model: 'user', 
      process: { updatedBy: true,  }, 
      database: { }, 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    table: {
      type: 'string', 
      database: { type: 'tinytext',  }, 
      friendlyName: 'Table', 
      process: { }, 
      description: 'Table', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mode: {
      type: 'string', 
      database: { type: 'tinytext',  length: 10,  }, 
      friendlyName: 'Mode', 
      process: { }, 
      description: 'Mode', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    row: {
      type: 'number', 
      friendlyName: 'Row', 
      database: { }, 
      process: { }, 
      description: 'Row', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    data: {
      type: 'string', 
      database: { type: 'longtext',  }, 
      friendlyName: 'Data', 
      process: { }, 
      description: 'Data', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    }, 
  groups: {
    other: {
      columns: [
        'id', 
        'createdAt', 
        'updatedAt', 
        'updatedBy', 
        'table', 
        'mode', 
        'row', 
        'data', 
        ], 
      }, 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:21:9 -> 0.067 seconds - level verbose  
{
table: 'audit', 
attributes: {
  id: {
    friendlyName: 'User No', 
    type: 'number', 
    autoincrement: true, 
    primaryKey: true, 
    database: { }, 
    process: { }, 
    description: 'User No', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  createdAt: {
    friendlyName: 'Date created', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { createdAt: true,  }, 
    description: 'Date created', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedAt: {
    friendlyName: 'Date last updated', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { updatedAt: true,  }, 
    description: 'Date last updated', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedBy: {
    friendlyName: 'Last updated by', 
    description: 'The person who last updated the row.', 
    type: 'number', 
    model: 'user', 
    process: { updatedBy: true,  }, 
    database: { }, 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  table: {
    type: 'string', 
    database: { type: 'tinytext',  }, 
    friendlyName: 'Table', 
    process: { }, 
    description: 'Table', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mode: {
    type: 'string', 
    database: { type: 'tinytext',  length: 10,  }, 
    friendlyName: 'Mode', 
    process: { }, 
    description: 'Mode', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  row: {
    type: 'number', 
    friendlyName: 'Row', 
    database: { }, 
    process: { }, 
    description: 'Row', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  data: {
    type: 'string', 
    database: { type: 'longtext',  }, 
    friendlyName: 'Data', 
    process: { }, 
    description: 'Data', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  }, 
}

------------------------------------------------------------
invert-groups.js:5:9 -> 0.068 seconds - level verbose  
{
inputs: {
  0: {
    description: 'This table is maintained by the system to record every action. The table can get very 
  large, so it can be automatically trimmed.  The trimming rules are set in the suds configuration file.', 
    attributes: {
      id: {
        friendlyName: 'User No', 
        type: 'number', 
        autoincrement: true, 
        primaryKey: true, 
        database: { }, 
        process: { }, 
        description: 'User No', 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      createdAt: {
        friendlyName: 'Date created', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        process: { createdAt: true,  }, 
        description: 'Date created', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      updatedAt: {
        friendlyName: 'Date last updated', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        process: { updatedAt: true,  }, 
        description: 'Date last updated', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      updatedBy: {
        friendlyName: 'Last updated by', 
        description: 'The person who last updated the row.', 
        type: 'number', 
        model: 'user', 
        process: { updatedBy: true,  }, 
        database: { }, 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      table: {
        type: 'string', 
        database: { type: 'tinytext',  }, 
        friendlyName: 'Table', 
        process: { }, 
        description: 'Table', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      mode: {
        type: 'string', 
        database: { type: 'tinytext',  length: 10,  }, 
        friendlyName: 'Mode', 
        process: { }, 
        description: 'Mode', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      row: {
        type: 'number', 
        friendlyName: 'Row', 
        database: { }, 
        process: { }, 
        description: 'Row', 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      data: {
        type: 'string', 
        database: { type: 'longtext',  }, 
        friendlyName: 'Data', 
        process: { }, 
        description: 'Data', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      }, 
    groups: {
      other: {
        columns: [
          'id', 
          'createdAt', 
          'updatedAt', 
          'updatedBy', 
          'table', 
          'mode', 
          'row', 
          'data', 
          ], 
        }, 
      }, 
    }, 
  1: {
    id: {
      friendlyName: 'User No', 
      type: 'number', 
      autoincrement: true, 
      primaryKey: true, 
      database: { }, 
      process: { }, 
      description: 'User No', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    createdAt: {
      friendlyName: 'Date created', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { createdAt: true,  }, 
      description: 'Date created', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedAt: {
      friendlyName: 'Date last updated', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { updatedAt: true,  }, 
      description: 'Date last updated', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedBy: {
      friendlyName: 'Last updated by', 
      description: 'The person who last updated the row.', 
      type: 'number', 
      model: 'user', 
      process: { updatedBy: true,  }, 
      database: { }, 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    table: {
      type: 'string', 
      database: { type: 'tinytext',  }, 
      friendlyName: 'Table', 
      process: { }, 
      description: 'Table', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mode: {
      type: 'string', 
      database: { type: 'tinytext',  length: 10,  }, 
      friendlyName: 'Mode', 
      process: { }, 
      description: 'Mode', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    row: {
      type: 'number', 
      friendlyName: 'Row', 
      database: { }, 
      process: { }, 
      description: 'Row', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    data: {
      type: 'string', 
      database: { type: 'longtext',  }, 
      friendlyName: 'Data', 
      process: { }, 
      description: 'Data', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    }, 
  }, 
}

------------------------------------------------------------
invert-groups.js:16:9 -> 0.068 seconds - level verbose  
{
other: {
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'table', 
    'mode', 
    'row', 
    'data', 
    ], 
  }, 
}

------------------------------------------------------------
invert-groups.js:18:11 -> 0.068 seconds - level verbose  
'other'

------------------------------------------------------------
invert-groups.js:31:9 -> 0.068 seconds - level verbose  
{
id: 'other', 
createdAt: 'other', 
updatedAt: 'other', 
updatedBy: 'other', 
table: 'other', 
mode: 'other', 
row: 'other', 
data: 'other', 
}

------------------------------------------------------------
merge-attributes.js:26:9 -> 0.068 seconds - level verbose  
{
id: 'other', 
createdAt: 'other', 
updatedAt: 'other', 
updatedBy: 'other', 
table: 'other', 
mode: 'other', 
row: 'other', 
data: 'other', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.068 seconds - level verbose  
{ key: 'id',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.068 seconds - level verbose  
{
key: 'id', 
type: {
  friendlyName: 'User No', 
  type: 'number', 
  autoincrement: true, 
  primaryKey: true, 
  database: { }, 
  process: { }, 
  description: 'User No', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.068 seconds - level verbose  
{ key: 'id',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.068 seconds - level verbose  
{
key: 'id', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.068 seconds - level verbose  
'audit'
'id'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.068 seconds - level verbose  
{
text: 'end loop', 
key: 'id', 
merged: {
  friendlyName: 'User No', 
  type: 'number', 
  autoincrement: true, 
  primaryKey: true, 
  database: { }, 
  process: { }, 
  description: 'User No', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.068 seconds - level verbose  
{ key: 'createdAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.068 seconds - level verbose  
{
key: 'createdAt', 
type: {
  friendlyName: 'Date created', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { createdAt: true,  }, 
  description: 'Date created', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.069 seconds - level verbose  
{ key: 'createdAt',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.069 seconds - level verbose  
{
key: 'createdAt', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.069 seconds - level verbose  
'audit'
'createdAt'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.069 seconds - level verbose  
{
text: 'end loop', 
key: 'createdAt', 
merged: {
  friendlyName: 'Date created', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { createdAt: true,  }, 
  description: 'Date created', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.069 seconds - level verbose  
{ key: 'updatedAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.069 seconds - level verbose  
{
key: 'updatedAt', 
type: {
  friendlyName: 'Date last updated', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { updatedAt: true,  }, 
  description: 'Date last updated', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.069 seconds - level verbose  
{ key: 'updatedAt',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.069 seconds - level verbose  
{
key: 'updatedAt', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.069 seconds - level verbose  
'audit'
'updatedAt'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.070 seconds - level verbose  
{
text: 'end loop', 
key: 'updatedAt', 
merged: {
  friendlyName: 'Date last updated', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { updatedAt: true,  }, 
  description: 'Date last updated', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.070 seconds - level verbose  
{ key: 'updatedBy',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.070 seconds - level verbose  
{
key: 'updatedBy', 
type: {
  friendlyName: 'Last updated by', 
  description: 'The person who last updated the row.', 
  type: 'number', 
  model: 'user', 
  process: { updatedBy: true,  }, 
  database: { }, 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.070 seconds - level verbose  
{ key: 'updatedBy',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.070 seconds - level verbose  
{
key: 'updatedBy', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.070 seconds - level verbose  
'audit'
'updatedBy'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.070 seconds - level verbose  
{
text: 'end loop', 
key: 'updatedBy', 
merged: {
  friendlyName: 'Last updated by', 
  description: 'The person who last updated the row.', 
  type: 'number', 
  model: 'user', 
  process: { updatedBy: true,  }, 
  database: { }, 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.070 seconds - level verbose  
{ key: 'table',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.070 seconds - level verbose  
{
key: 'table', 
type: {
  type: 'string', 
  database: { type: 'tinytext',  }, 
  friendlyName: 'Table', 
  process: { }, 
  description: 'Table', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.070 seconds - level verbose  
{ key: 'table',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.070 seconds - level verbose  
{
key: 'table', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.071 seconds - level verbose  
'audit'
'table'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.071 seconds - level verbose  
{
text: 'end loop', 
key: 'table', 
merged: {
  type: 'string', 
  database: { type: 'tinytext',  }, 
  friendlyName: 'Table', 
  process: { }, 
  description: 'Table', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.071 seconds - level verbose  
{ key: 'mode',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.071 seconds - level verbose  
{
key: 'mode', 
type: {
  type: 'string', 
  database: { type: 'tinytext',  length: 10,  }, 
  friendlyName: 'Mode', 
  process: { }, 
  description: 'Mode', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.071 seconds - level verbose  
{ key: 'mode',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.071 seconds - level verbose  
{
key: 'mode', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.071 seconds - level verbose  
'audit'
'mode'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.071 seconds - level verbose  
{
text: 'end loop', 
key: 'mode', 
merged: {
  type: 'string', 
  database: { type: 'tinytext',  length: 10,  }, 
  friendlyName: 'Mode', 
  process: { }, 
  description: 'Mode', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.071 seconds - level verbose  
{ key: 'row',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.071 seconds - level verbose  
{
key: 'row', 
type: {
  type: 'number', 
  friendlyName: 'Row', 
  database: { }, 
  process: { }, 
  description: 'Row', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.072 seconds - level verbose  
{ key: 'row',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.072 seconds - level verbose  
{
key: 'row', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.072 seconds - level verbose  
'audit'
'row'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.072 seconds - level verbose  
{
text: 'end loop', 
key: 'row', 
merged: {
  type: 'number', 
  friendlyName: 'Row', 
  database: { }, 
  process: { }, 
  description: 'Row', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.072 seconds - level verbose  
{ key: 'data',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.072 seconds - level verbose  
{
key: 'data', 
type: {
  type: 'string', 
  database: { type: 'longtext',  }, 
  friendlyName: 'Data', 
  process: { }, 
  description: 'Data', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.072 seconds - level verbose  
{ key: 'data',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.072 seconds - level verbose  
{
key: 'data', 
group: 'other', 
permission: undefined, 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.072 seconds - level verbose  
'audit'
'data'
undefined
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.072 seconds - level verbose  
{
text: 'end loop', 
key: 'data', 
merged: {
  type: 'string', 
  database: { type: 'longtext',  }, 
  friendlyName: 'Data', 
  process: { }, 
  description: 'Data', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:162:9 -> 0.072 seconds - level verbose  
{
merged: {
  id: {
    friendlyName: 'User No', 
    type: 'number', 
    autoincrement: true, 
    primaryKey: true, 
    database: { }, 
    process: { }, 
    description: 'User No', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  createdAt: {
    friendlyName: 'Date created', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { createdAt: true,  }, 
    description: 'Date created', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedAt: {
    friendlyName: 'Date last updated', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { updatedAt: true,  }, 
    description: 'Date last updated', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedBy: {
    friendlyName: 'Last updated by', 
    description: 'The person who last updated the row.', 
    type: 'number', 
    model: 'user', 
    process: { updatedBy: true,  }, 
    database: { }, 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  table: {
    type: 'string', 
    database: { type: 'tinytext',  }, 
    friendlyName: 'Table', 
    process: { }, 
    description: 'Table', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mode: {
    type: 'string', 
    database: { type: 'tinytext',  length: 10,  }, 
    friendlyName: 'Mode', 
    process: { }, 
    description: 'Mode', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  row: {
    type: 'number', 
    friendlyName: 'Row', 
    database: { }, 
    process: { }, 
    description: 'Row', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  data: {
    type: 'string', 
    database: { type: 'longtext',  }, 
    friendlyName: 'Data', 
    process: { }, 
    description: 'Data', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  }, 
}

------------------------------------------------------------
fix-record.js:31:11 -> 0.073 seconds - level norm  
'fixed:'
{
updatedBy: 35, 
table: 'user', 
mode: 'listrow', 
row: 35, 
data: '{"table":"user","mode":"listrow","id":"35"}', 
}

------------------------------------------------------------
create-row.js:18:10 -> 0.073 seconds - level norm  
'inserting:'
{
updatedBy: 35, 
table: 'user', 
mode: 'listrow', 
row: 35, 
data: '{"table":"user","mode":"listrow","id":"35"}', 
createdAt: 1629560599580, 
updatedAt: 1629560599580, 
}

------------------------------------------------------------
create-row.js:22:11 -> 0.073 seconds - level norm  
'audit'
{
updatedBy: 35, 
table: 'user', 
mode: 'listrow', 
row: 35, 
data: '{"table":"user","mode":"listrow","id":"35"}', 
createdAt: 1629560599580, 
updatedAt: 1629560599580, 
}

------------------------------------------------------------
create-row.js:24:11 -> 0.173 seconds - level norm  
[ 518,  ]

------------------------------------------------------------
create-row.js:28:13 -> 0.175 seconds - level norm  
[
{
  id: 518, 
  createdAt: 1629560599580, 
  updatedAt: 1629560599580, 
  updatedBy: 35, 
  table: 'user', 
  mode: 'listrow', 
  row: 35, 
  data: '{"table":"user","mode":"listrow","id":"35"}', 
  }, 
]

------------------------------------------------------------
create-row.js:39:10 -> 0.175 seconds - level norm  
518

------------------------------------------------------------
count-rows.js:24:11 -> 0.175 seconds - level norm  
{ input: { 0: 'audit',  },  }

------------------------------------------------------------
count-rows.js:46:11 -> 0.176 seconds - level norm  
513

------------------------------------------------------------
table-data.js:9:9 -> 0.176 seconds - level verbose  
{ inputs: { 0: 'user',  1: 'sales',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.176 seconds - level verbose  
'Users'

------------------------------------------------------------
table-data.js:26:13 -> 0.176 seconds - level verbose  
'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.'

------------------------------------------------------------
table-data.js:26:13 -> 0.176 seconds - level verbose  
{ all: [ 'sales',  'purchasing',  'admin',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.176 seconds - level verbose  
'Add a new user'

------------------------------------------------------------
table-data.js:26:13 -> 0.176 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:26:13 -> 0.176 seconds - level verbose  
{
columns: [
  'id', 
  'fullName', 
  'emailAddress', 
  'userType', 
  'organisation', 
  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.176 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.176 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.176 seconds - level verbose  
'User'

------------------------------------------------------------
table-data.js:100:9 -> 0.176 seconds - level verbose  
{
canedit: true, 
permission: 'sales', 
mergedpermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: true, 
  canEdit: true, 
  canDelete: true, 
  }, 
}

------------------------------------------------------------
list-row.js:47:9 -> 0.176 seconds - level min  
############################################################
{
inputs: {
  0: 'sales', 
  1: 'user', 
  2: 35, 
  3: '', 
  4: '', 
  }, 
}

------------------------------------------------------------
table-data.js:9:9 -> 0.177 seconds - level verbose  
{ inputs: { 0: 'user',  1: 'sales',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.177 seconds - level verbose  
'Users'

------------------------------------------------------------
table-data.js:26:13 -> 0.177 seconds - level verbose  
'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.'

------------------------------------------------------------
table-data.js:26:13 -> 0.177 seconds - level verbose  
{ all: [ 'sales',  'purchasing',  'admin',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.177 seconds - level verbose  
'Add a new user'

------------------------------------------------------------
table-data.js:26:13 -> 0.177 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:26:13 -> 0.177 seconds - level verbose  
{
columns: [
  'id', 
  'fullName', 
  'emailAddress', 
  'userType', 
  'organisation', 
  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.177 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.177 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.177 seconds - level verbose  
'User'

------------------------------------------------------------
table-data.js:100:9 -> 0.177 seconds - level verbose  
{
canedit: true, 
permission: 'sales', 
mergedpermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: true, 
  canEdit: true, 
  canDelete: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:9:10 -> 0.177 seconds - level norm  
{ inputs: { 0: 'user',  1: 'sales',  },  }

------------------------------------------------------------
merge-attributes.js:13:10 -> 0.178 seconds - level verbose  
{
tableData: {
  friendlyName: 'Users', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: {
    columns: [
      'id', 
      'fullName', 
      'emailAddress', 
      'userType', 
      'organisation', 
      ], 
    }, 
  groups: {
    basics: {
      static: true, 
      open: 'none', 
      columns: [
        'fullName', 
        'emailAddress', 
        'userType', 
        'isOrg', 
        ], 
      }, 
    profile: {
      friendlyName: 'profile', 
      open: 'none', 
      columns: [ 'organisation',  'business',  'notes',  ], 
      }, 
    location: {
      friendlyName: 'How to contact', 
      open: 'none', 
      columns: [
        'streetAddress', 
        'zip', 
        'country', 
        'region', 
        'mainPhone', 
        'mobilePhone', 
        ], 
      }, 
    contacts: {
      friendlyName: 'Contacts', 
      open: 'contacts', 
      columns: [
        'people', 
        'contacts', 
        'lastContact', 
        'nextAction', 
        'nextActionDate', 
        ], 
      }, 
    sales: {
      friendlyName: 'Sales', 
      open: 'salesorders', 
      columns: [ 'salesorders',  'lastSale',  ], 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      friendlyName: 'Products supplied', 
      open: 'products', 
      columns: [ 'products',  'purchaseorders',  ], 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    website: {
      friendlyName: 'Website', 
      open: 'website', 
      columns: [ 'webpages',  ], 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    other: {
      friendlyName: 'Other', 
      columns: [
        'id', 
        'createdAt', 
        'updatedAt', 
        'updatedBy', 
        'password', 
        'salt', 
        'forgottenPasswordToken', 
        'forgottenPasswordExpire', 
        'isSuperAdmin', 
        'lastSeenAt', 
        'permission', 
        ], 
      }, 
    }, 
  attributes: {
    id: {
      friendlyName: 'User No', 
      type: 'number', 
      primaryKey: true, 
      autoincrement: true, 
      database: { }, 
      process: { }, 
      description: 'User No', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    createdAt: {
      friendlyName: 'Date created', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { createdAt: true,  }, 
      description: 'Date created', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedAt: {
      friendlyName: 'Date last updated', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { updatedAt: true,  }, 
      description: 'Date last updated', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedBy: {
      friendlyName: 'Last updated by', 
      description: 'The person who last updated the row.', 
      type: 'number', 
      model: 'user', 
      process: { updatedBy: true,  }, 
      database: { }, 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    fullName: {
      type: 'string', 
      description: 'Full representation of the user's name.', 
      example: 'Mary Sue van der McHenst', 
      input: {
        required: true, 
        placeholder: 'Please enter the persons full name', 
        class: 'form-control', 
        type: 'text', 
        }, 
      friendlyName: 'Full name', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    emailAddress: {
      type: 'string', 
      friendlyName: 'Email address', 
      database: { }, 
      process: { }, 
      description: 'Email address', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    password: {
      type: 'string', 
      description: 'Securely hashed representation of the user's login password.', 
      permission: '#superuser#', 
      example: '2$28a8eabna301089103-13948134nad', 
      friendlyName: 'Password', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      }, 
    salt: {
      type: 'string', 
      permission: '#superuser#', 
      friendlyName: 'Salt', 
      database: { }, 
      process: { }, 
      description: 'Salt', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      }, 
    forgottenPasswordToken: {
      permission: '#superuser#', 
      type: 'string', 
      friendlyName: 'Forgotten password token', 
      database: { }, 
      process: { }, 
      description: 'Forgotten password token', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      }, 
    forgottenPasswordExpire: {
      permission: '#superuser#', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Forgotten password expire', 
      process: { }, 
      description: 'Forgotten password expire', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: false, 
      canView: false, 
      }, 
    isSuperAdmin: {
      type: 'boolean', 
      description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
      friendlyName: 'Is super admin', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'checkbox',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSeenAt: {
      type: 'number', 
      description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
      example: 1502844074211, 
      input: { type: 'date',  class: 'form-control',  }, 
      display: { type: 'date',  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Last seen at', 
      process: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    streetAddress: {
      type: 'string', 
      input: {
        type: 'textarea', 
        rows: 5, 
        cols: 60, 
        placeholder: 'Please enter the street address of the user', 
        class: 'form-control', 
        }, 
      friendlyName: 'Street address', 
      database: { }, 
      process: { }, 
      description: 'Street address', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    zip: {
      type: 'string', 
      friendlyName: 'Zip', 
      database: { }, 
      process: { }, 
      description: 'Zip', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    country: {
      type: 'string', 
      friendlyName: 'Country', 
      database: { }, 
      process: { }, 
      description: 'Country', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    region: {
      description: 'This is an example of a select using the data in the isIn attribute.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: [
          'Europe', 
          'Middle East', 
          'Africa', 
          'South Asia', 
          'East', 
          'N America', 
          'S America', 
          ], 
        class: 'form-control', 
        }, 
      friendlyName: 'Region', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    permission: {
      friendlyName: 'Permission set', 
      type: 'string', 
      description: 'Permission set.', 
      extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
      allowNull: true, 
      input: {
        type: 'select', 
        values: Function, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    isOrg: {
      friendlyName: 'Person or Business?', 
      type: 'string', 
      description: 'This record describes a business rather than a person', 
      input: {
        type: 'radio', 
        values: { P: 'Person',  B: 'Business/Organisation',  }, 
        required: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    business: {
      type: 'string', 
      description: 'Description of the customer's business', 
      friendlyName: 'The type of business.', 
      input: {
        type: 'textarea', 
        rows: 3, 
        cols: 60, 
        placeholder: 'Please enter a description of the user's business and place in the organisation', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    organisation: {
      friendlyName: 'Organisation', 
      model: 'user', 
      description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
      input: {
        type: 'select', 
        search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    userType: {
      description: 'The type of user.  Customer/Supplier or in-house.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: {
          L: 'Sales lead', 
          P: 'Prospect', 
          C: 'Customer', 
          S: 'Supplier', 
          I: 'In-house staff', 
          N: 'No longer considered a prospect', 
          O: 'Other', 
          }, 
        required: true, 
        class: 'form-control', 
        }, 
      friendlyName: 'User type', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastContact: {
      model: 'contacts', 
      child: false, 
      friendlyName: 'Last contact', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Last contact', 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextActionDate: {
      friendlyName: 'Next action date', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
      input: {
        type: 'date', 
        hidden: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextAction: {
      friendlyName: 'Next action', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'text', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mobilePhone: {
      type: 'string', 
      friendlyName: 'Mobile phone', 
      database: { }, 
      process: { }, 
      description: 'Mobile phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mainPhone: {
      type: 'string', 
      friendlyName: 'Main phone', 
      database: { }, 
      process: { }, 
      description: 'Main phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSale: {
      type: 'number', 
      model: 'salesorders', 
      friendlyName: 'Last sale', 
      description: 'Created automatically. This is a link to the last sales order.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    notes: {
      type: 'string', 
      friendlyName: 'Notes', 
      input: {
        type: 'textarea', 
        rows: 6, 
        cols: 60, 
        placeholder: 'Please enter any notes about this user.', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Notes', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    webpages: {
      collection: 'webpages', 
      via: 'author', 
      friendlyName: 'Webpages', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'webpages' via column 'author'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    contacts: {
      collection: 'contacts', 
      via: 'user', 
      collectionList: {
        limit: 5, 
        order: 'date', 
        direction: 'DESC', 
        heading: 'Recent contacts', 
        columns: [ 'id',  'date',  'notes',  'closed',  ], 
        addChildTip: 'Add a new contact for this user.', 
        }, 
      friendlyName: 'Contacts', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'contacts' via column 'user'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salesorders: {
      collection: 'salesorders', 
      via: 'customer', 
      collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
      friendlyName: 'Salesorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'salesorders' via column 'customer'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      collection: 'products', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'price',  'class',  'description',  ], 
        }, 
      friendlyName: 'Products', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'products' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    purchaseorders: {
      collection: 'purchaseorders', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'date',  'status',  'notes',  ], 
        }, 
      friendlyName: 'Purchaseorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    people: {
      friendlyName: 'Associated people', 
      collection: 'user', 
      via: 'organisation', 
      collectionList: {
        columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
        }, 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'user' via column 'organisation'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:21:9 -> 0.179 seconds - level verbose  
{
table: 'user', 
attributes: {
  id: {
    friendlyName: 'User No', 
    type: 'number', 
    primaryKey: true, 
    autoincrement: true, 
    database: { }, 
    process: { }, 
    description: 'User No', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  createdAt: {
    friendlyName: 'Date created', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { createdAt: true,  }, 
    description: 'Date created', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedAt: {
    friendlyName: 'Date last updated', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { updatedAt: true,  }, 
    description: 'Date last updated', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedBy: {
    friendlyName: 'Last updated by', 
    description: 'The person who last updated the row.', 
    type: 'number', 
    model: 'user', 
    process: { updatedBy: true,  }, 
    database: { }, 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  fullName: {
    type: 'string', 
    description: 'Full representation of the user's name.', 
    example: 'Mary Sue van der McHenst', 
    input: {
      required: true, 
      placeholder: 'Please enter the persons full name', 
      class: 'form-control', 
      type: 'text', 
      }, 
    friendlyName: 'Full name', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  emailAddress: {
    type: 'string', 
    friendlyName: 'Email address', 
    database: { }, 
    process: { }, 
    description: 'Email address', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  password: {
    type: 'string', 
    description: 'Securely hashed representation of the user's login password.', 
    permission: '#superuser#', 
    example: '2$28a8eabna301089103-13948134nad', 
    friendlyName: 'Password', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    }, 
  salt: {
    type: 'string', 
    permission: '#superuser#', 
    friendlyName: 'Salt', 
    database: { }, 
    process: { }, 
    description: 'Salt', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    }, 
  forgottenPasswordToken: {
    permission: '#superuser#', 
    type: 'string', 
    friendlyName: 'Forgotten password token', 
    database: { }, 
    process: { }, 
    description: 'Forgotten password token', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    }, 
  forgottenPasswordExpire: {
    permission: '#superuser#', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Forgotten password expire', 
    process: { }, 
    description: 'Forgotten password expire', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: false, 
    canView: false, 
    }, 
  isSuperAdmin: {
    type: 'boolean', 
    description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
    friendlyName: 'Is super admin', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'checkbox',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSeenAt: {
    type: 'number', 
    description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
    example: 1502844074211, 
    input: { type: 'date',  class: 'form-control',  }, 
    display: { type: 'date',  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Last seen at', 
    process: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  streetAddress: {
    type: 'string', 
    input: {
      type: 'textarea', 
      rows: 5, 
      cols: 60, 
      placeholder: 'Please enter the street address of the user', 
      class: 'form-control', 
      }, 
    friendlyName: 'Street address', 
    database: { }, 
    process: { }, 
    description: 'Street address', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  zip: {
    type: 'string', 
    friendlyName: 'Zip', 
    database: { }, 
    process: { }, 
    description: 'Zip', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  country: {
    type: 'string', 
    friendlyName: 'Country', 
    database: { }, 
    process: { }, 
    description: 'Country', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  region: {
    description: 'This is an example of a select using the data in the isIn attribute.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: [
        'Europe', 
        'Middle East', 
        'Africa', 
        'South Asia', 
        'East', 
        'N America', 
        'S America', 
        ], 
      class: 'form-control', 
      }, 
    friendlyName: 'Region', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  permission: {
    friendlyName: 'Permission set', 
    type: 'string', 
    description: 'Permission set.', 
    extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
    allowNull: true, 
    input: {
      type: 'select', 
      values: Function, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  isOrg: {
    friendlyName: 'Person or Business?', 
    type: 'string', 
    description: 'This record describes a business rather than a person', 
    input: {
      type: 'radio', 
      values: { P: 'Person',  B: 'Business/Organisation',  }, 
      required: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  business: {
    type: 'string', 
    description: 'Description of the customer's business', 
    friendlyName: 'The type of business.', 
    input: {
      type: 'textarea', 
      rows: 3, 
      cols: 60, 
      placeholder: 'Please enter a description of the user's business and place in the organisation', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  organisation: {
    friendlyName: 'Organisation', 
    model: 'user', 
    description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
    input: {
      type: 'select', 
      search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  userType: {
    description: 'The type of user.  Customer/Supplier or in-house.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: {
        L: 'Sales lead', 
        P: 'Prospect', 
        C: 'Customer', 
        S: 'Supplier', 
        I: 'In-house staff', 
        N: 'No longer considered a prospect', 
        O: 'Other', 
        }, 
      required: true, 
      class: 'form-control', 
      }, 
    friendlyName: 'User type', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastContact: {
    model: 'contacts', 
    child: false, 
    friendlyName: 'Last contact', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Last contact', 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextActionDate: {
    friendlyName: 'Next action date', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
    input: {
      type: 'date', 
      hidden: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextAction: {
    friendlyName: 'Next action', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'text', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mobilePhone: {
    type: 'string', 
    friendlyName: 'Mobile phone', 
    database: { }, 
    process: { }, 
    description: 'Mobile phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mainPhone: {
    type: 'string', 
    friendlyName: 'Main phone', 
    database: { }, 
    process: { }, 
    description: 'Main phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSale: {
    type: 'number', 
    model: 'salesorders', 
    friendlyName: 'Last sale', 
    description: 'Created automatically. This is a link to the last sales order.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  notes: {
    type: 'string', 
    friendlyName: 'Notes', 
    input: {
      type: 'textarea', 
      rows: 6, 
      cols: 60, 
      placeholder: 'Please enter any notes about this user.', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Notes', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  webpages: {
    collection: 'webpages', 
    via: 'author', 
    friendlyName: 'Webpages', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'webpages' via column 'author'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    permission: { all: [ 'admin',  'web',  ],  }, 
    }, 
  contacts: {
    collection: 'contacts', 
    via: 'user', 
    collectionList: {
      limit: 5, 
      order: 'date', 
      direction: 'DESC', 
      heading: 'Recent contacts', 
      columns: [ 'id',  'date',  'notes',  'closed',  ], 
      addChildTip: 'Add a new contact for this user.', 
      }, 
    friendlyName: 'Contacts', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'contacts' via column 'user'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salesorders: {
    collection: 'salesorders', 
    via: 'customer', 
    collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
    friendlyName: 'Salesorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'salesorders' via column 'customer'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  products: {
    collection: 'products', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'price',  'class',  'description',  ], 
      }, 
    friendlyName: 'Products', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'products' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  purchaseorders: {
    collection: 'purchaseorders', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'date',  'status',  'notes',  ], 
      }, 
    friendlyName: 'Purchaseorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  people: {
    friendlyName: 'Associated people', 
    collection: 'user', 
    via: 'organisation', 
    collectionList: {
      columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
      }, 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'user' via column 'organisation'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  }, 
}

------------------------------------------------------------
invert-groups.js:5:9 -> 0.181 seconds - level verbose  
{
inputs: {
  0: {
    friendlyName: 'Users', 
    description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
    permission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
    addRow: 'Add a new user', 
    rowTitle: Function, 
    list: {
      columns: [
        'id', 
        'fullName', 
        'emailAddress', 
        'userType', 
        'organisation', 
        ], 
      }, 
    groups: {
      basics: {
        static: true, 
        open: 'none', 
        columns: [
          'fullName', 
          'emailAddress', 
          'userType', 
          'isOrg', 
          ], 
        }, 
      profile: {
        friendlyName: 'profile', 
        open: 'none', 
        columns: [ 'organisation',  'business',  'notes',  ], 
        }, 
      location: {
        friendlyName: 'How to contact', 
        open: 'none', 
        columns: [
          'streetAddress', 
          'zip', 
          'country', 
          'region', 
          'mainPhone', 
          'mobilePhone', 
          ], 
        }, 
      contacts: {
        friendlyName: 'Contacts', 
        open: 'contacts', 
        columns: [
          'people', 
          'contacts', 
          'lastContact', 
          'nextAction', 
          'nextActionDate', 
          ], 
        }, 
      sales: {
        friendlyName: 'Sales', 
        open: 'salesorders', 
        columns: [ 'salesorders',  'lastSale',  ], 
        permission: { all: [ 'admin',  'sales',  ],  }, 
        }, 
      products: {
        friendlyName: 'Products supplied', 
        open: 'products', 
        columns: [ 'products',  'purchaseorders',  ], 
        permission: {
          all: [ 'admin',  'purchasing',  ], 
          view: [ 'sales',  ], 
          }, 
        }, 
      website: {
        friendlyName: 'Website', 
        open: 'website', 
        columns: [ 'webpages',  ], 
        permission: { all: [ 'admin',  'web',  ],  }, 
        }, 
      other: {
        friendlyName: 'Other', 
        columns: [
          'id', 
          'createdAt', 
          'updatedAt', 
          'updatedBy', 
          'password', 
          'salt', 
          'forgottenPasswordToken', 
          'forgottenPasswordExpire', 
          'isSuperAdmin', 
          'lastSeenAt', 
          'permission', 
          ], 
        }, 
      }, 
    attributes: {
      id: {
        friendlyName: 'User No', 
        type: 'number', 
        primaryKey: true, 
        autoincrement: true, 
        database: { }, 
        process: { }, 
        description: 'User No', 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      createdAt: {
        friendlyName: 'Date created', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        process: { createdAt: true,  }, 
        description: 'Date created', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      updatedAt: {
        friendlyName: 'Date last updated', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        process: { updatedAt: true,  }, 
        description: 'Date last updated', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      updatedBy: {
        friendlyName: 'Last updated by', 
        description: 'The person who last updated the row.', 
        type: 'number', 
        model: 'user', 
        process: { updatedBy: true,  }, 
        database: { }, 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      fullName: {
        type: 'string', 
        description: 'Full representation of the user's name.', 
        example: 'Mary Sue van der McHenst', 
        input: {
          required: true, 
          placeholder: 'Please enter the persons full name', 
          class: 'form-control', 
          type: 'text', 
          }, 
        friendlyName: 'Full name', 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      emailAddress: {
        type: 'string', 
        friendlyName: 'Email address', 
        database: { }, 
        process: { }, 
        description: 'Email address', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      password: {
        type: 'string', 
        description: 'Securely hashed representation of the user's login password.', 
        permission: '#superuser#', 
        example: '2$28a8eabna301089103-13948134nad', 
        friendlyName: 'Password', 
        database: { }, 
        process: { }, 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: false, 
        canView: false, 
        }, 
      salt: {
        type: 'string', 
        permission: '#superuser#', 
        friendlyName: 'Salt', 
        database: { }, 
        process: { }, 
        description: 'Salt', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: false, 
        canView: false, 
        }, 
      forgottenPasswordToken: {
        permission: '#superuser#', 
        type: 'string', 
        friendlyName: 'Forgotten password token', 
        database: { }, 
        process: { }, 
        description: 'Forgotten password token', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: false, 
        canView: false, 
        }, 
      forgottenPasswordExpire: {
        permission: '#superuser#', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        friendlyName: 'Forgotten password expire', 
        process: { }, 
        description: 'Forgotten password expire', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: false, 
        canView: false, 
        }, 
      isSuperAdmin: {
        type: 'boolean', 
        description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
        friendlyName: 'Is super admin', 
        database: { }, 
        process: { }, 
        input: { class: 'form-control',  type: 'checkbox',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      lastSeenAt: {
        type: 'number', 
        description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
        example: 1502844074211, 
        input: { type: 'date',  class: 'form-control',  }, 
        display: { type: 'date',  }, 
        database: { type: 'biginteger',  }, 
        friendlyName: 'Last seen at', 
        process: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      streetAddress: {
        type: 'string', 
        input: {
          type: 'textarea', 
          rows: 5, 
          cols: 60, 
          placeholder: 'Please enter the street address of the user', 
          class: 'form-control', 
          }, 
        friendlyName: 'Street address', 
        database: { }, 
        process: { }, 
        description: 'Street address', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      zip: {
        type: 'string', 
        friendlyName: 'Zip', 
        database: { }, 
        process: { }, 
        description: 'Zip', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      country: {
        type: 'string', 
        friendlyName: 'Country', 
        database: { }, 
        process: { }, 
        description: 'Country', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      region: {
        description: 'This is an example of a select using the data in the isIn attribute.', 
        type: 'string', 
        input: {
          type: 'select', 
          values: [
            'Europe', 
            'Middle East', 
            'Africa', 
            'South Asia', 
            'East', 
            'N America', 
            'S America', 
            ], 
          class: 'form-control', 
          }, 
        friendlyName: 'Region', 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      permission: {
        friendlyName: 'Permission set', 
        type: 'string', 
        description: 'Permission set.', 
        extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
        allowNull: true, 
        input: {
          type: 'select', 
          values: Function, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      isOrg: {
        friendlyName: 'Person or Business?', 
        type: 'string', 
        description: 'This record describes a business rather than a person', 
        input: {
          type: 'radio', 
          values: { P: 'Person',  B: 'Business/Organisation',  }, 
          required: true, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      business: {
        type: 'string', 
        description: 'Description of the customer's business', 
        friendlyName: 'The type of business.', 
        input: {
          type: 'textarea', 
          rows: 3, 
          cols: 60, 
          placeholder: 'Please enter a description of the user's business and place in the organisation', 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      organisation: {
        friendlyName: 'Organisation', 
        model: 'user', 
        description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
        input: {
          type: 'select', 
          search: { searches: [ [Deeper Object below level 8],  ],  }, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        type: 'number', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      userType: {
        description: 'The type of user.  Customer/Supplier or in-house.', 
        type: 'string', 
        input: {
          type: 'select', 
          values: {
            L: 'Sales lead', 
            P: 'Prospect', 
            C: 'Customer', 
            S: 'Supplier', 
            I: 'In-house staff', 
            N: 'No longer considered a prospect', 
            O: 'Other', 
            }, 
          required: true, 
          class: 'form-control', 
          }, 
        friendlyName: 'User type', 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      lastContact: {
        model: 'contacts', 
        child: false, 
        friendlyName: 'Last contact', 
        input: {
          hidden: true, 
          class: 'form-control', 
          type: 'number', 
          }, 
        database: { }, 
        process: { }, 
        description: 'Last contact', 
        type: 'number', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      nextActionDate: {
        friendlyName: 'Next action date', 
        type: 'string', 
        description: 'When a contact is entered, this is updated.', 
        extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
        input: {
          type: 'date', 
          hidden: true, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      nextAction: {
        friendlyName: 'Next action', 
        type: 'string', 
        description: 'When a contact is entered, this is updated.', 
        extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
        input: {
          hidden: true, 
          class: 'form-control', 
          type: 'text', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      mobilePhone: {
        type: 'string', 
        friendlyName: 'Mobile phone', 
        database: { }, 
        process: { }, 
        description: 'Mobile phone', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      mainPhone: {
        type: 'string', 
        friendlyName: 'Main phone', 
        database: { }, 
        process: { }, 
        description: 'Main phone', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      lastSale: {
        type: 'number', 
        model: 'salesorders', 
        friendlyName: 'Last sale', 
        description: 'Created automatically. This is a link to the last sales order.', 
        input: {
          hidden: true, 
          class: 'form-control', 
          type: 'number', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: { all: [ 'admin',  'sales',  ],  }, 
        }, 
      notes: {
        type: 'string', 
        friendlyName: 'Notes', 
        input: {
          type: 'textarea', 
          rows: 6, 
          cols: 60, 
          placeholder: 'Please enter any notes about this user.', 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        description: 'Notes', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      webpages: {
        collection: 'webpages', 
        via: 'author', 
        friendlyName: 'Webpages', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'webpages' via column 'author'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: false, 
        canView: false, 
        permission: { all: [ 'admin',  'web',  ],  }, 
        }, 
      contacts: {
        collection: 'contacts', 
        via: 'user', 
        collectionList: {
          limit: 5, 
          order: 'date', 
          direction: 'DESC', 
          heading: 'Recent contacts', 
          columns: [ 'id',  'date',  'notes',  'closed',  ], 
          addChildTip: 'Add a new contact for this user.', 
          }, 
        friendlyName: 'Contacts', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'contacts' via column 'user'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      salesorders: {
        collection: 'salesorders', 
        via: 'customer', 
        collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
        friendlyName: 'Salesorders', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'salesorders' via column 'customer'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: { all: [ 'admin',  'sales',  ],  }, 
        }, 
      products: {
        collection: 'products', 
        via: 'supplier', 
        collectionList: {
          columns: [ 'name',  'price',  'class',  'description',  ], 
          }, 
        friendlyName: 'Products', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'products' via column 'supplier'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: false, 
        canView: true, 
        permission: {
          all: [ 'admin',  'purchasing',  ], 
          view: [ 'sales',  ], 
          }, 
        }, 
      purchaseorders: {
        collection: 'purchaseorders', 
        via: 'supplier', 
        collectionList: {
          columns: [ 'name',  'date',  'status',  'notes',  ], 
          }, 
        friendlyName: 'Purchaseorders', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: false, 
        canView: true, 
        permission: {
          all: [ 'admin',  'purchasing',  ], 
          view: [ 'sales',  ], 
          }, 
        }, 
      people: {
        friendlyName: 'Associated people', 
        collection: 'user', 
        via: 'organisation', 
        collectionList: {
          columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
          }, 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'user' via column 'organisation'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      }, 
    }, 
  1: {
    id: {
      friendlyName: 'User No', 
      type: 'number', 
      primaryKey: true, 
      autoincrement: true, 
      database: { }, 
      process: { }, 
      description: 'User No', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    createdAt: {
      friendlyName: 'Date created', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { createdAt: true,  }, 
      description: 'Date created', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedAt: {
      friendlyName: 'Date last updated', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { updatedAt: true,  }, 
      description: 'Date last updated', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedBy: {
      friendlyName: 'Last updated by', 
      description: 'The person who last updated the row.', 
      type: 'number', 
      model: 'user', 
      process: { updatedBy: true,  }, 
      database: { }, 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    fullName: {
      type: 'string', 
      description: 'Full representation of the user's name.', 
      example: 'Mary Sue van der McHenst', 
      input: {
        required: true, 
        placeholder: 'Please enter the persons full name', 
        class: 'form-control', 
        type: 'text', 
        }, 
      friendlyName: 'Full name', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    emailAddress: {
      type: 'string', 
      friendlyName: 'Email address', 
      database: { }, 
      process: { }, 
      description: 'Email address', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    password: {
      type: 'string', 
      description: 'Securely hashed representation of the user's login password.', 
      permission: '#superuser#', 
      example: '2$28a8eabna301089103-13948134nad', 
      friendlyName: 'Password', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      }, 
    salt: {
      type: 'string', 
      permission: '#superuser#', 
      friendlyName: 'Salt', 
      database: { }, 
      process: { }, 
      description: 'Salt', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      }, 
    forgottenPasswordToken: {
      permission: '#superuser#', 
      type: 'string', 
      friendlyName: 'Forgotten password token', 
      database: { }, 
      process: { }, 
      description: 'Forgotten password token', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      }, 
    forgottenPasswordExpire: {
      permission: '#superuser#', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Forgotten password expire', 
      process: { }, 
      description: 'Forgotten password expire', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: false, 
      canView: false, 
      }, 
    isSuperAdmin: {
      type: 'boolean', 
      description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
      friendlyName: 'Is super admin', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'checkbox',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSeenAt: {
      type: 'number', 
      description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
      example: 1502844074211, 
      input: { type: 'date',  class: 'form-control',  }, 
      display: { type: 'date',  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Last seen at', 
      process: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    streetAddress: {
      type: 'string', 
      input: {
        type: 'textarea', 
        rows: 5, 
        cols: 60, 
        placeholder: 'Please enter the street address of the user', 
        class: 'form-control', 
        }, 
      friendlyName: 'Street address', 
      database: { }, 
      process: { }, 
      description: 'Street address', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    zip: {
      type: 'string', 
      friendlyName: 'Zip', 
      database: { }, 
      process: { }, 
      description: 'Zip', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    country: {
      type: 'string', 
      friendlyName: 'Country', 
      database: { }, 
      process: { }, 
      description: 'Country', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    region: {
      description: 'This is an example of a select using the data in the isIn attribute.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: [
          'Europe', 
          'Middle East', 
          'Africa', 
          'South Asia', 
          'East', 
          'N America', 
          'S America', 
          ], 
        class: 'form-control', 
        }, 
      friendlyName: 'Region', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    permission: {
      friendlyName: 'Permission set', 
      type: 'string', 
      description: 'Permission set.', 
      extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
      allowNull: true, 
      input: {
        type: 'select', 
        values: Function, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    isOrg: {
      friendlyName: 'Person or Business?', 
      type: 'string', 
      description: 'This record describes a business rather than a person', 
      input: {
        type: 'radio', 
        values: { P: 'Person',  B: 'Business/Organisation',  }, 
        required: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    business: {
      type: 'string', 
      description: 'Description of the customer's business', 
      friendlyName: 'The type of business.', 
      input: {
        type: 'textarea', 
        rows: 3, 
        cols: 60, 
        placeholder: 'Please enter a description of the user's business and place in the organisation', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    organisation: {
      friendlyName: 'Organisation', 
      model: 'user', 
      description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
      input: {
        type: 'select', 
        search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    userType: {
      description: 'The type of user.  Customer/Supplier or in-house.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: {
          L: 'Sales lead', 
          P: 'Prospect', 
          C: 'Customer', 
          S: 'Supplier', 
          I: 'In-house staff', 
          N: 'No longer considered a prospect', 
          O: 'Other', 
          }, 
        required: true, 
        class: 'form-control', 
        }, 
      friendlyName: 'User type', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastContact: {
      model: 'contacts', 
      child: false, 
      friendlyName: 'Last contact', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Last contact', 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextActionDate: {
      friendlyName: 'Next action date', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
      input: {
        type: 'date', 
        hidden: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextAction: {
      friendlyName: 'Next action', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'text', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mobilePhone: {
      type: 'string', 
      friendlyName: 'Mobile phone', 
      database: { }, 
      process: { }, 
      description: 'Mobile phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mainPhone: {
      type: 'string', 
      friendlyName: 'Main phone', 
      database: { }, 
      process: { }, 
      description: 'Main phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSale: {
      type: 'number', 
      model: 'salesorders', 
      friendlyName: 'Last sale', 
      description: 'Created automatically. This is a link to the last sales order.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    notes: {
      type: 'string', 
      friendlyName: 'Notes', 
      input: {
        type: 'textarea', 
        rows: 6, 
        cols: 60, 
        placeholder: 'Please enter any notes about this user.', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Notes', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    webpages: {
      collection: 'webpages', 
      via: 'author', 
      friendlyName: 'Webpages', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'webpages' via column 'author'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    contacts: {
      collection: 'contacts', 
      via: 'user', 
      collectionList: {
        limit: 5, 
        order: 'date', 
        direction: 'DESC', 
        heading: 'Recent contacts', 
        columns: [ 'id',  'date',  'notes',  'closed',  ], 
        addChildTip: 'Add a new contact for this user.', 
        }, 
      friendlyName: 'Contacts', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'contacts' via column 'user'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salesorders: {
      collection: 'salesorders', 
      via: 'customer', 
      collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
      friendlyName: 'Salesorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'salesorders' via column 'customer'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      collection: 'products', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'price',  'class',  'description',  ], 
        }, 
      friendlyName: 'Products', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'products' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    purchaseorders: {
      collection: 'purchaseorders', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'date',  'status',  'notes',  ], 
        }, 
      friendlyName: 'Purchaseorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    people: {
      friendlyName: 'Associated people', 
      collection: 'user', 
      via: 'organisation', 
      collectionList: {
        columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
        }, 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'user' via column 'organisation'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    }, 
  }, 
}

------------------------------------------------------------
invert-groups.js:16:9 -> 0.182 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
invert-groups.js:18:11 -> 0.182 seconds - level verbose  
'basics'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.182 seconds - level verbose  
'profile'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.182 seconds - level verbose  
'location'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.182 seconds - level verbose  
'contacts'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.182 seconds - level verbose  
'sales'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.182 seconds - level verbose  
'products'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.182 seconds - level verbose  
'website'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.182 seconds - level verbose  
'other'

------------------------------------------------------------
invert-groups.js:31:9 -> 0.182 seconds - level verbose  
{
fullName: 'basics', 
emailAddress: 'basics', 
userType: 'basics', 
isOrg: 'basics', 
organisation: 'profile', 
business: 'profile', 
notes: 'profile', 
streetAddress: 'location', 
zip: 'location', 
country: 'location', 
region: 'location', 
mainPhone: 'location', 
mobilePhone: 'location', 
people: 'contacts', 
contacts: 'contacts', 
lastContact: 'contacts', 
nextAction: 'contacts', 
nextActionDate: 'contacts', 
salesorders: 'sales', 
lastSale: 'sales', 
products: 'products', 
purchaseorders: 'products', 
webpages: 'website', 
id: 'other', 
createdAt: 'other', 
updatedAt: 'other', 
updatedBy: 'other', 
password: 'other', 
salt: 'other', 
forgottenPasswordToken: 'other', 
forgottenPasswordExpire: 'other', 
isSuperAdmin: 'other', 
lastSeenAt: 'other', 
permission: 'other', 
}

------------------------------------------------------------
merge-attributes.js:26:9 -> 0.183 seconds - level verbose  
{
fullName: 'basics', 
emailAddress: 'basics', 
userType: 'basics', 
isOrg: 'basics', 
organisation: 'profile', 
business: 'profile', 
notes: 'profile', 
streetAddress: 'location', 
zip: 'location', 
country: 'location', 
region: 'location', 
mainPhone: 'location', 
mobilePhone: 'location', 
people: 'contacts', 
contacts: 'contacts', 
lastContact: 'contacts', 
nextAction: 'contacts', 
nextActionDate: 'contacts', 
salesorders: 'sales', 
lastSale: 'sales', 
products: 'products', 
purchaseorders: 'products', 
webpages: 'website', 
id: 'other', 
createdAt: 'other', 
updatedAt: 'other', 
updatedBy: 'other', 
password: 'other', 
salt: 'other', 
forgottenPasswordToken: 'other', 
forgottenPasswordExpire: 'other', 
isSuperAdmin: 'other', 
lastSeenAt: 'other', 
permission: 'other', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.183 seconds - level verbose  
{ key: 'id',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.183 seconds - level verbose  
{
key: 'id', 
type: {
  friendlyName: 'User No', 
  type: 'number', 
  primaryKey: true, 
  autoincrement: true, 
  database: { }, 
  process: { }, 
  description: 'User No', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.183 seconds - level verbose  
{ key: 'id',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.183 seconds - level verbose  
{
key: 'id', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.183 seconds - level verbose  
'user'
'id'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.183 seconds - level verbose  
{
text: 'end loop', 
key: 'id', 
merged: {
  friendlyName: 'User No', 
  type: 'number', 
  primaryKey: true, 
  autoincrement: true, 
  database: { }, 
  process: { }, 
  description: 'User No', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.183 seconds - level verbose  
{ key: 'createdAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.183 seconds - level verbose  
{
key: 'createdAt', 
type: {
  friendlyName: 'Date created', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { createdAt: true,  }, 
  description: 'Date created', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.183 seconds - level verbose  
{ key: 'createdAt',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.183 seconds - level verbose  
{
key: 'createdAt', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.184 seconds - level verbose  
'user'
'createdAt'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.184 seconds - level verbose  
{
text: 'end loop', 
key: 'createdAt', 
merged: {
  friendlyName: 'Date created', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { createdAt: true,  }, 
  description: 'Date created', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.184 seconds - level verbose  
{ key: 'updatedAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.184 seconds - level verbose  
{
key: 'updatedAt', 
type: {
  friendlyName: 'Date last updated', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { updatedAt: true,  }, 
  description: 'Date last updated', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.184 seconds - level verbose  
{ key: 'updatedAt',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.184 seconds - level verbose  
{
key: 'updatedAt', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.184 seconds - level verbose  
'user'
'updatedAt'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.184 seconds - level verbose  
{
text: 'end loop', 
key: 'updatedAt', 
merged: {
  friendlyName: 'Date last updated', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { updatedAt: true,  }, 
  description: 'Date last updated', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.185 seconds - level verbose  
{ key: 'updatedBy',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.185 seconds - level verbose  
{
key: 'updatedBy', 
type: {
  friendlyName: 'Last updated by', 
  description: 'The person who last updated the row.', 
  type: 'number', 
  model: 'user', 
  process: { updatedBy: true,  }, 
  database: { }, 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.185 seconds - level verbose  
{ key: 'updatedBy',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.185 seconds - level verbose  
{
key: 'updatedBy', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.185 seconds - level verbose  
'user'
'updatedBy'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.185 seconds - level verbose  
{
text: 'end loop', 
key: 'updatedBy', 
merged: {
  friendlyName: 'Last updated by', 
  description: 'The person who last updated the row.', 
  type: 'number', 
  model: 'user', 
  process: { updatedBy: true,  }, 
  database: { }, 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.185 seconds - level verbose  
{ key: 'fullName',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.185 seconds - level verbose  
{
key: 'fullName', 
type: {
  type: 'string', 
  description: 'Full representation of the user's name.', 
  example: 'Mary Sue van der McHenst', 
  input: {
    required: true, 
    placeholder: 'Please enter the persons full name', 
    class: 'form-control', 
    type: 'text', 
    }, 
  friendlyName: 'Full name', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.185 seconds - level verbose  
{ key: 'fullName',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.185 seconds - level verbose  
{
key: 'fullName', 
group: 'basics', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.185 seconds - level verbose  
'user'
'fullName'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.186 seconds - level verbose  
{
text: 'end loop', 
key: 'fullName', 
merged: {
  type: 'string', 
  description: 'Full representation of the user's name.', 
  example: 'Mary Sue van der McHenst', 
  input: {
    required: true, 
    placeholder: 'Please enter the persons full name', 
    class: 'form-control', 
    type: 'text', 
    }, 
  friendlyName: 'Full name', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.186 seconds - level verbose  
{ key: 'emailAddress',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.186 seconds - level verbose  
{
key: 'emailAddress', 
type: {
  type: 'string', 
  friendlyName: 'Email address', 
  database: { }, 
  process: { }, 
  description: 'Email address', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.186 seconds - level verbose  
{ key: 'emailAddress',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.186 seconds - level verbose  
{
key: 'emailAddress', 
group: 'basics', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.186 seconds - level verbose  
'user'
'emailAddress'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.186 seconds - level verbose  
{
text: 'end loop', 
key: 'emailAddress', 
merged: {
  type: 'string', 
  friendlyName: 'Email address', 
  database: { }, 
  process: { }, 
  description: 'Email address', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.186 seconds - level verbose  
{ key: 'password',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.186 seconds - level verbose  
{
key: 'password', 
type: {
  type: 'string', 
  description: 'Securely hashed representation of the user's login password.', 
  permission: '#superuser#', 
  example: '2$28a8eabna301089103-13948134nad', 
  friendlyName: 'Password', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.187 seconds - level verbose  
{ key: 'password',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.187 seconds - level verbose  
{
key: 'password', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.187 seconds - level verbose  
'user'
'password'
'sales'
'#superuser#'

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.187 seconds - level verbose  
{
text: 'end loop', 
key: 'password', 
merged: {
  type: 'string', 
  description: 'Securely hashed representation of the user's login password.', 
  permission: '#superuser#', 
  example: '2$28a8eabna301089103-13948134nad', 
  friendlyName: 'Password', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.187 seconds - level verbose  
{ key: 'salt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.187 seconds - level verbose  
{
key: 'salt', 
type: {
  type: 'string', 
  permission: '#superuser#', 
  friendlyName: 'Salt', 
  database: { }, 
  process: { }, 
  description: 'Salt', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.187 seconds - level verbose  
{ key: 'salt',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.188 seconds - level verbose  
{
key: 'salt', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.188 seconds - level verbose  
'user'
'salt'
'sales'
'#superuser#'

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.188 seconds - level verbose  
{
text: 'end loop', 
key: 'salt', 
merged: {
  type: 'string', 
  permission: '#superuser#', 
  friendlyName: 'Salt', 
  database: { }, 
  process: { }, 
  description: 'Salt', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.188 seconds - level verbose  
{ key: 'forgottenPasswordToken',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.188 seconds - level verbose  
{
key: 'forgottenPasswordToken', 
type: {
  permission: '#superuser#', 
  type: 'string', 
  friendlyName: 'Forgotten password token', 
  database: { }, 
  process: { }, 
  description: 'Forgotten password token', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.188 seconds - level verbose  
{ key: 'forgottenPasswordToken',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.188 seconds - level verbose  
{
key: 'forgottenPasswordToken', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.188 seconds - level verbose  
'user'
'forgottenPasswordToken'
'sales'
'#superuser#'

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.188 seconds - level verbose  
{
text: 'end loop', 
key: 'forgottenPasswordToken', 
merged: {
  permission: '#superuser#', 
  type: 'string', 
  friendlyName: 'Forgotten password token', 
  database: { }, 
  process: { }, 
  description: 'Forgotten password token', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.189 seconds - level verbose  
{ key: 'forgottenPasswordExpire',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.189 seconds - level verbose  
{
key: 'forgottenPasswordExpire', 
type: {
  permission: '#superuser#', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Forgotten password expire', 
  process: { }, 
  description: 'Forgotten password expire', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.189 seconds - level verbose  
{ key: 'forgottenPasswordExpire',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.189 seconds - level verbose  
{
key: 'forgottenPasswordExpire', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.189 seconds - level verbose  
'user'
'forgottenPasswordExpire'
'sales'
'#superuser#'

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.189 seconds - level verbose  
{
text: 'end loop', 
key: 'forgottenPasswordExpire', 
merged: {
  permission: '#superuser#', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Forgotten password expire', 
  process: { }, 
  description: 'Forgotten password expire', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.189 seconds - level verbose  
{ key: 'isSuperAdmin',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.189 seconds - level verbose  
{
key: 'isSuperAdmin', 
type: {
  type: 'boolean', 
  description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
  friendlyName: 'Is super admin', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'checkbox',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.189 seconds - level verbose  
{ key: 'isSuperAdmin',  type: 'checkbox',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.189 seconds - level verbose  
{
key: 'isSuperAdmin', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.189 seconds - level verbose  
'user'
'isSuperAdmin'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.189 seconds - level verbose  
{
text: 'end loop', 
key: 'isSuperAdmin', 
merged: {
  type: 'boolean', 
  description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
  friendlyName: 'Is super admin', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'checkbox',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.189 seconds - level verbose  
{ key: 'lastSeenAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.190 seconds - level verbose  
{
key: 'lastSeenAt', 
type: {
  type: 'number', 
  description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
  example: 1502844074211, 
  input: { type: 'date',  class: 'form-control',  }, 
  display: { type: 'date',  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Last seen at', 
  process: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.190 seconds - level verbose  
{ key: 'lastSeenAt',  type: 'date',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.190 seconds - level verbose  
{
key: 'lastSeenAt', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.190 seconds - level verbose  
'user'
'lastSeenAt'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.190 seconds - level verbose  
{
text: 'end loop', 
key: 'lastSeenAt', 
merged: {
  type: 'number', 
  description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
  example: 1502844074211, 
  input: { type: 'date',  class: 'form-control',  }, 
  display: { type: 'date',  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Last seen at', 
  process: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.190 seconds - level verbose  
{ key: 'streetAddress',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.190 seconds - level verbose  
{
key: 'streetAddress', 
type: {
  type: 'string', 
  input: {
    type: 'textarea', 
    rows: 5, 
    cols: 60, 
    placeholder: 'Please enter the street address of the user', 
    class: 'form-control', 
    }, 
  friendlyName: 'Street address', 
  database: { }, 
  process: { }, 
  description: 'Street address', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.190 seconds - level verbose  
{ key: 'streetAddress',  type: 'textarea',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.190 seconds - level verbose  
{
key: 'streetAddress', 
group: 'location', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.190 seconds - level verbose  
'user'
'streetAddress'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.190 seconds - level verbose  
{
text: 'end loop', 
key: 'streetAddress', 
merged: {
  type: 'string', 
  input: {
    type: 'textarea', 
    rows: 5, 
    cols: 60, 
    placeholder: 'Please enter the street address of the user', 
    class: 'form-control', 
    }, 
  friendlyName: 'Street address', 
  database: { }, 
  process: { }, 
  description: 'Street address', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.190 seconds - level verbose  
{ key: 'zip',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.190 seconds - level verbose  
{
key: 'zip', 
type: {
  type: 'string', 
  friendlyName: 'Zip', 
  database: { }, 
  process: { }, 
  description: 'Zip', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.190 seconds - level verbose  
{ key: 'zip',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.191 seconds - level verbose  
{
key: 'zip', 
group: 'location', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.191 seconds - level verbose  
'user'
'zip'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.191 seconds - level verbose  
{
text: 'end loop', 
key: 'zip', 
merged: {
  type: 'string', 
  friendlyName: 'Zip', 
  database: { }, 
  process: { }, 
  description: 'Zip', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.191 seconds - level verbose  
{ key: 'country',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.191 seconds - level verbose  
{
key: 'country', 
type: {
  type: 'string', 
  friendlyName: 'Country', 
  database: { }, 
  process: { }, 
  description: 'Country', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.191 seconds - level verbose  
{ key: 'country',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.191 seconds - level verbose  
{
key: 'country', 
group: 'location', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.191 seconds - level verbose  
'user'
'country'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.191 seconds - level verbose  
{
text: 'end loop', 
key: 'country', 
merged: {
  type: 'string', 
  friendlyName: 'Country', 
  database: { }, 
  process: { }, 
  description: 'Country', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.191 seconds - level verbose  
{ key: 'region',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.191 seconds - level verbose  
{
key: 'region', 
type: {
  description: 'This is an example of a select using the data in the isIn attribute.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: [
      'Europe', 
      'Middle East', 
      'Africa', 
      'South Asia', 
      'East', 
      'N America', 
      'S America', 
      ], 
    class: 'form-control', 
    }, 
  friendlyName: 'Region', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.191 seconds - level verbose  
{ key: 'region',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.191 seconds - level verbose  
{
key: 'region', 
group: 'location', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.191 seconds - level verbose  
'user'
'region'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.192 seconds - level verbose  
{
text: 'end loop', 
key: 'region', 
merged: {
  description: 'This is an example of a select using the data in the isIn attribute.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: [
      'Europe', 
      'Middle East', 
      'Africa', 
      'South Asia', 
      'East', 
      'N America', 
      'S America', 
      ], 
    class: 'form-control', 
    }, 
  friendlyName: 'Region', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.192 seconds - level verbose  
{ key: 'permission',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.192 seconds - level verbose  
{
key: 'permission', 
type: {
  friendlyName: 'Permission set', 
  type: 'string', 
  description: 'Permission set.', 
  extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
  allowNull: true, 
  input: {
    type: 'select', 
    values: Function, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.192 seconds - level verbose  
{ key: 'permission',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.192 seconds - level verbose  
{
key: 'permission', 
group: 'other', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.192 seconds - level verbose  
'user'
'permission'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.192 seconds - level verbose  
{
text: 'end loop', 
key: 'permission', 
merged: {
  friendlyName: 'Permission set', 
  type: 'string', 
  description: 'Permission set.', 
  extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
  allowNull: true, 
  input: {
    type: 'select', 
    values: Function, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.192 seconds - level verbose  
{ key: 'isOrg',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.192 seconds - level verbose  
{
key: 'isOrg', 
type: {
  friendlyName: 'Person or Business?', 
  type: 'string', 
  description: 'This record describes a business rather than a person', 
  input: {
    type: 'radio', 
    values: { P: 'Person',  B: 'Business/Organisation',  }, 
    required: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.192 seconds - level verbose  
{ key: 'isOrg',  type: 'radio',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.192 seconds - level verbose  
{
key: 'isOrg', 
group: 'basics', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.192 seconds - level verbose  
'user'
'isOrg'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.193 seconds - level verbose  
{
text: 'end loop', 
key: 'isOrg', 
merged: {
  friendlyName: 'Person or Business?', 
  type: 'string', 
  description: 'This record describes a business rather than a person', 
  input: {
    type: 'radio', 
    values: { P: 'Person',  B: 'Business/Organisation',  }, 
    required: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.193 seconds - level verbose  
{ key: 'business',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.193 seconds - level verbose  
{
key: 'business', 
type: {
  type: 'string', 
  description: 'Description of the customer's business', 
  friendlyName: 'The type of business.', 
  input: {
    type: 'textarea', 
    rows: 3, 
    cols: 60, 
    placeholder: 'Please enter a description of the user's business and place in the organisation', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.193 seconds - level verbose  
{ key: 'business',  type: 'textarea',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.193 seconds - level verbose  
{
key: 'business', 
group: 'profile', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.193 seconds - level verbose  
'user'
'business'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.193 seconds - level verbose  
{
text: 'end loop', 
key: 'business', 
merged: {
  type: 'string', 
  description: 'Description of the customer's business', 
  friendlyName: 'The type of business.', 
  input: {
    type: 'textarea', 
    rows: 3, 
    cols: 60, 
    placeholder: 'Please enter a description of the user's business and place in the organisation', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.193 seconds - level verbose  
{ key: 'organisation',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.193 seconds - level verbose  
{
key: 'organisation', 
type: {
  friendlyName: 'Organisation', 
  model: 'user', 
  description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
  input: {
    type: 'select', 
    search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.193 seconds - level verbose  
{ key: 'organisation',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.193 seconds - level verbose  
{
key: 'organisation', 
group: 'profile', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.193 seconds - level verbose  
'user'
'organisation'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.193 seconds - level verbose  
{
text: 'end loop', 
key: 'organisation', 
merged: {
  friendlyName: 'Organisation', 
  model: 'user', 
  description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
  input: {
    type: 'select', 
    search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.193 seconds - level verbose  
{ key: 'userType',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.194 seconds - level verbose  
{
key: 'userType', 
type: {
  description: 'The type of user.  Customer/Supplier or in-house.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: {
      L: 'Sales lead', 
      P: 'Prospect', 
      C: 'Customer', 
      S: 'Supplier', 
      I: 'In-house staff', 
      N: 'No longer considered a prospect', 
      O: 'Other', 
      }, 
    required: true, 
    class: 'form-control', 
    }, 
  friendlyName: 'User type', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.194 seconds - level verbose  
{ key: 'userType',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.194 seconds - level verbose  
{
key: 'userType', 
group: 'basics', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.194 seconds - level verbose  
'user'
'userType'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.194 seconds - level verbose  
{
text: 'end loop', 
key: 'userType', 
merged: {
  description: 'The type of user.  Customer/Supplier or in-house.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: {
      L: 'Sales lead', 
      P: 'Prospect', 
      C: 'Customer', 
      S: 'Supplier', 
      I: 'In-house staff', 
      N: 'No longer considered a prospect', 
      O: 'Other', 
      }, 
    required: true, 
    class: 'form-control', 
    }, 
  friendlyName: 'User type', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.194 seconds - level verbose  
{ key: 'lastContact',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.194 seconds - level verbose  
{
key: 'lastContact', 
type: {
  model: 'contacts', 
  child: false, 
  friendlyName: 'Last contact', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Last contact', 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.194 seconds - level verbose  
{ key: 'lastContact',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.194 seconds - level verbose  
{
key: 'lastContact', 
group: 'contacts', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.194 seconds - level verbose  
'user'
'lastContact'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.195 seconds - level verbose  
{
text: 'end loop', 
key: 'lastContact', 
merged: {
  model: 'contacts', 
  child: false, 
  friendlyName: 'Last contact', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Last contact', 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.195 seconds - level verbose  
{ key: 'nextActionDate',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.195 seconds - level verbose  
{
key: 'nextActionDate', 
type: {
  friendlyName: 'Next action date', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
  input: {
    type: 'date', 
    hidden: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.195 seconds - level verbose  
{ key: 'nextActionDate',  type: 'date',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.195 seconds - level verbose  
{
key: 'nextActionDate', 
group: 'contacts', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.195 seconds - level verbose  
'user'
'nextActionDate'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.195 seconds - level verbose  
{
text: 'end loop', 
key: 'nextActionDate', 
merged: {
  friendlyName: 'Next action date', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
  input: {
    type: 'date', 
    hidden: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.195 seconds - level verbose  
{ key: 'nextAction',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.195 seconds - level verbose  
{
key: 'nextAction', 
type: {
  friendlyName: 'Next action', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'text', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.195 seconds - level verbose  
{ key: 'nextAction',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.195 seconds - level verbose  
{
key: 'nextAction', 
group: 'contacts', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.195 seconds - level verbose  
'user'
'nextAction'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.195 seconds - level verbose  
{
text: 'end loop', 
key: 'nextAction', 
merged: {
  friendlyName: 'Next action', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'text', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.196 seconds - level verbose  
{ key: 'mobilePhone',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.196 seconds - level verbose  
{
key: 'mobilePhone', 
type: {
  type: 'string', 
  friendlyName: 'Mobile phone', 
  database: { }, 
  process: { }, 
  description: 'Mobile phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.196 seconds - level verbose  
{ key: 'mobilePhone',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.196 seconds - level verbose  
{
key: 'mobilePhone', 
group: 'location', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.196 seconds - level verbose  
'user'
'mobilePhone'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.196 seconds - level verbose  
{
text: 'end loop', 
key: 'mobilePhone', 
merged: {
  type: 'string', 
  friendlyName: 'Mobile phone', 
  database: { }, 
  process: { }, 
  description: 'Mobile phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.196 seconds - level verbose  
{ key: 'mainPhone',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.196 seconds - level verbose  
{
key: 'mainPhone', 
type: {
  type: 'string', 
  friendlyName: 'Main phone', 
  database: { }, 
  process: { }, 
  description: 'Main phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.196 seconds - level verbose  
{ key: 'mainPhone',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.196 seconds - level verbose  
{
key: 'mainPhone', 
group: 'location', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.196 seconds - level verbose  
'user'
'mainPhone'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.196 seconds - level verbose  
{
text: 'end loop', 
key: 'mainPhone', 
merged: {
  type: 'string', 
  friendlyName: 'Main phone', 
  database: { }, 
  process: { }, 
  description: 'Main phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.196 seconds - level verbose  
{ key: 'lastSale',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.197 seconds - level verbose  
{
key: 'lastSale', 
type: {
  type: 'number', 
  model: 'salesorders', 
  friendlyName: 'Last sale', 
  description: 'Created automatically. This is a link to the last sales order.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.197 seconds - level verbose  
{ key: 'lastSale',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.197 seconds - level verbose  
{
key: 'lastSale', 
group: 'sales', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.197 seconds - level verbose  
'user'
'lastSale'
'sales'
{ all: [ 'admin',  'sales',  ],  }

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.197 seconds - level verbose  
{
text: 'end loop', 
key: 'lastSale', 
merged: {
  type: 'number', 
  model: 'salesorders', 
  friendlyName: 'Last sale', 
  description: 'Created automatically. This is a link to the last sales order.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.197 seconds - level verbose  
{ key: 'notes',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.197 seconds - level verbose  
{
key: 'notes', 
type: {
  type: 'string', 
  friendlyName: 'Notes', 
  input: {
    type: 'textarea', 
    rows: 6, 
    cols: 60, 
    placeholder: 'Please enter any notes about this user.', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Notes', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.197 seconds - level verbose  
{ key: 'notes',  type: 'textarea',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.197 seconds - level verbose  
{
key: 'notes', 
group: 'profile', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.197 seconds - level verbose  
'user'
'notes'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.197 seconds - level verbose  
{
text: 'end loop', 
key: 'notes', 
merged: {
  type: 'string', 
  friendlyName: 'Notes', 
  input: {
    type: 'textarea', 
    rows: 6, 
    cols: 60, 
    placeholder: 'Please enter any notes about this user.', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Notes', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.197 seconds - level verbose  
{ key: 'webpages',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.198 seconds - level verbose  
{
key: 'webpages', 
type: {
  collection: 'webpages', 
  via: 'author', 
  friendlyName: 'Webpages', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'webpages' via column 'author'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.198 seconds - level verbose  
{ key: 'webpages',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.198 seconds - level verbose  
{
key: 'webpages', 
group: 'website', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.198 seconds - level verbose  
'user'
'webpages'
'sales'
{ all: [ 'admin',  'web',  ],  }

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.198 seconds - level verbose  
{
text: 'end loop', 
key: 'webpages', 
merged: {
  collection: 'webpages', 
  via: 'author', 
  friendlyName: 'Webpages', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'webpages' via column 'author'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.198 seconds - level verbose  
{ key: 'contacts',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.198 seconds - level verbose  
{
key: 'contacts', 
type: {
  collection: 'contacts', 
  via: 'user', 
  collectionList: {
    limit: 5, 
    order: 'date', 
    direction: 'DESC', 
    heading: 'Recent contacts', 
    columns: [ 'id',  'date',  'notes',  'closed',  ], 
    addChildTip: 'Add a new contact for this user.', 
    }, 
  friendlyName: 'Contacts', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'contacts' via column 'user'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.198 seconds - level verbose  
{ key: 'contacts',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.198 seconds - level verbose  
{
key: 'contacts', 
group: 'contacts', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.198 seconds - level verbose  
'user'
'contacts'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.198 seconds - level verbose  
{
text: 'end loop', 
key: 'contacts', 
merged: {
  collection: 'contacts', 
  via: 'user', 
  collectionList: {
    limit: 5, 
    order: 'date', 
    direction: 'DESC', 
    heading: 'Recent contacts', 
    columns: [ 'id',  'date',  'notes',  'closed',  ], 
    addChildTip: 'Add a new contact for this user.', 
    }, 
  friendlyName: 'Contacts', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'contacts' via column 'user'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.199 seconds - level verbose  
{ key: 'salesorders',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.199 seconds - level verbose  
{
key: 'salesorders', 
type: {
  collection: 'salesorders', 
  via: 'customer', 
  collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
  friendlyName: 'Salesorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'salesorders' via column 'customer'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.199 seconds - level verbose  
{ key: 'salesorders',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.199 seconds - level verbose  
{
key: 'salesorders', 
group: 'sales', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.199 seconds - level verbose  
'user'
'salesorders'
'sales'
{ all: [ 'admin',  'sales',  ],  }

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.199 seconds - level verbose  
{
text: 'end loop', 
key: 'salesorders', 
merged: {
  collection: 'salesorders', 
  via: 'customer', 
  collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
  friendlyName: 'Salesorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'salesorders' via column 'customer'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.199 seconds - level verbose  
{ key: 'products',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.199 seconds - level verbose  
{
key: 'products', 
type: {
  collection: 'products', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'price',  'class',  'description',  ], 
    }, 
  friendlyName: 'Products', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'products' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.199 seconds - level verbose  
{ key: 'products',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.199 seconds - level verbose  
{
key: 'products', 
group: 'products', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.199 seconds - level verbose  
'user'
'products'
'sales'
{
all: [ 'admin',  'purchasing',  ], 
view: [ 'sales',  ], 
}

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.200 seconds - level verbose  
{
text: 'end loop', 
key: 'products', 
merged: {
  collection: 'products', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'price',  'class',  'description',  ], 
    }, 
  friendlyName: 'Products', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'products' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.200 seconds - level verbose  
{ key: 'purchaseorders',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.200 seconds - level verbose  
{
key: 'purchaseorders', 
type: {
  collection: 'purchaseorders', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'date',  'status',  'notes',  ], 
    }, 
  friendlyName: 'Purchaseorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.200 seconds - level verbose  
{ key: 'purchaseorders',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.200 seconds - level verbose  
{
key: 'purchaseorders', 
group: 'products', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.200 seconds - level verbose  
'user'
'purchaseorders'
'sales'
{
all: [ 'admin',  'purchasing',  ], 
view: [ 'sales',  ], 
}

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.200 seconds - level verbose  
{
text: 'end loop', 
key: 'purchaseorders', 
merged: {
  collection: 'purchaseorders', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'date',  'status',  'notes',  ], 
    }, 
  friendlyName: 'Purchaseorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.201 seconds - level verbose  
{ key: 'people',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.201 seconds - level verbose  
{
key: 'people', 
type: {
  friendlyName: 'Associated people', 
  collection: 'user', 
  via: 'organisation', 
  collectionList: {
    columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
    }, 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'user' via column 'organisation'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.201 seconds - level verbose  
{ key: 'people',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.201 seconds - level verbose  
{
key: 'people', 
group: 'contacts', 
permission: 'sales', 
}

------------------------------------------------------------
merge-attributes.js:119:11 -> 0.201 seconds - level verbose  
'user'
'people'
'sales'
undefined

------------------------------------------------------------
merge-attributes.js:158:11 -> 0.201 seconds - level verbose  
{
text: 'end loop', 
key: 'people', 
merged: {
  friendlyName: 'Associated people', 
  collection: 'user', 
  via: 'organisation', 
  collectionList: {
    columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
    }, 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'user' via column 'organisation'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:162:9 -> 0.201 seconds - level verbose  
{
merged: {
  id: {
    friendlyName: 'User No', 
    type: 'number', 
    primaryKey: true, 
    autoincrement: true, 
    database: { }, 
    process: { }, 
    description: 'User No', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  createdAt: {
    friendlyName: 'Date created', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { createdAt: true,  }, 
    description: 'Date created', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedAt: {
    friendlyName: 'Date last updated', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { updatedAt: true,  }, 
    description: 'Date last updated', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedBy: {
    friendlyName: 'Last updated by', 
    description: 'The person who last updated the row.', 
    type: 'number', 
    model: 'user', 
    process: { updatedBy: true,  }, 
    database: { }, 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  fullName: {
    type: 'string', 
    description: 'Full representation of the user's name.', 
    example: 'Mary Sue van der McHenst', 
    input: {
      required: true, 
      placeholder: 'Please enter the persons full name', 
      class: 'form-control', 
      type: 'text', 
      }, 
    friendlyName: 'Full name', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  emailAddress: {
    type: 'string', 
    friendlyName: 'Email address', 
    database: { }, 
    process: { }, 
    description: 'Email address', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  password: {
    type: 'string', 
    description: 'Securely hashed representation of the user's login password.', 
    permission: '#superuser#', 
    example: '2$28a8eabna301089103-13948134nad', 
    friendlyName: 'Password', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    }, 
  salt: {
    type: 'string', 
    permission: '#superuser#', 
    friendlyName: 'Salt', 
    database: { }, 
    process: { }, 
    description: 'Salt', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    }, 
  forgottenPasswordToken: {
    permission: '#superuser#', 
    type: 'string', 
    friendlyName: 'Forgotten password token', 
    database: { }, 
    process: { }, 
    description: 'Forgotten password token', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    }, 
  forgottenPasswordExpire: {
    permission: '#superuser#', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Forgotten password expire', 
    process: { }, 
    description: 'Forgotten password expire', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: false, 
    canView: false, 
    }, 
  isSuperAdmin: {
    type: 'boolean', 
    description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
    friendlyName: 'Is super admin', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'checkbox',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSeenAt: {
    type: 'number', 
    description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
    example: 1502844074211, 
    input: { type: 'date',  class: 'form-control',  }, 
    display: { type: 'date',  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Last seen at', 
    process: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  streetAddress: {
    type: 'string', 
    input: {
      type: 'textarea', 
      rows: 5, 
      cols: 60, 
      placeholder: 'Please enter the street address of the user', 
      class: 'form-control', 
      }, 
    friendlyName: 'Street address', 
    database: { }, 
    process: { }, 
    description: 'Street address', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  zip: {
    type: 'string', 
    friendlyName: 'Zip', 
    database: { }, 
    process: { }, 
    description: 'Zip', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  country: {
    type: 'string', 
    friendlyName: 'Country', 
    database: { }, 
    process: { }, 
    description: 'Country', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  region: {
    description: 'This is an example of a select using the data in the isIn attribute.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: [
        'Europe', 
        'Middle East', 
        'Africa', 
        'South Asia', 
        'East', 
        'N America', 
        'S America', 
        ], 
      class: 'form-control', 
      }, 
    friendlyName: 'Region', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  permission: {
    friendlyName: 'Permission set', 
    type: 'string', 
    description: 'Permission set.', 
    extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
    allowNull: true, 
    input: {
      type: 'select', 
      values: Function, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  isOrg: {
    friendlyName: 'Person or Business?', 
    type: 'string', 
    description: 'This record describes a business rather than a person', 
    input: {
      type: 'radio', 
      values: { P: 'Person',  B: 'Business/Organisation',  }, 
      required: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  business: {
    type: 'string', 
    description: 'Description of the customer's business', 
    friendlyName: 'The type of business.', 
    input: {
      type: 'textarea', 
      rows: 3, 
      cols: 60, 
      placeholder: 'Please enter a description of the user's business and place in the organisation', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  organisation: {
    friendlyName: 'Organisation', 
    model: 'user', 
    description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
    input: {
      type: 'select', 
      search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  userType: {
    description: 'The type of user.  Customer/Supplier or in-house.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: {
        L: 'Sales lead', 
        P: 'Prospect', 
        C: 'Customer', 
        S: 'Supplier', 
        I: 'In-house staff', 
        N: 'No longer considered a prospect', 
        O: 'Other', 
        }, 
      required: true, 
      class: 'form-control', 
      }, 
    friendlyName: 'User type', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastContact: {
    model: 'contacts', 
    child: false, 
    friendlyName: 'Last contact', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Last contact', 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextActionDate: {
    friendlyName: 'Next action date', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
    input: {
      type: 'date', 
      hidden: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextAction: {
    friendlyName: 'Next action', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'text', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mobilePhone: {
    type: 'string', 
    friendlyName: 'Mobile phone', 
    database: { }, 
    process: { }, 
    description: 'Mobile phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mainPhone: {
    type: 'string', 
    friendlyName: 'Main phone', 
    database: { }, 
    process: { }, 
    description: 'Main phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSale: {
    type: 'number', 
    model: 'salesorders', 
    friendlyName: 'Last sale', 
    description: 'Created automatically. This is a link to the last sales order.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  notes: {
    type: 'string', 
    friendlyName: 'Notes', 
    input: {
      type: 'textarea', 
      rows: 6, 
      cols: 60, 
      placeholder: 'Please enter any notes about this user.', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Notes', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  webpages: {
    collection: 'webpages', 
    via: 'author', 
    friendlyName: 'Webpages', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'webpages' via column 'author'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    permission: { all: [ 'admin',  'web',  ],  }, 
    }, 
  contacts: {
    collection: 'contacts', 
    via: 'user', 
    collectionList: {
      limit: 5, 
      order: 'date', 
      direction: 'DESC', 
      heading: 'Recent contacts', 
      columns: [ 'id',  'date',  'notes',  'closed',  ], 
      addChildTip: 'Add a new contact for this user.', 
      }, 
    friendlyName: 'Contacts', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'contacts' via column 'user'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salesorders: {
    collection: 'salesorders', 
    via: 'customer', 
    collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
    friendlyName: 'Salesorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'salesorders' via column 'customer'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  products: {
    collection: 'products', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'price',  'class',  'description',  ], 
      }, 
    friendlyName: 'Products', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'products' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  purchaseorders: {
    collection: 'purchaseorders', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'date',  'status',  'notes',  ], 
      }, 
    friendlyName: 'Purchaseorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  people: {
    friendlyName: 'Associated people', 
    collection: 'user', 
    via: 'organisation', 
    collectionList: {
      columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
      }, 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'user' via column 'organisation'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  }, 
}

------------------------------------------------------------
list-row.js:61:9 -> 0.202 seconds - level verbose  
{
attributes: {
  id: {
    friendlyName: 'User No', 
    type: 'number', 
    primaryKey: true, 
    autoincrement: true, 
    database: { }, 
    process: { }, 
    description: 'User No', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  createdAt: {
    friendlyName: 'Date created', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { createdAt: true,  }, 
    description: 'Date created', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedAt: {
    friendlyName: 'Date last updated', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { updatedAt: true,  }, 
    description: 'Date last updated', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedBy: {
    friendlyName: 'Last updated by', 
    description: 'The person who last updated the row.', 
    type: 'number', 
    model: 'user', 
    process: { updatedBy: true,  }, 
    database: { }, 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  fullName: {
    type: 'string', 
    description: 'Full representation of the user's name.', 
    example: 'Mary Sue van der McHenst', 
    input: {
      required: true, 
      placeholder: 'Please enter the persons full name', 
      class: 'form-control', 
      type: 'text', 
      }, 
    friendlyName: 'Full name', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  emailAddress: {
    type: 'string', 
    friendlyName: 'Email address', 
    database: { }, 
    process: { }, 
    description: 'Email address', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  password: {
    type: 'string', 
    description: 'Securely hashed representation of the user's login password.', 
    permission: '#superuser#', 
    example: '2$28a8eabna301089103-13948134nad', 
    friendlyName: 'Password', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    }, 
  salt: {
    type: 'string', 
    permission: '#superuser#', 
    friendlyName: 'Salt', 
    database: { }, 
    process: { }, 
    description: 'Salt', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    }, 
  forgottenPasswordToken: {
    permission: '#superuser#', 
    type: 'string', 
    friendlyName: 'Forgotten password token', 
    database: { }, 
    process: { }, 
    description: 'Forgotten password token', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    }, 
  forgottenPasswordExpire: {
    permission: '#superuser#', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Forgotten password expire', 
    process: { }, 
    description: 'Forgotten password expire', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: false, 
    canView: false, 
    }, 
  isSuperAdmin: {
    type: 'boolean', 
    description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
    friendlyName: 'Is super admin', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'checkbox',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSeenAt: {
    type: 'number', 
    description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
    example: 1502844074211, 
    input: { type: 'date',  class: 'form-control',  }, 
    display: { type: 'date',  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Last seen at', 
    process: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  streetAddress: {
    type: 'string', 
    input: {
      type: 'textarea', 
      rows: 5, 
      cols: 60, 
      placeholder: 'Please enter the street address of the user', 
      class: 'form-control', 
      }, 
    friendlyName: 'Street address', 
    database: { }, 
    process: { }, 
    description: 'Street address', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  zip: {
    type: 'string', 
    friendlyName: 'Zip', 
    database: { }, 
    process: { }, 
    description: 'Zip', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  country: {
    type: 'string', 
    friendlyName: 'Country', 
    database: { }, 
    process: { }, 
    description: 'Country', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  region: {
    description: 'This is an example of a select using the data in the isIn attribute.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: [
        'Europe', 
        'Middle East', 
        'Africa', 
        'South Asia', 
        'East', 
        'N America', 
        'S America', 
        ], 
      class: 'form-control', 
      }, 
    friendlyName: 'Region', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  permission: {
    friendlyName: 'Permission set', 
    type: 'string', 
    description: 'Permission set.', 
    extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
    allowNull: true, 
    input: {
      type: 'select', 
      values: Function, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  isOrg: {
    friendlyName: 'Person or Business?', 
    type: 'string', 
    description: 'This record describes a business rather than a person', 
    input: {
      type: 'radio', 
      values: { P: 'Person',  B: 'Business/Organisation',  }, 
      required: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  business: {
    type: 'string', 
    description: 'Description of the customer's business', 
    friendlyName: 'The type of business.', 
    input: {
      type: 'textarea', 
      rows: 3, 
      cols: 60, 
      placeholder: 'Please enter a description of the user's business and place in the organisation', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  organisation: {
    friendlyName: 'Organisation', 
    model: 'user', 
    description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
    input: {
      type: 'select', 
      search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  userType: {
    description: 'The type of user.  Customer/Supplier or in-house.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: {
        L: 'Sales lead', 
        P: 'Prospect', 
        C: 'Customer', 
        S: 'Supplier', 
        I: 'In-house staff', 
        N: 'No longer considered a prospect', 
        O: 'Other', 
        }, 
      required: true, 
      class: 'form-control', 
      }, 
    friendlyName: 'User type', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastContact: {
    model: 'contacts', 
    child: false, 
    friendlyName: 'Last contact', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Last contact', 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextActionDate: {
    friendlyName: 'Next action date', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
    input: {
      type: 'date', 
      hidden: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextAction: {
    friendlyName: 'Next action', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'text', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mobilePhone: {
    type: 'string', 
    friendlyName: 'Mobile phone', 
    database: { }, 
    process: { }, 
    description: 'Mobile phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mainPhone: {
    type: 'string', 
    friendlyName: 'Main phone', 
    database: { }, 
    process: { }, 
    description: 'Main phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSale: {
    type: 'number', 
    model: 'salesorders', 
    friendlyName: 'Last sale', 
    description: 'Created automatically. This is a link to the last sales order.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  notes: {
    type: 'string', 
    friendlyName: 'Notes', 
    input: {
      type: 'textarea', 
      rows: 6, 
      cols: 60, 
      placeholder: 'Please enter any notes about this user.', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Notes', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  webpages: {
    collection: 'webpages', 
    via: 'author', 
    friendlyName: 'Webpages', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'webpages' via column 'author'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    permission: { all: [ 'admin',  'web',  ],  }, 
    }, 
  contacts: {
    collection: 'contacts', 
    via: 'user', 
    collectionList: {
      limit: 5, 
      order: 'date', 
      direction: 'DESC', 
      heading: 'Recent contacts', 
      columns: [ 'id',  'date',  'notes',  'closed',  ], 
      addChildTip: 'Add a new contact for this user.', 
      }, 
    friendlyName: 'Contacts', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'contacts' via column 'user'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salesorders: {
    collection: 'salesorders', 
    via: 'customer', 
    collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
    friendlyName: 'Salesorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'salesorders' via column 'customer'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  products: {
    collection: 'products', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'price',  'class',  'description',  ], 
      }, 
    friendlyName: 'Products', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'products' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  purchaseorders: {
    collection: 'purchaseorders', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'date',  'status',  'notes',  ], 
      }, 
    friendlyName: 'Purchaseorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  people: {
    friendlyName: 'Associated people', 
    collection: 'user', 
    via: 'organisation', 
    collectionList: {
      columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
      }, 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'user' via column 'organisation'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  }, 
}

------------------------------------------------------------
get-row.js:9:9 -> 0.202 seconds - level norm  
{ inputs: { 0: 'user',  1: 35,  },  }

------------------------------------------------------------
table-data.js:9:9 -> 0.202 seconds - level verbose  
{ inputs: { 0: 'user',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.202 seconds - level verbose  
'Users'

------------------------------------------------------------
table-data.js:26:13 -> 0.202 seconds - level verbose  
'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.'

------------------------------------------------------------
table-data.js:26:13 -> 0.202 seconds - level verbose  
{ all: [ 'sales',  'purchasing',  'admin',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.202 seconds - level verbose  
'Add a new user'

------------------------------------------------------------
table-data.js:26:13 -> 0.202 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:26:13 -> 0.202 seconds - level verbose  
{
columns: [
  'id', 
  'fullName', 
  'emailAddress', 
  'userType', 
  'organisation', 
  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.203 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.203 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.203 seconds - level verbose  
'User'

------------------------------------------------------------
table-data.js:100:9 -> 0.203 seconds - level verbose  
{
canedit: false, 
permission: undefined, 
mergedpermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
get-row.js:12:9 -> 0.203 seconds - level norm  
{
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
get-row.js:14:9 -> 0.203 seconds - level norm  
'id'
35

------------------------------------------------------------
get-row.js:16:9 -> 0.203 seconds - level norm  
{ searches: [ [ 'id',  'eq',  35,  ],  ],  }

------------------------------------------------------------
get-rows.js:26:9 -> 0.203 seconds - level norm  
{
input: {
  0: 'user', 
  1: { searches: [ [ 'id',  'eq',  35,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:9:10 -> 0.203 seconds - level norm  
{ inputs: { 0: 'user',  1: '#superuser#',  },  }

------------------------------------------------------------
merge-attributes.js:13:10 -> 0.204 seconds - level verbose  
{
tableData: {
  friendlyName: 'Users', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: {
    columns: [
      'id', 
      'fullName', 
      'emailAddress', 
      'userType', 
      'organisation', 
      ], 
    }, 
  groups: {
    basics: {
      static: true, 
      open: 'none', 
      columns: [
        'fullName', 
        'emailAddress', 
        'userType', 
        'isOrg', 
        ], 
      }, 
    profile: {
      friendlyName: 'profile', 
      open: 'none', 
      columns: [ 'organisation',  'business',  'notes',  ], 
      }, 
    location: {
      friendlyName: 'How to contact', 
      open: 'none', 
      columns: [
        'streetAddress', 
        'zip', 
        'country', 
        'region', 
        'mainPhone', 
        'mobilePhone', 
        ], 
      }, 
    contacts: {
      friendlyName: 'Contacts', 
      open: 'contacts', 
      columns: [
        'people', 
        'contacts', 
        'lastContact', 
        'nextAction', 
        'nextActionDate', 
        ], 
      }, 
    sales: {
      friendlyName: 'Sales', 
      open: 'salesorders', 
      columns: [ 'salesorders',  'lastSale',  ], 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      friendlyName: 'Products supplied', 
      open: 'products', 
      columns: [ 'products',  'purchaseorders',  ], 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    website: {
      friendlyName: 'Website', 
      open: 'website', 
      columns: [ 'webpages',  ], 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    other: {
      friendlyName: 'Other', 
      columns: [
        'id', 
        'createdAt', 
        'updatedAt', 
        'updatedBy', 
        'password', 
        'salt', 
        'forgottenPasswordToken', 
        'forgottenPasswordExpire', 
        'isSuperAdmin', 
        'lastSeenAt', 
        'permission', 
        ], 
      }, 
    }, 
  attributes: {
    id: {
      friendlyName: 'User No', 
      type: 'number', 
      primaryKey: true, 
      autoincrement: true, 
      database: { }, 
      process: { }, 
      description: 'User No', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    createdAt: {
      friendlyName: 'Date created', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { createdAt: true,  }, 
      description: 'Date created', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedAt: {
      friendlyName: 'Date last updated', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { updatedAt: true,  }, 
      description: 'Date last updated', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedBy: {
      friendlyName: 'Last updated by', 
      description: 'The person who last updated the row.', 
      type: 'number', 
      model: 'user', 
      process: { updatedBy: true,  }, 
      database: { }, 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    fullName: {
      type: 'string', 
      description: 'Full representation of the user's name.', 
      example: 'Mary Sue van der McHenst', 
      input: {
        required: true, 
        placeholder: 'Please enter the persons full name', 
        class: 'form-control', 
        type: 'text', 
        }, 
      friendlyName: 'Full name', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    emailAddress: {
      type: 'string', 
      friendlyName: 'Email address', 
      database: { }, 
      process: { }, 
      description: 'Email address', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    password: {
      type: 'string', 
      description: 'Securely hashed representation of the user's login password.', 
      permission: '#superuser#', 
      example: '2$28a8eabna301089103-13948134nad', 
      friendlyName: 'Password', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      }, 
    salt: {
      type: 'string', 
      permission: '#superuser#', 
      friendlyName: 'Salt', 
      database: { }, 
      process: { }, 
      description: 'Salt', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      }, 
    forgottenPasswordToken: {
      permission: '#superuser#', 
      type: 'string', 
      friendlyName: 'Forgotten password token', 
      database: { }, 
      process: { }, 
      description: 'Forgotten password token', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      }, 
    forgottenPasswordExpire: {
      permission: '#superuser#', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Forgotten password expire', 
      process: { }, 
      description: 'Forgotten password expire', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: false, 
      canView: false, 
      }, 
    isSuperAdmin: {
      type: 'boolean', 
      description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
      friendlyName: 'Is super admin', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'checkbox',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSeenAt: {
      type: 'number', 
      description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
      example: 1502844074211, 
      input: { type: 'date',  class: 'form-control',  }, 
      display: { type: 'date',  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Last seen at', 
      process: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    streetAddress: {
      type: 'string', 
      input: {
        type: 'textarea', 
        rows: 5, 
        cols: 60, 
        placeholder: 'Please enter the street address of the user', 
        class: 'form-control', 
        }, 
      friendlyName: 'Street address', 
      database: { }, 
      process: { }, 
      description: 'Street address', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    zip: {
      type: 'string', 
      friendlyName: 'Zip', 
      database: { }, 
      process: { }, 
      description: 'Zip', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    country: {
      type: 'string', 
      friendlyName: 'Country', 
      database: { }, 
      process: { }, 
      description: 'Country', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    region: {
      description: 'This is an example of a select using the data in the isIn attribute.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: [
          'Europe', 
          'Middle East', 
          'Africa', 
          'South Asia', 
          'East', 
          'N America', 
          'S America', 
          ], 
        class: 'form-control', 
        }, 
      friendlyName: 'Region', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    permission: {
      friendlyName: 'Permission set', 
      type: 'string', 
      description: 'Permission set.', 
      extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
      allowNull: true, 
      input: {
        type: 'select', 
        values: Function, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    isOrg: {
      friendlyName: 'Person or Business?', 
      type: 'string', 
      description: 'This record describes a business rather than a person', 
      input: {
        type: 'radio', 
        values: { P: 'Person',  B: 'Business/Organisation',  }, 
        required: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    business: {
      type: 'string', 
      description: 'Description of the customer's business', 
      friendlyName: 'The type of business.', 
      input: {
        type: 'textarea', 
        rows: 3, 
        cols: 60, 
        placeholder: 'Please enter a description of the user's business and place in the organisation', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    organisation: {
      friendlyName: 'Organisation', 
      model: 'user', 
      description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
      input: {
        type: 'select', 
        search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    userType: {
      description: 'The type of user.  Customer/Supplier or in-house.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: {
          L: 'Sales lead', 
          P: 'Prospect', 
          C: 'Customer', 
          S: 'Supplier', 
          I: 'In-house staff', 
          N: 'No longer considered a prospect', 
          O: 'Other', 
          }, 
        required: true, 
        class: 'form-control', 
        }, 
      friendlyName: 'User type', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastContact: {
      model: 'contacts', 
      child: false, 
      friendlyName: 'Last contact', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Last contact', 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextActionDate: {
      friendlyName: 'Next action date', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
      input: {
        type: 'date', 
        hidden: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextAction: {
      friendlyName: 'Next action', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'text', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mobilePhone: {
      type: 'string', 
      friendlyName: 'Mobile phone', 
      database: { }, 
      process: { }, 
      description: 'Mobile phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mainPhone: {
      type: 'string', 
      friendlyName: 'Main phone', 
      database: { }, 
      process: { }, 
      description: 'Main phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSale: {
      type: 'number', 
      model: 'salesorders', 
      friendlyName: 'Last sale', 
      description: 'Created automatically. This is a link to the last sales order.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    notes: {
      type: 'string', 
      friendlyName: 'Notes', 
      input: {
        type: 'textarea', 
        rows: 6, 
        cols: 60, 
        placeholder: 'Please enter any notes about this user.', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Notes', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    webpages: {
      collection: 'webpages', 
      via: 'author', 
      friendlyName: 'Webpages', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'webpages' via column 'author'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    contacts: {
      collection: 'contacts', 
      via: 'user', 
      collectionList: {
        limit: 5, 
        order: 'date', 
        direction: 'DESC', 
        heading: 'Recent contacts', 
        columns: [ 'id',  'date',  'notes',  'closed',  ], 
        addChildTip: 'Add a new contact for this user.', 
        }, 
      friendlyName: 'Contacts', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'contacts' via column 'user'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salesorders: {
      collection: 'salesorders', 
      via: 'customer', 
      collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
      friendlyName: 'Salesorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'salesorders' via column 'customer'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      collection: 'products', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'price',  'class',  'description',  ], 
        }, 
      friendlyName: 'Products', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'products' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    purchaseorders: {
      collection: 'purchaseorders', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'date',  'status',  'notes',  ], 
        }, 
      friendlyName: 'Purchaseorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    people: {
      friendlyName: 'Associated people', 
      collection: 'user', 
      via: 'organisation', 
      collectionList: {
        columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
        }, 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'user' via column 'organisation'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:21:9 -> 0.204 seconds - level verbose  
{
table: 'user', 
attributes: {
  id: {
    friendlyName: 'User No', 
    type: 'number', 
    primaryKey: true, 
    autoincrement: true, 
    database: { }, 
    process: { }, 
    description: 'User No', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  createdAt: {
    friendlyName: 'Date created', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { createdAt: true,  }, 
    description: 'Date created', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedAt: {
    friendlyName: 'Date last updated', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { updatedAt: true,  }, 
    description: 'Date last updated', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedBy: {
    friendlyName: 'Last updated by', 
    description: 'The person who last updated the row.', 
    type: 'number', 
    model: 'user', 
    process: { updatedBy: true,  }, 
    database: { }, 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  fullName: {
    type: 'string', 
    description: 'Full representation of the user's name.', 
    example: 'Mary Sue van der McHenst', 
    input: {
      required: true, 
      placeholder: 'Please enter the persons full name', 
      class: 'form-control', 
      type: 'text', 
      }, 
    friendlyName: 'Full name', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  emailAddress: {
    type: 'string', 
    friendlyName: 'Email address', 
    database: { }, 
    process: { }, 
    description: 'Email address', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  password: {
    type: 'string', 
    description: 'Securely hashed representation of the user's login password.', 
    permission: '#superuser#', 
    example: '2$28a8eabna301089103-13948134nad', 
    friendlyName: 'Password', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    }, 
  salt: {
    type: 'string', 
    permission: '#superuser#', 
    friendlyName: 'Salt', 
    database: { }, 
    process: { }, 
    description: 'Salt', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    }, 
  forgottenPasswordToken: {
    permission: '#superuser#', 
    type: 'string', 
    friendlyName: 'Forgotten password token', 
    database: { }, 
    process: { }, 
    description: 'Forgotten password token', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    }, 
  forgottenPasswordExpire: {
    permission: '#superuser#', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Forgotten password expire', 
    process: { }, 
    description: 'Forgotten password expire', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: false, 
    canView: false, 
    }, 
  isSuperAdmin: {
    type: 'boolean', 
    description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
    friendlyName: 'Is super admin', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'checkbox',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSeenAt: {
    type: 'number', 
    description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
    example: 1502844074211, 
    input: { type: 'date',  class: 'form-control',  }, 
    display: { type: 'date',  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Last seen at', 
    process: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  streetAddress: {
    type: 'string', 
    input: {
      type: 'textarea', 
      rows: 5, 
      cols: 60, 
      placeholder: 'Please enter the street address of the user', 
      class: 'form-control', 
      }, 
    friendlyName: 'Street address', 
    database: { }, 
    process: { }, 
    description: 'Street address', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  zip: {
    type: 'string', 
    friendlyName: 'Zip', 
    database: { }, 
    process: { }, 
    description: 'Zip', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  country: {
    type: 'string', 
    friendlyName: 'Country', 
    database: { }, 
    process: { }, 
    description: 'Country', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  region: {
    description: 'This is an example of a select using the data in the isIn attribute.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: [
        'Europe', 
        'Middle East', 
        'Africa', 
        'South Asia', 
        'East', 
        'N America', 
        'S America', 
        ], 
      class: 'form-control', 
      }, 
    friendlyName: 'Region', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  permission: {
    friendlyName: 'Permission set', 
    type: 'string', 
    description: 'Permission set.', 
    extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
    allowNull: true, 
    input: {
      type: 'select', 
      values: Function, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  isOrg: {
    friendlyName: 'Person or Business?', 
    type: 'string', 
    description: 'This record describes a business rather than a person', 
    input: {
      type: 'radio', 
      values: { P: 'Person',  B: 'Business/Organisation',  }, 
      required: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  business: {
    type: 'string', 
    description: 'Description of the customer's business', 
    friendlyName: 'The type of business.', 
    input: {
      type: 'textarea', 
      rows: 3, 
      cols: 60, 
      placeholder: 'Please enter a description of the user's business and place in the organisation', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  organisation: {
    friendlyName: 'Organisation', 
    model: 'user', 
    description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
    input: {
      type: 'select', 
      search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  userType: {
    description: 'The type of user.  Customer/Supplier or in-house.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: {
        L: 'Sales lead', 
        P: 'Prospect', 
        C: 'Customer', 
        S: 'Supplier', 
        I: 'In-house staff', 
        N: 'No longer considered a prospect', 
        O: 'Other', 
        }, 
      required: true, 
      class: 'form-control', 
      }, 
    friendlyName: 'User type', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastContact: {
    model: 'contacts', 
    child: false, 
    friendlyName: 'Last contact', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Last contact', 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextActionDate: {
    friendlyName: 'Next action date', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
    input: {
      type: 'date', 
      hidden: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextAction: {
    friendlyName: 'Next action', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'text', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mobilePhone: {
    type: 'string', 
    friendlyName: 'Mobile phone', 
    database: { }, 
    process: { }, 
    description: 'Mobile phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mainPhone: {
    type: 'string', 
    friendlyName: 'Main phone', 
    database: { }, 
    process: { }, 
    description: 'Main phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSale: {
    type: 'number', 
    model: 'salesorders', 
    friendlyName: 'Last sale', 
    description: 'Created automatically. This is a link to the last sales order.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  notes: {
    type: 'string', 
    friendlyName: 'Notes', 
    input: {
      type: 'textarea', 
      rows: 6, 
      cols: 60, 
      placeholder: 'Please enter any notes about this user.', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Notes', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  webpages: {
    collection: 'webpages', 
    via: 'author', 
    friendlyName: 'Webpages', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'webpages' via column 'author'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: false, 
    permission: { all: [ 'admin',  'web',  ],  }, 
    }, 
  contacts: {
    collection: 'contacts', 
    via: 'user', 
    collectionList: {
      limit: 5, 
      order: 'date', 
      direction: 'DESC', 
      heading: 'Recent contacts', 
      columns: [ 'id',  'date',  'notes',  'closed',  ], 
      addChildTip: 'Add a new contact for this user.', 
      }, 
    friendlyName: 'Contacts', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'contacts' via column 'user'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salesorders: {
    collection: 'salesorders', 
    via: 'customer', 
    collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
    friendlyName: 'Salesorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'salesorders' via column 'customer'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  products: {
    collection: 'products', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'price',  'class',  'description',  ], 
      }, 
    friendlyName: 'Products', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'products' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  purchaseorders: {
    collection: 'purchaseorders', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'date',  'status',  'notes',  ], 
      }, 
    friendlyName: 'Purchaseorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: false, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  people: {
    friendlyName: 'Associated people', 
    collection: 'user', 
    via: 'organisation', 
    collectionList: {
      columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
      }, 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'user' via column 'organisation'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  }, 
}

------------------------------------------------------------
invert-groups.js:5:9 -> 0.205 seconds - level verbose  
{
inputs: {
  0: {
    friendlyName: 'Users', 
    description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
    permission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
    addRow: 'Add a new user', 
    rowTitle: Function, 
    list: {
      columns: [
        'id', 
        'fullName', 
        'emailAddress', 
        'userType', 
        'organisation', 
        ], 
      }, 
    groups: {
      basics: {
        static: true, 
        open: 'none', 
        columns: [
          'fullName', 
          'emailAddress', 
          'userType', 
          'isOrg', 
          ], 
        }, 
      profile: {
        friendlyName: 'profile', 
        open: 'none', 
        columns: [ 'organisation',  'business',  'notes',  ], 
        }, 
      location: {
        friendlyName: 'How to contact', 
        open: 'none', 
        columns: [
          'streetAddress', 
          'zip', 
          'country', 
          'region', 
          'mainPhone', 
          'mobilePhone', 
          ], 
        }, 
      contacts: {
        friendlyName: 'Contacts', 
        open: 'contacts', 
        columns: [
          'people', 
          'contacts', 
          'lastContact', 
          'nextAction', 
          'nextActionDate', 
          ], 
        }, 
      sales: {
        friendlyName: 'Sales', 
        open: 'salesorders', 
        columns: [ 'salesorders',  'lastSale',  ], 
        permission: { all: [ 'admin',  'sales',  ],  }, 
        }, 
      products: {
        friendlyName: 'Products supplied', 
        open: 'products', 
        columns: [ 'products',  'purchaseorders',  ], 
        permission: {
          all: [ 'admin',  'purchasing',  ], 
          view: [ 'sales',  ], 
          }, 
        }, 
      website: {
        friendlyName: 'Website', 
        open: 'website', 
        columns: [ 'webpages',  ], 
        permission: { all: [ 'admin',  'web',  ],  }, 
        }, 
      other: {
        friendlyName: 'Other', 
        columns: [
          'id', 
          'createdAt', 
          'updatedAt', 
          'updatedBy', 
          'password', 
          'salt', 
          'forgottenPasswordToken', 
          'forgottenPasswordExpire', 
          'isSuperAdmin', 
          'lastSeenAt', 
          'permission', 
          ], 
        }, 
      }, 
    attributes: {
      id: {
        friendlyName: 'User No', 
        type: 'number', 
        primaryKey: true, 
        autoincrement: true, 
        database: { }, 
        process: { }, 
        description: 'User No', 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      createdAt: {
        friendlyName: 'Date created', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        process: { createdAt: true,  }, 
        description: 'Date created', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      updatedAt: {
        friendlyName: 'Date last updated', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        process: { updatedAt: true,  }, 
        description: 'Date last updated', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      updatedBy: {
        friendlyName: 'Last updated by', 
        description: 'The person who last updated the row.', 
        type: 'number', 
        model: 'user', 
        process: { updatedBy: true,  }, 
        database: { }, 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      fullName: {
        type: 'string', 
        description: 'Full representation of the user's name.', 
        example: 'Mary Sue van der McHenst', 
        input: {
          required: true, 
          placeholder: 'Please enter the persons full name', 
          class: 'form-control', 
          type: 'text', 
          }, 
        friendlyName: 'Full name', 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      emailAddress: {
        type: 'string', 
        friendlyName: 'Email address', 
        database: { }, 
        process: { }, 
        description: 'Email address', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      password: {
        type: 'string', 
        description: 'Securely hashed representation of the user's login password.', 
        permission: '#superuser#', 
        example: '2$28a8eabna301089103-13948134nad', 
        friendlyName: 'Password', 
        database: { }, 
        process: { }, 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: false, 
        canView: false, 
        }, 
      salt: {
        type: 'string', 
        permission: '#superuser#', 
        friendlyName: 'Salt', 
        database: { }, 
        process: { }, 
        description: 'Salt', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: false, 
        canView: false, 
        }, 
      forgottenPasswordToken: {
        permission: '#superuser#', 
        type: 'string', 
        friendlyName: 'Forgotten password token', 
        database: { }, 
        process: { }, 
        description: 'Forgotten password token', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: false, 
        canView: false, 
        }, 
      forgottenPasswordExpire: {
        permission: '#superuser#', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        friendlyName: 'Forgotten password expire', 
        process: { }, 
        description: 'Forgotten password expire', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: false, 
        canView: false, 
        }, 
      isSuperAdmin: {
        type: 'boolean', 
        description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
        friendlyName: 'Is super admin', 
        database: { }, 
        process: { }, 
        input: { class: 'form-control',  type: 'checkbox',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      lastSeenAt: {
        type: 'number', 
        description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
        example: 1502844074211, 
        input: { type: 'date',  class: 'form-control',  }, 
        display: { type: 'date',  }, 
        database: { type: 'biginteger',  }, 
        friendlyName: 'Last seen at', 
        process: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      streetAddress: {
        type: 'string', 
        input: {
          type: 'textarea', 
          rows: 5, 
          cols: 60, 
          placeholder: 'Please enter the street address of the user', 
          class: 'form-control', 
          }, 
        friendlyName: 'Street address', 
        database: { }, 
        process: { }, 
        description: 'Street address', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      zip: {
        type: 'string', 
        friendlyName: 'Zip', 
        database: { }, 
        process: { }, 
        description: 'Zip', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      country: {
        type: 'string', 
        friendlyName: 'Country', 
        database: { }, 
        process: { }, 
        description: 'Country', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      region: {
        description: 'This is an example of a select using the data in the isIn attribute.', 
        type: 'string', 
        input: {
          type: 'select', 
          values: [
            'Europe', 
            'Middle East', 
            'Africa', 
            'South Asia', 
            'East', 
            'N America', 
            'S America', 
            ], 
          class: 'form-control', 
          }, 
        friendlyName: 'Region', 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      permission: {
        friendlyName: 'Permission set', 
        type: 'string', 
        description: 'Permission set.', 
        extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
        allowNull: true, 
        input: {
          type: 'select', 
          values: Function, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      isOrg: {
        friendlyName: 'Person or Business?', 
        type: 'string', 
        description: 'This record describes a business rather than a person', 
        input: {
          type: 'radio', 
          values: { P: 'Person',  B: 'Business/Organisation',  }, 
          required: true, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      business: {
        type: 'string', 
        description: 'Description of the customer's business', 
        friendlyName: 'The type of business.', 
        input: {
          type: 'textarea', 
          rows: 3, 
          cols: 60, 
          placeholder: 'Please enter a description of the user's business and place in the organisation', 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      organisation: {
        friendlyName: 'Organisation', 
        model: 'user', 
        description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
        input: {
          type: 'select', 
          search: { searches: [ [Deeper Object below level 8],  ],  }, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        type: 'number', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      userType: {
        description: 'The type of user.  Customer/Supplier or in-house.', 
        type: 'string', 
        input: {
          type: 'select', 
          values: {
            L: 'Sales lead', 
            P: 'Prospect', 
            C: 'Customer', 
            S: 'Supplier', 
            I: 'In-house staff', 
            N: 'No longer considered a prospect', 
            O: 'Other', 
            }, 
          required: true, 
          class: 'form-control', 
          }, 
        friendlyName: 'User type', 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      lastContact: {
        model: 'contacts', 
        child: false, 
        friendlyName: 'Last contact', 
        input: {
          hidden: true, 
          class: 'form-control', 
          type: 'number', 
          }, 
        database: { }, 
        process: { }, 
        description: 'Last contact', 
        type: 'number', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      nextActionDate: {
        friendlyName: 'Next action date', 
        type: 'string', 
        description: 'When a contact is entered, this is updated.', 
        extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
        input: {
          type: 'date', 
          hidden: true, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      nextAction: {
        friendlyName: 'Next action', 
        type: 'string', 
        description: 'When a contact is entered, this is updated.', 
        extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
        input: {
          hidden: true, 
          class: 'form-control', 
          type: 'text', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      mobilePhone: {
        type: 'string', 
        friendlyName: 'Mobile phone', 
        database: { }, 
        process: { }, 
        description: 'Mobile phone', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      mainPhone: {
        type: 'string', 
        friendlyName: 'Main phone', 
        database: { }, 
        process: { }, 
        description: 'Main phone', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      lastSale: {
        type: 'number', 
        model: 'salesorders', 
        friendlyName: 'Last sale', 
        description: 'Created automatically. This is a link to the last sales order.', 
        input: {
          hidden: true, 
          class: 'form-control', 
          type: 'number', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: { all: [ 'admin',  'sales',  ],  }, 
        }, 
      notes: {
        type: 'string', 
        friendlyName: 'Notes', 
        input: {
          type: 'textarea', 
          rows: 6, 
          cols: 60, 
          placeholder: 'Please enter any notes about this user.', 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        description: 'Notes', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      webpages: {
        collection: 'webpages', 
        via: 'author', 
        friendlyName: 'Webpages', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'webpages' via column 'author'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: false, 
        canView: false, 
        permission: { all: [ 'admin',  'web',  ],  }, 
        }, 
      contacts: {
        collection: 'contacts', 
        via: 'user', 
        collectionList: {
          limit: 5, 
          order: 'date', 
          direction: 'DESC', 
          heading: 'Recent contacts', 
          columns: [ 'id',  'date',  'notes',  'closed',  ], 
          addChildTip: 'Add a new contact for this user.', 
          }, 
        friendlyName: 'Contacts', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'contacts' via column 'user'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      salesorders: {
        collection: 'salesorders', 
        via: 'customer', 
        collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
        friendlyName: 'Salesorders', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'salesorders' via column 'customer'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: { all: [ 'admin',  'sales',  ],  }, 
        }, 
      products: {
        collection: 'products', 
        via: 'supplier', 
        collectionList: {
          columns: [ 'name',  'price',  'class',  'description',  ], 
          }, 
        friendlyName: 'Products', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'products' via column 'supplier'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: false, 
        canView: true, 
        permission: {
          all: [ 'admin',  'purchasing',  ], 
          view: [ 'sales',  ], 
          }, 
        }, 
      purchaseorders: {
        collection: 'purchaseorders', 
        via: 'supplier', 
        collectionList: {
          columns: [ 'name',  'date',  'status',  'notes',  ], 
          }, 
        friendlyName: 'Purchaseorders', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: false, 
        canView: true, 
        permission: {
          all: [ 'admin',  'purchasing',  ], 
          view: [ 'sales',  ], 
          }, 
        }, 
      people: {
        friendlyName: 'Associated people', 
        collection: 'user', 
        via: 'organisation', 
        collectionList: {
          columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
          }, 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'user' via column 'organisation'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      }, 
    }, 
  1: {
    id: {
      friendlyName: 'User No', 
      type: 'number', 
      primaryKey: true, 
      autoincrement: true, 
      database: { }, 
      process: { }, 
      description: 'User No', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    createdAt: {
      friendlyName: 'Date created', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { createdAt: true,  }, 
      description: 'Date created', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedAt: {
      friendlyName: 'Date last updated', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { updatedAt: true,  }, 
      description: 'Date last updated', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedBy: {
      friendlyName: 'Last updated by', 
      description: 'The person who last updated the row.', 
      type: 'number', 
      model: 'user', 
      process: { updatedBy: true,  }, 
      database: { }, 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    fullName: {
      type: 'string', 
      description: 'Full representation of the user's name.', 
      example: 'Mary Sue van der McHenst', 
      input: {
        required: true, 
        placeholder: 'Please enter the persons full name', 
        class: 'form-control', 
        type: 'text', 
        }, 
      friendlyName: 'Full name', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    emailAddress: {
      type: 'string', 
      friendlyName: 'Email address', 
      database: { }, 
      process: { }, 
      description: 'Email address', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    password: {
      type: 'string', 
      description: 'Securely hashed representation of the user's login password.', 
      permission: '#superuser#', 
      example: '2$28a8eabna301089103-13948134nad', 
      friendlyName: 'Password', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      }, 
    salt: {
      type: 'string', 
      permission: '#superuser#', 
      friendlyName: 'Salt', 
      database: { }, 
      process: { }, 
      description: 'Salt', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      }, 
    forgottenPasswordToken: {
      permission: '#superuser#', 
      type: 'string', 
      friendlyName: 'Forgotten password token', 
      database: { }, 
      process: { }, 
      description: 'Forgotten password token', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      }, 
    forgottenPasswordExpire: {
      permission: '#superuser#', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Forgotten password expire', 
      process: { }, 
      description: 'Forgotten password expire', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: false, 
      canView: false, 
      }, 
    isSuperAdmin: {
      type: 'boolean', 
      description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
      friendlyName: 'Is super admin', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'checkbox',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSeenAt: {
      type: 'number', 
      description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
      example: 1502844074211, 
      input: { type: 'date',  class: 'form-control',  }, 
      display: { type: 'date',  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Last seen at', 
      process: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    streetAddress: {
      type: 'string', 
      input: {
        type: 'textarea', 
        rows: 5, 
        cols: 60, 
        placeholder: 'Please enter the street address of the user', 
        class: 'form-control', 
        }, 
      friendlyName: 'Street address', 
      database: { }, 
      process: { }, 
      description: 'Street address', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    zip: {
      type: 'string', 
      friendlyName: 'Zip', 
      database: { }, 
      process: { }, 
      description: 'Zip', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    country: {
      type: 'string', 
      friendlyName: 'Country', 
      database: { }, 
      process: { }, 
      description: 'Country', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    region: {
      description: 'This is an example of a select using the data in the isIn attribute.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: [
          'Europe', 
          'Middle East', 
          'Africa', 
          'South Asia', 
          'East', 
          'N America', 
          'S America', 
          ], 
        class: 'form-control', 
        }, 
      friendlyName: 'Region', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    permission: {
      friendlyName: 'Permission set', 
      type: 'string', 
      description: 'Permission set.', 
      extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
      allowNull: true, 
      input: {
        type: 'select', 
        values: Function, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    isOrg: {
      friendlyName: 'Person or Business?', 
      type: 'string', 
      description: 'This record describes a business rather than a person', 
      input: {
        type: 'radio', 
        values: { P: 'Person',  B: 'Business/Organisation',  }, 
        required: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    business: {
      type: 'string', 
      description: 'Description of the customer's business', 
      friendlyName: 'The type of business.', 
      input: {
        type: 'textarea', 
        rows: 3, 
        cols: 60, 
        placeholder: 'Please enter a description of the user's business and place in the organisation', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    organisation: {
      friendlyName: 'Organisation', 
      model: 'user', 
      description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
      input: {
        type: 'select', 
        search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    userType: {
      description: 'The type of user.  Customer/Supplier or in-house.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: {
          L: 'Sales lead', 
          P: 'Prospect', 
          C: 'Customer', 
          S: 'Supplier', 
          I: 'In-house staff', 
          N: 'No longer considered a prospect', 
          O: 'Other', 
          }, 
        required: true, 
        class: 'form-control', 
        }, 
      friendlyName: 'User type', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastContact: {
      model: 'contacts', 
      child: false, 
      friendlyName: 'Last contact', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Last contact', 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextActionDate: {
      friendlyName: 'Next action date', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
      input: {
        type: 'date', 
        hidden: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextAction: {
      friendlyName: 'Next action', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'text', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mobilePhone: {
      type: 'string', 
      friendlyName: 'Mobile phone', 
      database: { }, 
      process: { }, 
      description: 'Mobile phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mainPhone: {
      type: 'string', 
      friendlyName: 'Main phone', 
      database: { }, 
      process: { }, 
      description: 'Main phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSale: {
      type: 'number', 
      model: 'salesorders', 
      friendlyName: 'Last sale', 
      description: 'Created automatically. This is a link to the last sales order.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    notes: {
      type: 'string', 
      friendlyName: 'Notes', 
      input: {
        type: 'textarea', 
        rows: 6, 
        cols: 60, 
        placeholder: 'Please enter any notes about this user.', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Notes', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    webpages: {
      collection: 'webpages', 
      via: 'author', 
      friendlyName: 'Webpages', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'webpages' via column 'author'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: false, 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    contacts: {
      collection: 'contacts', 
      via: 'user', 
      collectionList: {
        limit: 5, 
        order: 'date', 
        direction: 'DESC', 
        heading: 'Recent contacts', 
        columns: [ 'id',  'date',  'notes',  'closed',  ], 
        addChildTip: 'Add a new contact for this user.', 
        }, 
      friendlyName: 'Contacts', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'contacts' via column 'user'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salesorders: {
      collection: 'salesorders', 
      via: 'customer', 
      collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
      friendlyName: 'Salesorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'salesorders' via column 'customer'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      collection: 'products', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'price',  'class',  'description',  ], 
        }, 
      friendlyName: 'Products', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'products' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    purchaseorders: {
      collection: 'purchaseorders', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'date',  'status',  'notes',  ], 
        }, 
      friendlyName: 'Purchaseorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: false, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    people: {
      friendlyName: 'Associated people', 
      collection: 'user', 
      via: 'organisation', 
      collectionList: {
        columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
        }, 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'user' via column 'organisation'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    }, 
  }, 
}

------------------------------------------------------------
invert-groups.js:16:9 -> 0.206 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
invert-groups.js:18:11 -> 0.206 seconds - level verbose  
'basics'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.206 seconds - level verbose  
'profile'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.206 seconds - level verbose  
'location'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.206 seconds - level verbose  
'contacts'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.206 seconds - level verbose  
'sales'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.206 seconds - level verbose  
'products'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.206 seconds - level verbose  
'website'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.206 seconds - level verbose  
'other'

------------------------------------------------------------
invert-groups.js:31:9 -> 0.206 seconds - level verbose  
{
fullName: 'basics', 
emailAddress: 'basics', 
userType: 'basics', 
isOrg: 'basics', 
organisation: 'profile', 
business: 'profile', 
notes: 'profile', 
streetAddress: 'location', 
zip: 'location', 
country: 'location', 
region: 'location', 
mainPhone: 'location', 
mobilePhone: 'location', 
people: 'contacts', 
contacts: 'contacts', 
lastContact: 'contacts', 
nextAction: 'contacts', 
nextActionDate: 'contacts', 
salesorders: 'sales', 
lastSale: 'sales', 
products: 'products', 
purchaseorders: 'products', 
webpages: 'website', 
id: 'other', 
createdAt: 'other', 
updatedAt: 'other', 
updatedBy: 'other', 
password: 'other', 
salt: 'other', 
forgottenPasswordToken: 'other', 
forgottenPasswordExpire: 'other', 
isSuperAdmin: 'other', 
lastSeenAt: 'other', 
permission: 'other', 
}

------------------------------------------------------------
merge-attributes.js:26:9 -> 0.206 seconds - level verbose  
{
fullName: 'basics', 
emailAddress: 'basics', 
userType: 'basics', 
isOrg: 'basics', 
organisation: 'profile', 
business: 'profile', 
notes: 'profile', 
streetAddress: 'location', 
zip: 'location', 
country: 'location', 
region: 'location', 
mainPhone: 'location', 
mobilePhone: 'location', 
people: 'contacts', 
contacts: 'contacts', 
lastContact: 'contacts', 
nextAction: 'contacts', 
nextActionDate: 'contacts', 
salesorders: 'sales', 
lastSale: 'sales', 
products: 'products', 
purchaseorders: 'products', 
webpages: 'website', 
id: 'other', 
createdAt: 'other', 
updatedAt: 'other', 
updatedBy: 'other', 
password: 'other', 
salt: 'other', 
forgottenPasswordToken: 'other', 
forgottenPasswordExpire: 'other', 
isSuperAdmin: 'other', 
lastSeenAt: 'other', 
permission: 'other', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.206 seconds - level verbose  
{ key: 'id',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.206 seconds - level verbose  
{
key: 'id', 
type: {
  friendlyName: 'User No', 
  type: 'number', 
  primaryKey: true, 
  autoincrement: true, 
  database: { }, 
  process: { }, 
  description: 'User No', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.206 seconds - level verbose  
{ key: 'id',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.206 seconds - level verbose  
{
key: 'id', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.206 seconds - level verbose  
{ key: 'createdAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.207 seconds - level verbose  
{
key: 'createdAt', 
type: {
  friendlyName: 'Date created', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { createdAt: true,  }, 
  description: 'Date created', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.207 seconds - level verbose  
{ key: 'createdAt',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.207 seconds - level verbose  
{
key: 'createdAt', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.209 seconds - level verbose  
{ key: 'updatedAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.209 seconds - level verbose  
{
key: 'updatedAt', 
type: {
  friendlyName: 'Date last updated', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { updatedAt: true,  }, 
  description: 'Date last updated', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.209 seconds - level verbose  
{ key: 'updatedAt',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.209 seconds - level verbose  
{
key: 'updatedAt', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.209 seconds - level verbose  
{ key: 'updatedBy',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.210 seconds - level verbose  
{
key: 'updatedBy', 
type: {
  friendlyName: 'Last updated by', 
  description: 'The person who last updated the row.', 
  type: 'number', 
  model: 'user', 
  process: { updatedBy: true,  }, 
  database: { }, 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.210 seconds - level verbose  
{ key: 'updatedBy',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.210 seconds - level verbose  
{
key: 'updatedBy', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.210 seconds - level verbose  
{ key: 'fullName',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.210 seconds - level verbose  
{
key: 'fullName', 
type: {
  type: 'string', 
  description: 'Full representation of the user's name.', 
  example: 'Mary Sue van der McHenst', 
  input: {
    required: true, 
    placeholder: 'Please enter the persons full name', 
    class: 'form-control', 
    type: 'text', 
    }, 
  friendlyName: 'Full name', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.210 seconds - level verbose  
{ key: 'fullName',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.210 seconds - level verbose  
{
key: 'fullName', 
group: 'basics', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.210 seconds - level verbose  
{ key: 'emailAddress',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.210 seconds - level verbose  
{
key: 'emailAddress', 
type: {
  type: 'string', 
  friendlyName: 'Email address', 
  database: { }, 
  process: { }, 
  description: 'Email address', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.210 seconds - level verbose  
{ key: 'emailAddress',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.210 seconds - level verbose  
{
key: 'emailAddress', 
group: 'basics', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.210 seconds - level verbose  
{ key: 'password',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.210 seconds - level verbose  
{
key: 'password', 
type: {
  type: 'string', 
  description: 'Securely hashed representation of the user's login password.', 
  permission: '#superuser#', 
  example: '2$28a8eabna301089103-13948134nad', 
  friendlyName: 'Password', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.210 seconds - level verbose  
{ key: 'password',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.210 seconds - level verbose  
{
key: 'password', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.210 seconds - level verbose  
{ key: 'salt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.211 seconds - level verbose  
{
key: 'salt', 
type: {
  type: 'string', 
  permission: '#superuser#', 
  friendlyName: 'Salt', 
  database: { }, 
  process: { }, 
  description: 'Salt', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.211 seconds - level verbose  
{ key: 'salt',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.211 seconds - level verbose  
{
key: 'salt', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.211 seconds - level verbose  
{ key: 'forgottenPasswordToken',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.211 seconds - level verbose  
{
key: 'forgottenPasswordToken', 
type: {
  permission: '#superuser#', 
  type: 'string', 
  friendlyName: 'Forgotten password token', 
  database: { }, 
  process: { }, 
  description: 'Forgotten password token', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.211 seconds - level verbose  
{ key: 'forgottenPasswordToken',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.211 seconds - level verbose  
{
key: 'forgottenPasswordToken', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.211 seconds - level verbose  
{ key: 'forgottenPasswordExpire',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.211 seconds - level verbose  
{
key: 'forgottenPasswordExpire', 
type: {
  permission: '#superuser#', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Forgotten password expire', 
  process: { }, 
  description: 'Forgotten password expire', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: false, 
  canView: false, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.211 seconds - level verbose  
{ key: 'forgottenPasswordExpire',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.211 seconds - level verbose  
{
key: 'forgottenPasswordExpire', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.211 seconds - level verbose  
{ key: 'isSuperAdmin',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.211 seconds - level verbose  
{
key: 'isSuperAdmin', 
type: {
  type: 'boolean', 
  description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
  friendlyName: 'Is super admin', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'checkbox',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.211 seconds - level verbose  
{ key: 'isSuperAdmin',  type: 'checkbox',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.211 seconds - level verbose  
{
key: 'isSuperAdmin', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.211 seconds - level verbose  
{ key: 'lastSeenAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.212 seconds - level verbose  
{
key: 'lastSeenAt', 
type: {
  type: 'number', 
  description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
  example: 1502844074211, 
  input: { type: 'date',  class: 'form-control',  }, 
  display: { type: 'date',  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Last seen at', 
  process: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.212 seconds - level verbose  
{ key: 'lastSeenAt',  type: 'date',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.212 seconds - level verbose  
{
key: 'lastSeenAt', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.212 seconds - level verbose  
{ key: 'streetAddress',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.212 seconds - level verbose  
{
key: 'streetAddress', 
type: {
  type: 'string', 
  input: {
    type: 'textarea', 
    rows: 5, 
    cols: 60, 
    placeholder: 'Please enter the street address of the user', 
    class: 'form-control', 
    }, 
  friendlyName: 'Street address', 
  database: { }, 
  process: { }, 
  description: 'Street address', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.212 seconds - level verbose  
{ key: 'streetAddress',  type: 'textarea',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.212 seconds - level verbose  
{
key: 'streetAddress', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.212 seconds - level verbose  
{ key: 'zip',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.212 seconds - level verbose  
{
key: 'zip', 
type: {
  type: 'string', 
  friendlyName: 'Zip', 
  database: { }, 
  process: { }, 
  description: 'Zip', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.212 seconds - level verbose  
{ key: 'zip',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.212 seconds - level verbose  
{
key: 'zip', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.212 seconds - level verbose  
{ key: 'country',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.212 seconds - level verbose  
{
key: 'country', 
type: {
  type: 'string', 
  friendlyName: 'Country', 
  database: { }, 
  process: { }, 
  description: 'Country', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.213 seconds - level verbose  
{ key: 'country',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.213 seconds - level verbose  
{
key: 'country', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.213 seconds - level verbose  
{ key: 'region',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.213 seconds - level verbose  
{
key: 'region', 
type: {
  description: 'This is an example of a select using the data in the isIn attribute.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: [
      'Europe', 
      'Middle East', 
      'Africa', 
      'South Asia', 
      'East', 
      'N America', 
      'S America', 
      ], 
    class: 'form-control', 
    }, 
  friendlyName: 'Region', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.213 seconds - level verbose  
{ key: 'region',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.213 seconds - level verbose  
{
key: 'region', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.213 seconds - level verbose  
{ key: 'permission',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.213 seconds - level verbose  
{
key: 'permission', 
type: {
  friendlyName: 'Permission set', 
  type: 'string', 
  description: 'Permission set.', 
  extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
  allowNull: true, 
  input: {
    type: 'select', 
    values: Function, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.213 seconds - level verbose  
{ key: 'permission',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.213 seconds - level verbose  
{
key: 'permission', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.213 seconds - level verbose  
{ key: 'isOrg',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.213 seconds - level verbose  
{
key: 'isOrg', 
type: {
  friendlyName: 'Person or Business?', 
  type: 'string', 
  description: 'This record describes a business rather than a person', 
  input: {
    type: 'radio', 
    values: { P: 'Person',  B: 'Business/Organisation',  }, 
    required: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.213 seconds - level verbose  
{ key: 'isOrg',  type: 'radio',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.213 seconds - level verbose  
{
key: 'isOrg', 
group: 'basics', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.213 seconds - level verbose  
{ key: 'business',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.213 seconds - level verbose  
{
key: 'business', 
type: {
  type: 'string', 
  description: 'Description of the customer's business', 
  friendlyName: 'The type of business.', 
  input: {
    type: 'textarea', 
    rows: 3, 
    cols: 60, 
    placeholder: 'Please enter a description of the user's business and place in the organisation', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.214 seconds - level verbose  
{ key: 'business',  type: 'textarea',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.214 seconds - level verbose  
{
key: 'business', 
group: 'profile', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.214 seconds - level verbose  
{ key: 'organisation',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.214 seconds - level verbose  
{
key: 'organisation', 
type: {
  friendlyName: 'Organisation', 
  model: 'user', 
  description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
  input: {
    type: 'select', 
    search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.214 seconds - level verbose  
{ key: 'organisation',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.214 seconds - level verbose  
{
key: 'organisation', 
group: 'profile', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.214 seconds - level verbose  
{ key: 'userType',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.214 seconds - level verbose  
{
key: 'userType', 
type: {
  description: 'The type of user.  Customer/Supplier or in-house.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: {
      L: 'Sales lead', 
      P: 'Prospect', 
      C: 'Customer', 
      S: 'Supplier', 
      I: 'In-house staff', 
      N: 'No longer considered a prospect', 
      O: 'Other', 
      }, 
    required: true, 
    class: 'form-control', 
    }, 
  friendlyName: 'User type', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.214 seconds - level verbose  
{ key: 'userType',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.214 seconds - level verbose  
{
key: 'userType', 
group: 'basics', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.214 seconds - level verbose  
{ key: 'lastContact',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.214 seconds - level verbose  
{
key: 'lastContact', 
type: {
  model: 'contacts', 
  child: false, 
  friendlyName: 'Last contact', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Last contact', 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.214 seconds - level verbose  
{ key: 'lastContact',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.214 seconds - level verbose  
{
key: 'lastContact', 
group: 'contacts', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.214 seconds - level verbose  
{ key: 'nextActionDate',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.215 seconds - level verbose  
{
key: 'nextActionDate', 
type: {
  friendlyName: 'Next action date', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
  input: {
    type: 'date', 
    hidden: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.215 seconds - level verbose  
{ key: 'nextActionDate',  type: 'date',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.215 seconds - level verbose  
{
key: 'nextActionDate', 
group: 'contacts', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.215 seconds - level verbose  
{ key: 'nextAction',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.215 seconds - level verbose  
{
key: 'nextAction', 
type: {
  friendlyName: 'Next action', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'text', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.215 seconds - level verbose  
{ key: 'nextAction',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.215 seconds - level verbose  
{
key: 'nextAction', 
group: 'contacts', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.215 seconds - level verbose  
{ key: 'mobilePhone',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.215 seconds - level verbose  
{
key: 'mobilePhone', 
type: {
  type: 'string', 
  friendlyName: 'Mobile phone', 
  database: { }, 
  process: { }, 
  description: 'Mobile phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.215 seconds - level verbose  
{ key: 'mobilePhone',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.215 seconds - level verbose  
{
key: 'mobilePhone', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.215 seconds - level verbose  
{ key: 'mainPhone',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.215 seconds - level verbose  
{
key: 'mainPhone', 
type: {
  type: 'string', 
  friendlyName: 'Main phone', 
  database: { }, 
  process: { }, 
  description: 'Main phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.215 seconds - level verbose  
{ key: 'mainPhone',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.215 seconds - level verbose  
{
key: 'mainPhone', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.215 seconds - level verbose  
{ key: 'lastSale',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.216 seconds - level verbose  
{
key: 'lastSale', 
type: {
  type: 'number', 
  model: 'salesorders', 
  friendlyName: 'Last sale', 
  description: 'Created automatically. This is a link to the last sales order.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.216 seconds - level verbose  
{ key: 'lastSale',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.216 seconds - level verbose  
{
key: 'lastSale', 
group: 'sales', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.216 seconds - level verbose  
{ key: 'notes',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.216 seconds - level verbose  
{
key: 'notes', 
type: {
  type: 'string', 
  friendlyName: 'Notes', 
  input: {
    type: 'textarea', 
    rows: 6, 
    cols: 60, 
    placeholder: 'Please enter any notes about this user.', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Notes', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.216 seconds - level verbose  
{ key: 'notes',  type: 'textarea',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.216 seconds - level verbose  
{
key: 'notes', 
group: 'profile', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.216 seconds - level verbose  
{ key: 'webpages',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.216 seconds - level verbose  
{
key: 'webpages', 
type: {
  collection: 'webpages', 
  via: 'author', 
  friendlyName: 'Webpages', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'webpages' via column 'author'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: false, 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.216 seconds - level verbose  
{ key: 'webpages',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.216 seconds - level verbose  
{
key: 'webpages', 
group: 'website', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.216 seconds - level verbose  
{ key: 'contacts',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.216 seconds - level verbose  
{
key: 'contacts', 
type: {
  collection: 'contacts', 
  via: 'user', 
  collectionList: {
    limit: 5, 
    order: 'date', 
    direction: 'DESC', 
    heading: 'Recent contacts', 
    columns: [ 'id',  'date',  'notes',  'closed',  ], 
    addChildTip: 'Add a new contact for this user.', 
    }, 
  friendlyName: 'Contacts', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'contacts' via column 'user'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.216 seconds - level verbose  
{ key: 'contacts',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.216 seconds - level verbose  
{
key: 'contacts', 
group: 'contacts', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.216 seconds - level verbose  
{ key: 'salesorders',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.217 seconds - level verbose  
{
key: 'salesorders', 
type: {
  collection: 'salesorders', 
  via: 'customer', 
  collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
  friendlyName: 'Salesorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'salesorders' via column 'customer'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.217 seconds - level verbose  
{ key: 'salesorders',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.217 seconds - level verbose  
{
key: 'salesorders', 
group: 'sales', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.217 seconds - level verbose  
{ key: 'products',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.217 seconds - level verbose  
{
key: 'products', 
type: {
  collection: 'products', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'price',  'class',  'description',  ], 
    }, 
  friendlyName: 'Products', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'products' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.217 seconds - level verbose  
{ key: 'products',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.217 seconds - level verbose  
{
key: 'products', 
group: 'products', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.217 seconds - level verbose  
{ key: 'purchaseorders',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.217 seconds - level verbose  
{
key: 'purchaseorders', 
type: {
  collection: 'purchaseorders', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'date',  'status',  'notes',  ], 
    }, 
  friendlyName: 'Purchaseorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: false, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.217 seconds - level verbose  
{ key: 'purchaseorders',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.217 seconds - level verbose  
{
key: 'purchaseorders', 
group: 'products', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.217 seconds - level verbose  
{ key: 'people',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.217 seconds - level verbose  
{
key: 'people', 
type: {
  friendlyName: 'Associated people', 
  collection: 'user', 
  via: 'organisation', 
  collectionList: {
    columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
    }, 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'user' via column 'organisation'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.217 seconds - level verbose  
{ key: 'people',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.217 seconds - level verbose  
{
key: 'people', 
group: 'contacts', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:162:9 -> 0.218 seconds - level verbose  
{
merged: {
  id: {
    friendlyName: 'User No', 
    type: 'number', 
    primaryKey: true, 
    autoincrement: true, 
    database: { }, 
    process: { }, 
    description: 'User No', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  createdAt: {
    friendlyName: 'Date created', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { createdAt: true,  }, 
    description: 'Date created', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedAt: {
    friendlyName: 'Date last updated', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { updatedAt: true,  }, 
    description: 'Date last updated', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedBy: {
    friendlyName: 'Last updated by', 
    description: 'The person who last updated the row.', 
    type: 'number', 
    model: 'user', 
    process: { updatedBy: true,  }, 
    database: { }, 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  fullName: {
    type: 'string', 
    description: 'Full representation of the user's name.', 
    example: 'Mary Sue van der McHenst', 
    input: {
      required: true, 
      placeholder: 'Please enter the persons full name', 
      class: 'form-control', 
      type: 'text', 
      }, 
    friendlyName: 'Full name', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  emailAddress: {
    type: 'string', 
    friendlyName: 'Email address', 
    database: { }, 
    process: { }, 
    description: 'Email address', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  password: {
    type: 'string', 
    description: 'Securely hashed representation of the user's login password.', 
    permission: '#superuser#', 
    example: '2$28a8eabna301089103-13948134nad', 
    friendlyName: 'Password', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salt: {
    type: 'string', 
    permission: '#superuser#', 
    friendlyName: 'Salt', 
    database: { }, 
    process: { }, 
    description: 'Salt', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  forgottenPasswordToken: {
    permission: '#superuser#', 
    type: 'string', 
    friendlyName: 'Forgotten password token', 
    database: { }, 
    process: { }, 
    description: 'Forgotten password token', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  forgottenPasswordExpire: {
    permission: '#superuser#', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Forgotten password expire', 
    process: { }, 
    description: 'Forgotten password expire', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  isSuperAdmin: {
    type: 'boolean', 
    description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
    friendlyName: 'Is super admin', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'checkbox',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSeenAt: {
    type: 'number', 
    description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
    example: 1502844074211, 
    input: { type: 'date',  class: 'form-control',  }, 
    display: { type: 'date',  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Last seen at', 
    process: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  streetAddress: {
    type: 'string', 
    input: {
      type: 'textarea', 
      rows: 5, 
      cols: 60, 
      placeholder: 'Please enter the street address of the user', 
      class: 'form-control', 
      }, 
    friendlyName: 'Street address', 
    database: { }, 
    process: { }, 
    description: 'Street address', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  zip: {
    type: 'string', 
    friendlyName: 'Zip', 
    database: { }, 
    process: { }, 
    description: 'Zip', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  country: {
    type: 'string', 
    friendlyName: 'Country', 
    database: { }, 
    process: { }, 
    description: 'Country', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  region: {
    description: 'This is an example of a select using the data in the isIn attribute.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: [
        'Europe', 
        'Middle East', 
        'Africa', 
        'South Asia', 
        'East', 
        'N America', 
        'S America', 
        ], 
      class: 'form-control', 
      }, 
    friendlyName: 'Region', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  permission: {
    friendlyName: 'Permission set', 
    type: 'string', 
    description: 'Permission set.', 
    extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
    allowNull: true, 
    input: {
      type: 'select', 
      values: Function, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  isOrg: {
    friendlyName: 'Person or Business?', 
    type: 'string', 
    description: 'This record describes a business rather than a person', 
    input: {
      type: 'radio', 
      values: { P: 'Person',  B: 'Business/Organisation',  }, 
      required: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  business: {
    type: 'string', 
    description: 'Description of the customer's business', 
    friendlyName: 'The type of business.', 
    input: {
      type: 'textarea', 
      rows: 3, 
      cols: 60, 
      placeholder: 'Please enter a description of the user's business and place in the organisation', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  organisation: {
    friendlyName: 'Organisation', 
    model: 'user', 
    description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
    input: {
      type: 'select', 
      search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  userType: {
    description: 'The type of user.  Customer/Supplier or in-house.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: {
        L: 'Sales lead', 
        P: 'Prospect', 
        C: 'Customer', 
        S: 'Supplier', 
        I: 'In-house staff', 
        N: 'No longer considered a prospect', 
        O: 'Other', 
        }, 
      required: true, 
      class: 'form-control', 
      }, 
    friendlyName: 'User type', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastContact: {
    model: 'contacts', 
    child: false, 
    friendlyName: 'Last contact', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Last contact', 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextActionDate: {
    friendlyName: 'Next action date', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
    input: {
      type: 'date', 
      hidden: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextAction: {
    friendlyName: 'Next action', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'text', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mobilePhone: {
    type: 'string', 
    friendlyName: 'Mobile phone', 
    database: { }, 
    process: { }, 
    description: 'Mobile phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mainPhone: {
    type: 'string', 
    friendlyName: 'Main phone', 
    database: { }, 
    process: { }, 
    description: 'Main phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSale: {
    type: 'number', 
    model: 'salesorders', 
    friendlyName: 'Last sale', 
    description: 'Created automatically. This is a link to the last sales order.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  notes: {
    type: 'string', 
    friendlyName: 'Notes', 
    input: {
      type: 'textarea', 
      rows: 6, 
      cols: 60, 
      placeholder: 'Please enter any notes about this user.', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Notes', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  webpages: {
    collection: 'webpages', 
    via: 'author', 
    friendlyName: 'Webpages', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'webpages' via column 'author'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'web',  ],  }, 
    }, 
  contacts: {
    collection: 'contacts', 
    via: 'user', 
    collectionList: {
      limit: 5, 
      order: 'date', 
      direction: 'DESC', 
      heading: 'Recent contacts', 
      columns: [ 'id',  'date',  'notes',  'closed',  ], 
      addChildTip: 'Add a new contact for this user.', 
      }, 
    friendlyName: 'Contacts', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'contacts' via column 'user'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salesorders: {
    collection: 'salesorders', 
    via: 'customer', 
    collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
    friendlyName: 'Salesorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'salesorders' via column 'customer'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  products: {
    collection: 'products', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'price',  'class',  'description',  ], 
      }, 
    friendlyName: 'Products', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'products' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  purchaseorders: {
    collection: 'purchaseorders', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'date',  'status',  'notes',  ], 
      }, 
    friendlyName: 'Purchaseorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  people: {
    friendlyName: 'Associated people', 
    collection: 'user', 
    via: 'organisation', 
    collectionList: {
      columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
      }, 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'user' via column 'organisation'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  }, 
}

------------------------------------------------------------
table-data.js:9:9 -> 0.218 seconds - level verbose  
{ inputs: { 0: 'user',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.218 seconds - level verbose  
'Users'

------------------------------------------------------------
table-data.js:26:13 -> 0.218 seconds - level verbose  
'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.'

------------------------------------------------------------
table-data.js:26:13 -> 0.218 seconds - level verbose  
{ all: [ 'sales',  'purchasing',  'admin',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.218 seconds - level verbose  
'Add a new user'

------------------------------------------------------------
table-data.js:26:13 -> 0.219 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:26:13 -> 0.219 seconds - level verbose  
{
columns: [
  'id', 
  'fullName', 
  'emailAddress', 
  'userType', 
  'organisation', 
  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.219 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.219 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.219 seconds - level verbose  
'User'

------------------------------------------------------------
table-data.js:100:9 -> 0.219 seconds - level verbose  
{
canedit: false, 
permission: undefined, 
mergedpermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
get-rows.js:33:9 -> 0.219 seconds - level norm  
{ searches: [ [ 'id',  'eq',  35,  ],  ],  }

------------------------------------------------------------
get-instruction.js:24:9 -> 0.219 seconds - level norm  
{
input: {
  0: 'user', 
  1: { searches: [ [ 'id',  'eq',  35,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:26:9 -> 0.219 seconds - level norm  
{
tableData: {
  friendlyName: 'Users', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  attributes: {
    id: [Deeper Object below level 3], 
    createdAt: [Deeper Object below level 3], 
    updatedAt: [Deeper Object below level 3], 
    updatedBy: [Deeper Object below level 3], 
    fullName: [Deeper Object below level 3], 
    emailAddress: [Deeper Object below level 3], 
    password: [Deeper Object below level 3], 
    salt: [Deeper Object below level 3], 
    forgottenPasswordToken: [Deeper Object below level 3], 
    forgottenPasswordExpire: [Deeper Object below level 3], 
    isSuperAdmin: [Deeper Object below level 3], 
    lastSeenAt: [Deeper Object below level 3], 
    streetAddress: [Deeper Object below level 3], 
    zip: [Deeper Object below level 3], 
    country: [Deeper Object below level 3], 
    region: [Deeper Object below level 3], 
    permission: [Deeper Object below level 3], 
    isOrg: [Deeper Object below level 3], 
    business: [Deeper Object below level 3], 
    organisation: [Deeper Object below level 3], 
    userType: [Deeper Object below level 3], 
    lastContact: [Deeper Object below level 3], 
    nextActionDate: [Deeper Object below level 3], 
    nextAction: [Deeper Object below level 3], 
    mobilePhone: [Deeper Object below level 3], 
    mainPhone: [Deeper Object below level 3], 
    lastSale: [Deeper Object below level 3], 
    notes: [Deeper Object below level 3], 
    webpages: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    salesorders: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    purchaseorders: [Deeper Object below level 3], 
    people: [Deeper Object below level 3], 
    }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:34:9 -> 0.219 seconds - level norm  
{ searches: [ [ 'id',  'eq',  35,  ],  ],  }

------------------------------------------------------------
get-instruction.js:43:11 -> 0.219 seconds - level norm  
{ searchField: 'id',  compare: 'eq',  value: 35,  }

------------------------------------------------------------
get-instruction.js:82:9 -> 0.219 seconds - level norm  
{ instruction: 'user.id = ?',  bindings: [ 35,  ],  }

------------------------------------------------------------
get-rows.js:40:11 -> 0.219 seconds - level norm  
{
instruction: 'user.id = ?', 
bindings: [ 35,  ], 
edit: false, 
}

------------------------------------------------------------
get-rows.js:58:9 -> 0.220 seconds - level norm  
[
{
  id: 35, 
  createdAt: 1629555493202, 
  updatedAt: 1629559194424, 
  updatedBy: 1, 
  fullName: 'Willy Loman', 
  emailAddress: 'willy@loman.com', 
  password: 'ae6e5548f467a669624b7d81e753b0663675b6a0b3f8902efee83aab38df72083e1322d4ed2d47be8c870da9f06cbb014cf05d0ffdec02ebea7f220a0adb0a0a', 
  salt: 'fd6b2c4bb7baaa90be133b528477c5afb606109d8f0b94ef3fbb1718b1805b41', 
  forgottenPasswordToken: '', 
  forgottenPasswordExpire: 0, 
  isSuperAdmin: 0, 
  lastSeenAt: 1629504000000, 
  streetAddress: '', 
  zip: '', 
  country: '', 
  region: '', 
  permission: 'sales', 
  isOrg: 'P', 
  business: '', 
  organisation: null, 
  userType: 'I', 
  lastContact: null, 
  nextActionDate: null, 
  nextAction: null, 
  mobilePhone: '', 
  mainPhone: '', 
  lastSale: null, 
  notes: '', 
  }, 
]

------------------------------------------------------------
get-row.js:18:9 -> 0.220 seconds - level norm  
{
table: 'user', 
value: 35, 
recordarray: [
  {
    id: 35, 
    createdAt: 1629555493202, 
    updatedAt: 1629559194424, 
    updatedBy: 1, 
    fullName: 'Willy Loman', 
    emailAddress: 'willy@loman.com', 
    password: 'ae6e5548f467a669624b7d81e753b0663675b6a0b3f8902efee83aab38df72083e1322d4ed2d47be8c870da9f06cbb014cf05d0ffdec02ebea7f220a0adb0a0a', 
    salt: 'fd6b2c4bb7baaa90be133b528477c5afb606109d8f0b94ef3fbb1718b1805b41', 
    forgottenPasswordToken: '', 
    forgottenPasswordExpire: 0, 
    isSuperAdmin: 0, 
    lastSeenAt: 1629504000000, 
    streetAddress: '', 
    zip: '', 
    country: '', 
    region: '', 
    permission: 'sales', 
    isOrg: 'P', 
    business: '', 
    organisation: null, 
    userType: 'I', 
    lastContact: null, 
    nextActionDate: null, 
    nextAction: null, 
    mobilePhone: '', 
    mainPhone: '', 
    lastSale: null, 
    notes: '', 
    }, 
  ], 
}

------------------------------------------------------------
get-row.js:21:11 -> 0.221 seconds - level norm  
'Record: 
'
{
id: 35, 
createdAt: 1629555493202, 
updatedAt: 1629559194424, 
updatedBy: 1, 
fullName: 'Willy Loman', 
emailAddress: 'willy@loman.com', 
password: 'ae6e5548f467a669624b7d81e753b0663675b6a0b3f8902efee83aab38df72083e1322d4ed2d47be8c870da9f06cbb014cf05d0ffdec02ebea7f220a0adb0a0a', 
salt: 'fd6b2c4bb7baaa90be133b528477c5afb606109d8f0b94ef3fbb1718b1805b41', 
forgottenPasswordToken: '', 
forgottenPasswordExpire: 0, 
isSuperAdmin: 0, 
lastSeenAt: 1629504000000, 
streetAddress: '', 
zip: '', 
country: '', 
region: '', 
permission: 'sales', 
isOrg: 'P', 
business: '', 
organisation: null, 
userType: 'I', 
lastContact: null, 
nextActionDate: null, 
nextAction: null, 
mobilePhone: '', 
mainPhone: '', 
lastSale: null, 
notes: '', 
}

------------------------------------------------------------
list-row.js:75:9 -> 0.221 seconds - level norm  
{
table: 'user', 
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: {
    columns: [
      'id', 
      'fullName', 
      'emailAddress', 
      'userType', 
      'organisation', 
      ], 
    }, 
  groups: {
    basics: {
      static: true, 
      open: 'none', 
      columns: [
        'fullName', 
        'emailAddress', 
        'userType', 
        'isOrg', 
        ], 
      }, 
    profile: {
      friendlyName: 'profile', 
      open: 'none', 
      columns: [ 'organisation',  'business',  'notes',  ], 
      }, 
    location: {
      friendlyName: 'How to contact', 
      open: 'none', 
      columns: [
        'streetAddress', 
        'zip', 
        'country', 
        'region', 
        'mainPhone', 
        'mobilePhone', 
        ], 
      }, 
    contacts: {
      friendlyName: 'Contacts', 
      open: 'contacts', 
      columns: [
        'people', 
        'contacts', 
        'lastContact', 
        'nextAction', 
        'nextActionDate', 
        ], 
      }, 
    sales: {
      friendlyName: 'Sales', 
      open: 'salesorders', 
      columns: [ 'salesorders',  'lastSale',  ], 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      friendlyName: 'Products supplied', 
      open: 'products', 
      columns: [ 'products',  'purchaseorders',  ], 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    website: {
      friendlyName: 'Website', 
      open: 'website', 
      columns: [ 'webpages',  ], 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    other: {
      friendlyName: 'Other', 
      columns: [
        'id', 
        'createdAt', 
        'updatedAt', 
        'updatedBy', 
        'password', 
        'salt', 
        'forgottenPasswordToken', 
        'forgottenPasswordExpire', 
        'isSuperAdmin', 
        'lastSeenAt', 
        'permission', 
        ], 
      }, 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: true, 
  canEdit: true, 
  canDelete: true, 
  }, 
rowTitle: 'Willy Loman (User no:35)', 
tableName: 'User', 
parent: undefined, 
parentKey: undefined, 
}

------------------------------------------------------------
count-rows.js:24:11 -> 0.221 seconds - level norm  
{
input: {
  0: 'webpages', 
  1: { searches: [ [ 'author',  'eq',  35,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:24:9 -> 0.221 seconds - level norm  
{
input: {
  0: 'webpages', 
  1: { searches: [ [ 'author',  'eq',  35,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:26:9 -> 0.221 seconds - level norm  
{
tableData: {
  description: 'Web Pages', 
  permission: { all: [Deeper Object below level 3],  }, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basic: [Deeper Object below level 3], 
    content: [Deeper Object below level 3], 
    placement: [Deeper Object below level 3], 
    }, 
  rowTitle: Function, 
  attributes: {
    pageno: [Deeper Object below level 3], 
    createdAt: [Deeper Object below level 3], 
    updatedAt: [Deeper Object below level 3], 
    updatedBy: [Deeper Object below level 3], 
    title: [Deeper Object below level 3], 
    slug: [Deeper Object below level 3], 
    status: [Deeper Object below level 3], 
    embargo: [Deeper Object below level 3], 
    expires: [Deeper Object below level 3], 
    parent: [Deeper Object below level 3], 
    onMenu: [Deeper Object below level 3], 
    headline: [Deeper Object below level 3], 
    tags: [Deeper Object below level 3], 
    author: [Deeper Object below level 3], 
    pageContent: [Deeper Object below level 3], 
    }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:34:9 -> 0.221 seconds - level norm  
{ searches: [ [ 'author',  'eq',  35,  ],  ],  }

------------------------------------------------------------
get-instruction.js:43:11 -> 0.221 seconds - level norm  
{
searchField: 'author', 
compare: 'eq', 
value: 35, 
}

------------------------------------------------------------
get-instruction.js:82:9 -> 0.221 seconds - level norm  
{
instruction: 'webpages.author = ?', 
bindings: [ 35,  ], 
}

------------------------------------------------------------
count-rows.js:33:15 -> 0.221 seconds - level norm  
{
table: 'webpages', 
instruction: 'webpages.author = ?', 
bindings: [ 35,  ], 
}

------------------------------------------------------------
count-rows.js:46:11 -> 0.222 seconds - level norm  
0

------------------------------------------------------------
count-rows.js:24:11 -> 0.223 seconds - level norm  
{
input: {
  0: 'contacts', 
  1: { searches: [ [ 'user',  'eq',  35,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:24:9 -> 0.223 seconds - level norm  
{
input: {
  0: 'contacts', 
  1: { searches: [ [ 'user',  'eq',  35,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:26:9 -> 0.223 seconds - level norm  
{
tableData: {
  description: 'A record should be created for all contacts with prospects, customers 
  or suppliers. It may be phone, email, text etc. When a contact is made, it may result in further 
  actions being needed. The expected date and the person responsible for the action is recorded. 
  When the subsequent action takes place the earlier action is closed.  When the contacts are listed, 
  they are characterised by the first 40 characters of the notes.', 
  friendlyName: 'Notes from contacts', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new contact', 
  list: { columns: [Deeper Object below level 3],  }, 
  rowTitle: Function, 
  edit: {
    parentData: [Deeper Object below level 3], 
    preFormDescription: 'This function is run immediately before updating/adding to  the     
     a new contact.   The 'isFollowUp' value is pre-populated for new    
     rows when called from a parent record. This is because it is the  
     field that links the new record to the parent.                     
     This routine looks for 'isFollowUp' populated and there is no       
     user - i.e. a new row called from a parent.  The routine fills in   
     the user from the parent record. It also closes the previou...', 
    preForm: Function, 
    postProcessDescription: 'This function is run immediately after the record is updated.   
    It sets the last contact and next action in the user's record.', 
    postProcess: Function, 
    }, 
  attributes: {
    id: [Deeper Object below level 3], 
    createdAt: [Deeper Object below level 3], 
    updatedAt: [Deeper Object below level 3], 
    updatedBy: [Deeper Object below level 3], 
    user: [Deeper Object below level 3], 
    date: [Deeper Object below level 3], 
    contactBy: [Deeper Object below level 3], 
    contacttype: [Deeper Object below level 3], 
    isFollowUp: [Deeper Object below level 3], 
    notes: [Deeper Object below level 3], 
    result: [Deeper Object below level 3], 
    nextActionDate: [Deeper Object below level 3], 
    nextAction: [Deeper Object below level 3], 
    closed: [Deeper Object below level 3], 
    followUp: [Deeper Object below level 3], 
    }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:34:9 -> 0.223 seconds - level norm  
{ searches: [ [ 'user',  'eq',  35,  ],  ],  }

------------------------------------------------------------
get-instruction.js:43:11 -> 0.223 seconds - level norm  
{
searchField: 'user', 
compare: 'eq', 
value: 35, 
}

------------------------------------------------------------
get-instruction.js:82:9 -> 0.223 seconds - level norm  
{
instruction: 'contacts.user = ?', 
bindings: [ 35,  ], 
}

------------------------------------------------------------
count-rows.js:33:15 -> 0.223 seconds - level norm  
{
table: 'contacts', 
instruction: 'contacts.user = ?', 
bindings: [ 35,  ], 
}

------------------------------------------------------------
count-rows.js:46:11 -> 0.224 seconds - level norm  
0

------------------------------------------------------------
count-rows.js:24:11 -> 0.224 seconds - level norm  
{
input: {
  0: 'salesorders', 
  1: { searches: [ [ 'customer',  'eq',  35,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:24:9 -> 0.224 seconds - level norm  
{
input: {
  0: 'salesorders', 
  1: { searches: [ [ 'customer',  'eq',  35,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:26:9 -> 0.224 seconds - level norm  
{
tableData: {
  description: 'Customer orders', 
  permission: { all: [Deeper Object below level 3],  }, 
  friendlyName: 'Sales orders', 
  rowTitle: Function, 
  list: {
    columns: [Deeper Object below level 3], 
    open: 'salesorderlines', 
    }, 
  edit: { postProcess: Function,  }, 
  attributes: {
    id: [Deeper Object below level 3], 
    createdAt: [Deeper Object below level 3], 
    updatedAt: [Deeper Object below level 3], 
    updatedBy: [Deeper Object below level 3], 
    customer: [Deeper Object below level 3], 
    date: [Deeper Object below level 3], 
    notes: [Deeper Object below level 3], 
    status: [Deeper Object below level 3], 
    total: [Deeper Object below level 3], 
    salesorderlines: [Deeper Object below level 3], 
    }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:34:9 -> 0.224 seconds - level norm  
{ searches: [ [ 'customer',  'eq',  35,  ],  ],  }

------------------------------------------------------------
get-instruction.js:43:11 -> 0.224 seconds - level norm  
{
searchField: 'customer', 
compare: 'eq', 
value: 35, 
}

------------------------------------------------------------
get-instruction.js:82:9 -> 0.224 seconds - level norm  
{
instruction: 'salesorders.customer = ?', 
bindings: [ 35,  ], 
}

------------------------------------------------------------
count-rows.js:33:15 -> 0.224 seconds - level norm  
{
table: 'salesorders', 
instruction: 'salesorders.customer = ?', 
bindings: [ 35,  ], 
}

------------------------------------------------------------
count-rows.js:46:11 -> 0.225 seconds - level norm  
0

------------------------------------------------------------
count-rows.js:24:11 -> 0.225 seconds - level norm  
{
input: {
  0: 'products', 
  1: { searches: [ [ 'supplier',  'eq',  35,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:24:9 -> 0.225 seconds - level norm  
{
input: {
  0: 'products', 
  1: { searches: [ [ 'supplier',  'eq',  35,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:26:9 -> 0.225 seconds - level norm  
{
tableData: {
  description: 'Products', 
  extendedDescription: 'One record for each product that the organisation deals in.', 
  friendlyName: 'Products', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  permission: {
    all: [Deeper Object below level 3], 
    view: [Deeper Object below level 3], 
    }, 
  groups: {
    basic: [Deeper Object below level 3], 
    details: [Deeper Object below level 3], 
    transactions: [Deeper Object below level 3], 
    related: [Deeper Object below level 3], 
    description: [Deeper Object below level 3], 
    }, 
  attributes: {
    id: [Deeper Object below level 3], 
    createdAt: [Deeper Object below level 3], 
    updatedAt: [Deeper Object below level 3], 
    updatedBy: [Deeper Object below level 3], 
    name: [Deeper Object below level 3], 
    supplier: [Deeper Object below level 3], 
    price: [Deeper Object below level 3], 
    vatable: [Deeper Object below level 3], 
    class: [Deeper Object below level 3], 
    overview: [Deeper Object below level 3], 
    description: [Deeper Object below level 3], 
    subproductOf: [Deeper Object below level 3], 
    subproducts: [Deeper Object below level 3], 
    purchases: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:34:9 -> 0.225 seconds - level norm  
{ searches: [ [ 'supplier',  'eq',  35,  ],  ],  }

------------------------------------------------------------
get-instruction.js:43:11 -> 0.225 seconds - level norm  
{
searchField: 'supplier', 
compare: 'eq', 
value: 35, 
}

------------------------------------------------------------
get-instruction.js:82:9 -> 0.225 seconds - level norm  
{
instruction: 'products.supplier = ?', 
bindings: [ 35,  ], 
}

------------------------------------------------------------
count-rows.js:33:15 -> 0.225 seconds - level norm  
{
table: 'products', 
instruction: 'products.supplier = ?', 
bindings: [ 35,  ], 
}

------------------------------------------------------------
count-rows.js:46:11 -> 0.226 seconds - level norm  
0

------------------------------------------------------------
count-rows.js:24:11 -> 0.226 seconds - level norm  
{
input: {
  0: 'purchaseorders', 
  1: { searches: [ [ 'supplier',  'eq',  35,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:24:9 -> 0.226 seconds - level norm  
{
input: {
  0: 'purchaseorders', 
  1: { searches: [ [ 'supplier',  'eq',  35,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:26:9 -> 0.226 seconds - level norm  
{
tableData: {
  description: 'Purchase orders', 
  friendlyName: 'Purchase Orders', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add new purchase order', 
  open: 'purchaseorderlines', 
  attributes: {
    id: [Deeper Object below level 3], 
    createdAt: [Deeper Object below level 3], 
    updatedAt: [Deeper Object below level 3], 
    updatedBy: [Deeper Object below level 3], 
    supplier: [Deeper Object below level 3], 
    date: [Deeper Object below level 3], 
    notes: [Deeper Object below level 3], 
    total: [Deeper Object below level 3], 
    status: [Deeper Object below level 3], 
    purchaseorderlines: [Deeper Object below level 3], 
    }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:34:9 -> 0.226 seconds - level norm  
{ searches: [ [ 'supplier',  'eq',  35,  ],  ],  }

------------------------------------------------------------
get-instruction.js:43:11 -> 0.226 seconds - level norm  
{
searchField: 'supplier', 
compare: 'eq', 
value: 35, 
}

------------------------------------------------------------
get-instruction.js:82:9 -> 0.226 seconds - level norm  
{
instruction: 'purchaseorders.supplier = ?', 
bindings: [ 35,  ], 
}

------------------------------------------------------------
count-rows.js:33:15 -> 0.226 seconds - level norm  
{
table: 'purchaseorders', 
instruction: 'purchaseorders.supplier = ?', 
bindings: [ 35,  ], 
}

------------------------------------------------------------
count-rows.js:46:11 -> 0.227 seconds - level norm  
0

------------------------------------------------------------
count-rows.js:24:11 -> 0.227 seconds - level norm  
{
input: {
  0: 'user', 
  1: { searches: [ [ 'organisation',  'eq',  35,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:24:9 -> 0.227 seconds - level norm  
{
input: {
  0: 'user', 
  1: { searches: [ [ 'organisation',  'eq',  35,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:26:9 -> 0.227 seconds - level norm  
{
tableData: {
  friendlyName: 'Users', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  attributes: {
    id: [Deeper Object below level 3], 
    createdAt: [Deeper Object below level 3], 
    updatedAt: [Deeper Object below level 3], 
    updatedBy: [Deeper Object below level 3], 
    fullName: [Deeper Object below level 3], 
    emailAddress: [Deeper Object below level 3], 
    password: [Deeper Object below level 3], 
    salt: [Deeper Object below level 3], 
    forgottenPasswordToken: [Deeper Object below level 3], 
    forgottenPasswordExpire: [Deeper Object below level 3], 
    isSuperAdmin: [Deeper Object below level 3], 
    lastSeenAt: [Deeper Object below level 3], 
    streetAddress: [Deeper Object below level 3], 
    zip: [Deeper Object below level 3], 
    country: [Deeper Object below level 3], 
    region: [Deeper Object below level 3], 
    permission: [Deeper Object below level 3], 
    isOrg: [Deeper Object below level 3], 
    business: [Deeper Object below level 3], 
    organisation: [Deeper Object below level 3], 
    userType: [Deeper Object below level 3], 
    lastContact: [Deeper Object below level 3], 
    nextActionDate: [Deeper Object below level 3], 
    nextAction: [Deeper Object below level 3], 
    mobilePhone: [Deeper Object below level 3], 
    mainPhone: [Deeper Object below level 3], 
    lastSale: [Deeper Object below level 3], 
    notes: [Deeper Object below level 3], 
    webpages: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    salesorders: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    purchaseorders: [Deeper Object below level 3], 
    people: [Deeper Object below level 3], 
    }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:34:9 -> 0.228 seconds - level norm  
{ searches: [ [ 'organisation',  'eq',  35,  ],  ],  }

------------------------------------------------------------
get-instruction.js:43:11 -> 0.228 seconds - level norm  
{
searchField: 'organisation', 
compare: 'eq', 
value: 35, 
}

------------------------------------------------------------
get-instruction.js:82:9 -> 0.228 seconds - level norm  
{
instruction: 'user.organisation = ?', 
bindings: [ 35,  ], 
}

------------------------------------------------------------
count-rows.js:33:15 -> 0.228 seconds - level norm  
{
table: 'user', 
instruction: 'user.organisation = ?', 
bindings: [ 35,  ], 
}

------------------------------------------------------------
count-rows.js:46:11 -> 0.228 seconds - level norm  
0

------------------------------------------------------------
list-row.js:116:9 -> 0.228 seconds - level norm  
{
children: {
  webpages: 0, 
  contacts: 0, 
  salesorders: 0, 
  products: 0, 
  purchaseorders: 0, 
  people: 0, 
  }, 
total: 0, 
}

------------------------------------------------------------
list-row.js:170:9 -> 0.228 seconds - level norm  
{
fieldList: [
  'id', 
  'createdAt', 
  'updatedAt', 
  'updatedBy', 
  'fullName', 
  'emailAddress', 
  'password', 
  'salt', 
  'forgottenPasswordToken', 
  'forgottenPasswordExpire', 
  'isSuperAdmin', 
  'lastSeenAt', 
  'streetAddress', 
  'zip', 
  'country', 
  'region', 
  'permission', 
  'isOrg', 
  'business', 
  'organisation', 
  'userType', 
  'lastContact', 
  'nextActionDate', 
  'nextAction', 
  'mobilePhone', 
  'mainPhone', 
  'lastSale', 
  'notes', 
  'webpages', 
  'contacts', 
  'salesorders', 
  'products', 
  'purchaseorders', 
  'people', 
  ], 
}

------------------------------------------------------------
list-row.js:175:11 -> 0.229 seconds - level norm  
{
formgroups: {
  basics: {
    static: true, 
    open: 'none', 
    columns: [
      'fullName', 
      'emailAddress', 
      'userType', 
      'isOrg', 
      ], 
    }, 
  profile: {
    friendlyName: 'profile', 
    open: 'none', 
    columns: [ 'organisation',  'business',  'notes',  ], 
    }, 
  location: {
    friendlyName: 'How to contact', 
    open: 'none', 
    columns: [
      'streetAddress', 
      'zip', 
      'country', 
      'region', 
      'mainPhone', 
      'mobilePhone', 
      ], 
    }, 
  contacts: {
    friendlyName: 'Contacts', 
    open: 'contacts', 
    columns: [
      'people', 
      'contacts', 
      'lastContact', 
      'nextAction', 
      'nextActionDate', 
      ], 
    }, 
  sales: {
    friendlyName: 'Sales', 
    open: 'salesorders', 
    columns: [ 'salesorders',  'lastSale',  ], 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  products: {
    friendlyName: 'Products supplied', 
    open: 'products', 
    columns: [ 'products',  'purchaseorders',  ], 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  website: {
    friendlyName: 'Website', 
    open: 'website', 
    columns: [ 'webpages',  ], 
    permission: { all: [ 'admin',  'web',  ],  }, 
    }, 
  other: {
    friendlyName: 'Other', 
    columns: [
      'id', 
      'createdAt', 
      'updatedAt', 
      'updatedBy', 
      'password', 
      'salt', 
      'forgottenPasswordToken', 
      'forgottenPasswordExpire', 
      'isSuperAdmin', 
      'lastSeenAt', 
      'permission', 
      ], 
    }, 
  }, 
}

------------------------------------------------------------
list-row.js:179:13 -> 0.229 seconds - level norm  
{
group: 'basics', 
cols: [
  'fullName', 
  'emailAddress', 
  'userType', 
  'isOrg', 
  ], 
}

------------------------------------------------------------
list-row.js:179:13 -> 0.229 seconds - level norm  
{
group: 'profile', 
cols: [ 'organisation',  'business',  'notes',  ], 
}

------------------------------------------------------------
list-row.js:179:13 -> 0.229 seconds - level norm  
{
group: 'location', 
cols: [
  'streetAddress', 
  'zip', 
  'country', 
  'region', 
  'mainPhone', 
  'mobilePhone', 
  ], 
}

------------------------------------------------------------
list-row.js:179:13 -> 0.229 seconds - level norm  
{
group: 'contacts', 
cols: [
  'people', 
  'contacts', 
  'lastContact', 
  'nextAction', 
  'nextActionDate', 
  ], 
}

------------------------------------------------------------
list-row.js:179:13 -> 0.229 seconds - level norm  
{
group: 'sales', 
cols: [ 'salesorders',  'lastSale',  ], 
}

------------------------------------------------------------
list-row.js:179:13 -> 0.229 seconds - level norm  
{
group: 'products', 
cols: [ 'products',  'purchaseorders',  ], 
}

------------------------------------------------------------
list-row.js:179:13 -> 0.229 seconds - level norm  
{ group: 'website',  cols: [ 'webpages',  ],  }

------------------------------------------------------------
list-row.js:179:13 -> 0.229 seconds - level norm  
{
group: 'other', 
cols: [
  'id', 
  'createdAt', 
  'updatedAt', 
  'updatedBy', 
  'password', 
  'salt', 
  'forgottenPasswordToken', 
  'forgottenPasswordExpire', 
  'isSuperAdmin', 
  'lastSeenAt', 
  'permission', 
  ], 
}

------------------------------------------------------------
list-row.js:228:11 -> 0.229 seconds - level norm  
{
tabs: [
  'profile', 
  'location', 
  'contacts', 
  'sales', 
  'products', 
  'website', 
  'other', 
  ], 
static: [ 'basics',  ], 
groups: {
  basics: {
    static: true, 
    open: 'none', 
    columns: [
      'fullName', 
      'emailAddress', 
      'userType', 
      'isOrg', 
      ], 
    }, 
  profile: {
    friendlyName: 'profile', 
    open: 'none', 
    columns: [ 'organisation',  'business',  'notes',  ], 
    }, 
  location: {
    friendlyName: 'How to contact', 
    open: 'none', 
    columns: [
      'streetAddress', 
      'zip', 
      'country', 
      'region', 
      'mainPhone', 
      'mobilePhone', 
      ], 
    }, 
  contacts: {
    friendlyName: 'Contacts', 
    open: 'contacts', 
    columns: [
      'people', 
      'contacts', 
      'lastContact', 
      'nextAction', 
      'nextActionDate', 
      ], 
    }, 
  sales: {
    friendlyName: 'Sales', 
    open: 'salesorders', 
    columns: [ 'salesorders',  'lastSale',  ], 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  products: {
    friendlyName: 'Products supplied', 
    open: 'products', 
    columns: [ 'products',  'purchaseorders',  ], 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  website: {
    friendlyName: 'Website', 
    open: 'website', 
    columns: [ 'webpages',  ], 
    permission: { all: [ 'admin',  'web',  ],  }, 
    }, 
  other: {
    friendlyName: 'Other', 
    columns: [
      'id', 
      'createdAt', 
      'updatedAt', 
      'updatedBy', 
      'password', 
      'salt', 
      'forgottenPasswordToken', 
      'forgottenPasswordExpire', 
      'isSuperAdmin', 
      'lastSeenAt', 
      'permission', 
      ], 
    }, 
  }, 
}

------------------------------------------------------------
list-row.js:253:11 -> 0.229 seconds - level norm  
{
columnGroup: {
  fullName: 'basics', 
  emailAddress: 'basics', 
  userType: 'basics', 
  isOrg: 'basics', 
  organisation: 'profile', 
  business: 'profile', 
  notes: 'profile', 
  streetAddress: 'location', 
  zip: 'location', 
  country: 'location', 
  region: 'location', 
  mainPhone: 'location', 
  mobilePhone: 'location', 
  people: 'contacts', 
  contacts: 'contacts', 
  lastContact: 'contacts', 
  nextAction: 'contacts', 
  nextActionDate: 'contacts', 
  salesorders: 'sales', 
  lastSale: 'sales', 
  products: 'products', 
  purchaseorders: 'products', 
  webpages: 'website', 
  id: 'other', 
  createdAt: 'other', 
  updatedAt: 'other', 
  updatedBy: 'other', 
  password: 'other', 
  salt: 'other', 
  forgottenPasswordToken: 'other', 
  forgottenPasswordExpire: 'other', 
  isSuperAdmin: 'other', 
  lastSeenAt: 'other', 
  permission: 'other', 
  }, 
openTab: 'profile', 
}

------------------------------------------------------------
list-row.js:288:9 -> 0.230 seconds - level norm  
{
groups: {
  basics: {
    static: true, 
    open: 'none', 
    columns: [
      'fullName', 
      'emailAddress', 
      'userType', 
      'isOrg', 
      ], 
    }, 
  profile: {
    friendlyName: 'profile', 
    open: 'none', 
    columns: [ 'organisation',  'business',  'notes',  ], 
    }, 
  location: {
    friendlyName: 'How to contact', 
    open: 'none', 
    columns: [
      'streetAddress', 
      'zip', 
      'country', 
      'region', 
      'mainPhone', 
      'mobilePhone', 
      ], 
    }, 
  contacts: {
    friendlyName: 'Contacts', 
    open: 'contacts', 
    columns: [
      'people', 
      'contacts', 
      'lastContact', 
      'nextAction', 
      'nextActionDate', 
      ], 
    }, 
  sales: {
    friendlyName: 'Sales', 
    open: 'salesorders', 
    columns: [ 'salesorders',  'lastSale',  ], 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  products: {
    friendlyName: 'Products supplied', 
    open: 'products', 
    columns: [ 'products',  'purchaseorders',  ], 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  website: {
    friendlyName: 'Website', 
    open: 'website', 
    columns: [ 'webpages',  ], 
    permission: { all: [ 'admin',  'web',  ],  }, 
    }, 
  other: {
    friendlyName: 'Other', 
    columns: [
      'id', 
      'createdAt', 
      'updatedAt', 
      'updatedBy', 
      'password', 
      'salt', 
      'forgottenPasswordToken', 
      'forgottenPasswordExpire', 
      'isSuperAdmin', 
      'lastSeenAt', 
      'permission', 
      ], 
    }, 
  }, 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.230 seconds - level norm  
'basics'
'fullName'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.230 seconds - level norm  
{
0: {
  type: 'string', 
  description: 'Full representation of the user's name.', 
  example: 'Mary Sue van der McHenst', 
  input: {
    required: true, 
    placeholder: 'Please enter the persons full name', 
    class: 'form-control', 
    type: 'text', 
    }, 
  friendlyName: 'Full name', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: 'Willy Loman', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
display-field.js:69:11 -> 0.230 seconds - level norm  
'Willy Loman'

------------------------------------------------------------
display-field.js:136:11 -> 0.230 seconds - level verbose  
{
type: 'string', 
description: 'Full representation of the user's name.', 
example: 'Mary Sue van der McHenst', 
input: {
  required: true, 
  placeholder: 'Please enter the persons full name', 
  class: 'form-control', 
  type: 'text', 
  }, 
friendlyName: 'Full name', 
database: { }, 
process: { }, 
display: { }, 
canEdit: true, 
canView: true, 
}

------------------------------------------------------------
display-field.js:137:11 -> 0.230 seconds - level norm  
'Willy Loman'

------------------------------------------------------------
list-row.js:326:15 -> 0.230 seconds - level norm  
'basics'
'emailAddress'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.230 seconds - level norm  
{
0: {
  type: 'string', 
  friendlyName: 'Email address', 
  database: { }, 
  process: { }, 
  description: 'Email address', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: 'willy@loman.com', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
display-field.js:69:11 -> 0.230 seconds - level norm  
'willy@loman.com'

------------------------------------------------------------
display-field.js:136:11 -> 0.230 seconds - level verbose  
{
type: 'string', 
friendlyName: 'Email address', 
database: { }, 
process: { }, 
description: 'Email address', 
input: { class: 'form-control',  type: 'text',  }, 
display: { }, 
canEdit: true, 
canView: true, 
}

------------------------------------------------------------
display-field.js:137:11 -> 0.230 seconds - level norm  
'willy@loman.com'

------------------------------------------------------------
list-row.js:326:15 -> 0.231 seconds - level norm  
'basics'
'userType'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.231 seconds - level norm  
{
0: {
  description: 'The type of user.  Customer/Supplier or in-house.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: {
      L: 'Sales lead', 
      P: 'Prospect', 
      C: 'Customer', 
      S: 'Supplier', 
      I: 'In-house staff', 
      N: 'No longer considered a prospect', 
      O: 'Other', 
      }, 
    required: true, 
    class: 'form-control', 
    }, 
  friendlyName: 'User type', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: 'I', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
display-field.js:69:11 -> 0.231 seconds - level norm  
'I'

------------------------------------------------------------
display-field.js:136:11 -> 0.231 seconds - level verbose  
{
description: 'The type of user.  Customer/Supplier or in-house.', 
type: 'string', 
input: {
  type: 'select', 
  values: {
    L: 'Sales lead', 
    P: 'Prospect', 
    C: 'Customer', 
    S: 'Supplier', 
    I: 'In-house staff', 
    N: 'No longer considered a prospect', 
    O: 'Other', 
    }, 
  required: true, 
  class: 'form-control', 
  }, 
friendlyName: 'User type', 
database: { }, 
process: { }, 
display: { }, 
canEdit: true, 
canView: true, 
}

------------------------------------------------------------
display-field.js:137:11 -> 0.231 seconds - level norm  
'In-house staff'

------------------------------------------------------------
list-row.js:326:15 -> 0.231 seconds - level norm  
'basics'
'isOrg'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.231 seconds - level norm  
{
0: {
  friendlyName: 'Person or Business?', 
  type: 'string', 
  description: 'This record describes a business rather than a person', 
  input: {
    type: 'radio', 
    values: { P: 'Person',  B: 'Business/Organisation',  }, 
    required: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: 'P', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
display-field.js:69:11 -> 0.231 seconds - level norm  
'P'

------------------------------------------------------------
display-field.js:136:11 -> 0.231 seconds - level verbose  
{
friendlyName: 'Person or Business?', 
type: 'string', 
description: 'This record describes a business rather than a person', 
input: {
  type: 'radio', 
  values: { P: 'Person',  B: 'Business/Organisation',  }, 
  required: true, 
  class: 'form-control', 
  }, 
database: { }, 
process: { }, 
display: { }, 
canEdit: true, 
canView: true, 
}

------------------------------------------------------------
display-field.js:137:11 -> 0.231 seconds - level norm  
'Person'

------------------------------------------------------------
list-row.js:416:11 -> 0.231 seconds - level verbose  
{
group: 'basics', 
rows: '
            <tr class="d-flex">
              <th scope="row" class="col-3" >
                <span title="Full representation of the user's name.">
                  Full name
                </span>
              </th>
              <td  class="col-7">
                Willy Loman
              </td>
              <td class="col-2 text-center">
                
              </td>
            </tr>
            <tr class="d-flex">
              <th scope="row" class="col-3" >
                <s...', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.231 seconds - level norm  
'profile'
'organisation'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.232 seconds - level norm  
{
0: {
  friendlyName: 'Organisation', 
  model: 'user', 
  description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
  input: {
    type: 'select', 
    search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: null, 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.232 seconds - level norm  
'profile'
'business'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.232 seconds - level norm  
{
0: {
  type: 'string', 
  description: 'Description of the customer's business', 
  friendlyName: 'The type of business.', 
  input: {
    type: 'textarea', 
    rows: 3, 
    cols: 60, 
    placeholder: 'Please enter a description of the user's business and place in the organisation', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: '', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.232 seconds - level norm  
'profile'
'notes'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.232 seconds - level norm  
{
0: {
  type: 'string', 
  friendlyName: 'Notes', 
  input: {
    type: 'textarea', 
    rows: 6, 
    cols: 60, 
    placeholder: 'Please enter any notes about this user.', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Notes', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: '', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:416:11 -> 0.232 seconds - level verbose  
{
group: 'profile', 
rows: '
            <tr class="d-flex">
              <th scope="row" class="col-3" >
                <span title="The organsation this user belongs to (or holding group if this is an organisation)">
                  Organisation
                </span>
              </th>
              <td  class="col-7">
                
              </td>
              <td class="col-2 text-center">
                
              </td>
            </tr>
            <tr class="d-flex">
              <th scope="row"...', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.232 seconds - level norm  
'location'
'streetAddress'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.232 seconds - level norm  
{
0: {
  type: 'string', 
  input: {
    type: 'textarea', 
    rows: 5, 
    cols: 60, 
    placeholder: 'Please enter the street address of the user', 
    class: 'form-control', 
    }, 
  friendlyName: 'Street address', 
  database: { }, 
  process: { }, 
  description: 'Street address', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: '', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.232 seconds - level norm  
'location'
'zip'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.232 seconds - level norm  
{
0: {
  type: 'string', 
  friendlyName: 'Zip', 
  database: { }, 
  process: { }, 
  description: 'Zip', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: '', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.232 seconds - level norm  
'location'
'country'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.232 seconds - level norm  
{
0: {
  type: 'string', 
  friendlyName: 'Country', 
  database: { }, 
  process: { }, 
  description: 'Country', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: '', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.232 seconds - level norm  
'location'
'region'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.233 seconds - level norm  
{
0: {
  description: 'This is an example of a select using the data in the isIn attribute.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: [
      'Europe', 
      'Middle East', 
      'Africa', 
      'South Asia', 
      'East', 
      'N America', 
      'S America', 
      ], 
    class: 'form-control', 
    }, 
  friendlyName: 'Region', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: '', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.233 seconds - level norm  
'location'
'mainPhone'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.233 seconds - level norm  
{
0: {
  type: 'string', 
  friendlyName: 'Main phone', 
  database: { }, 
  process: { }, 
  description: 'Main phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: '', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.233 seconds - level norm  
'location'
'mobilePhone'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.233 seconds - level norm  
{
0: {
  type: 'string', 
  friendlyName: 'Mobile phone', 
  database: { }, 
  process: { }, 
  description: 'Mobile phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: '', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:416:11 -> 0.233 seconds - level verbose  
{
group: 'location', 
rows: '
            <tr class="d-flex">
              <th scope="row" class="col-3" >
                <span title="Street address">
                  Street address
                </span>
              </th>
              <td  class="col-7">
                
              </td>
              <td class="col-2 text-center">
                
              </td>
            </tr>
            <tr class="d-flex">
              <th scope="row" class="col-3" >
                <span title="Zip">
              ...', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.233 seconds - level norm  
'contacts'
'people'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.233 seconds - level norm  
{
0: {
  friendlyName: 'Associated people', 
  collection: 'user', 
  via: 'organisation', 
  collectionList: {
    columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
    }, 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'user' via column 'organisation'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: undefined, 
2: 0, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:343:17 -> 0.233 seconds - level norm  
{
friendlyName: 'Associated people', 
collection: 'user', 
via: 'organisation', 
collectionList: {
  columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
  }, 
database: { }, 
process: { }, 
description: 'Linked from: 'user' via column 'organisation'.', 
input: { class: 'form-control',  type: 'text',  }, 
display: { }, 
canEdit: true, 
canView: true, 
}

------------------------------------------------------------
has-permission.js:6:9 -> 0.233 seconds - level norm  
{
permission: 'sales', 
table: 'user', 
has: 'edit', 
}

------------------------------------------------------------
table-data.js:9:9 -> 0.233 seconds - level verbose  
{ inputs: { 0: 'user',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.233 seconds - level verbose  
'Users'

------------------------------------------------------------
table-data.js:26:13 -> 0.233 seconds - level verbose  
'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.'

------------------------------------------------------------
table-data.js:26:13 -> 0.234 seconds - level verbose  
{ all: [ 'sales',  'purchasing',  'admin',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.234 seconds - level verbose  
'Add a new user'

------------------------------------------------------------
table-data.js:26:13 -> 0.234 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:26:13 -> 0.234 seconds - level verbose  
{
columns: [
  'id', 
  'fullName', 
  'emailAddress', 
  'userType', 
  'organisation', 
  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.234 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.234 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.234 seconds - level verbose  
'User'

------------------------------------------------------------
table-data.js:100:9 -> 0.234 seconds - level verbose  
{
canedit: false, 
permission: undefined, 
mergedpermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
has-permission.js:18:9 -> 0.234 seconds - level norm  
{
tablepermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
}

------------------------------------------------------------
has-permission.js:87:9 -> 0.235 seconds - level norm  
true

------------------------------------------------------------
list-row.js:326:15 -> 0.235 seconds - level norm  
'contacts'
'contacts'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.235 seconds - level norm  
{
0: {
  collection: 'contacts', 
  via: 'user', 
  collectionList: {
    limit: 5, 
    order: 'date', 
    direction: 'DESC', 
    heading: 'Recent contacts', 
    columns: [ 'id',  'date',  'notes',  'closed',  ], 
    addChildTip: 'Add a new contact for this user.', 
    }, 
  friendlyName: 'Contacts', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'contacts' via column 'user'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: undefined, 
2: 0, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:343:17 -> 0.235 seconds - level norm  
{
collection: 'contacts', 
via: 'user', 
collectionList: {
  limit: 5, 
  order: 'date', 
  direction: 'DESC', 
  heading: 'Recent contacts', 
  columns: [ 'id',  'date',  'notes',  'closed',  ], 
  addChildTip: 'Add a new contact for this user.', 
  }, 
friendlyName: 'Contacts', 
database: { }, 
process: { }, 
description: 'Linked from: 'contacts' via column 'user'.', 
input: { class: 'form-control',  type: 'text',  }, 
display: { }, 
canEdit: true, 
canView: true, 
}

------------------------------------------------------------
has-permission.js:6:9 -> 0.235 seconds - level norm  
{
permission: 'sales', 
table: 'contacts', 
has: 'edit', 
}

------------------------------------------------------------
table-data.js:9:9 -> 0.235 seconds - level verbose  
{ inputs: { 0: 'contacts',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.235 seconds - level verbose  
'A record should be created for all contacts with prospects, customers 
  or suppliers. It may be phone, email, text etc. When a contact is made, it may result in further 
  actions being needed. The expected date and the person responsible for the action is recorded. 
  When the subsequent action takes place the earlier action is closed.  When the contacts are listed, 
  they are characterised by the first 40 characters of the notes.'

------------------------------------------------------------
table-data.js:26:13 -> 0.235 seconds - level verbose  
'Notes from contacts'

------------------------------------------------------------
table-data.js:26:13 -> 0.235 seconds - level verbose  
{ all: [ 'sales',  'purchasing',  'admin',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.235 seconds - level verbose  
'Add a new contact'

------------------------------------------------------------
table-data.js:26:13 -> 0.235 seconds - level verbose  
{
columns: [
  'updatedAt', 
  'id', 
  'user', 
  'date', 
  'notes', 
  'closed', 
  'contactBy', 
  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.235 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:26:13 -> 0.235 seconds - level verbose  
{
parentData: {
  link: 'user', 
  columns: [
    'fullName', 
    'lastContact', 
    'emailAddress', 
    'mainPhone', 
    ], 
  }, 
preFormDescription: 'This function is run immediately before updating/adding to  the     
     a new contact.   The 'isFollowUp' value is pre-populated for new    
     rows when called from a parent record. This is because it is the  
     field that links the new record to the parent.                     
     This routine looks for 'isFollowUp' populated and there is no       
     user - i.e. a new row called from a parent.  The routine fills in   
     the user from the parent record. It also closes the previou...', 
preForm: Function, 
postProcessDescription: 'This function is run immediately after the record is updated.   
    It sets the last contact and next action in the user's record.', 
postProcess: Function, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.235 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.236 seconds - level verbose  
'Contacts'

------------------------------------------------------------
table-data.js:100:9 -> 0.236 seconds - level verbose  
{
canedit: false, 
permission: undefined, 
mergedpermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
tableData: {
  description: 'A record should be created for all contacts with prospects, customers 
  or suppliers. It may be phone, email, text etc. When a contact is made, it may result in further 
  actions being needed. The expected date and the person responsible for the action is recorded. 
  When the subsequent action takes place the earlier action is closed.  When the contacts are listed, 
  they are characterised by the first 40 characters of the notes.', 
  friendlyName: 'Contacts', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new contact', 
  list: { columns: [Deeper Object below level 3],  }, 
  rowTitle: Function, 
  edit: {
    parentData: [Deeper Object below level 3], 
    preFormDescription: 'This function is run immediately before updating/adding to  the     
     a new contact.   The 'isFollowUp' value is pre-populated for new    
     rows when called from a parent record. This is because it is the  
     field that links the new record to the parent.                     
     This routine looks for 'isFollowUp' populated and there is no       
     user - i.e. a new row called from a parent.  The routine fills in   
     the user from the parent record. It also closes the previou...', 
    preForm: Function, 
    postProcessDescription: 'This function is run immediately after the record is updated.   
    It sets the last contact and next action in the user's record.', 
    postProcess: Function, 
    }, 
  primaryKey: 'id', 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
has-permission.js:18:9 -> 0.236 seconds - level norm  
{
tablepermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
}

------------------------------------------------------------
has-permission.js:87:9 -> 0.236 seconds - level norm  
true

------------------------------------------------------------
list-row.js:326:15 -> 0.236 seconds - level norm  
'contacts'
'lastContact'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.236 seconds - level norm  
{
0: {
  model: 'contacts', 
  child: false, 
  friendlyName: 'Last contact', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Last contact', 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: null, 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.236 seconds - level norm  
'contacts'
'nextAction'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.236 seconds - level norm  
{
0: {
  friendlyName: 'Next action', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'text', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: null, 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.236 seconds - level norm  
'contacts'
'nextActionDate'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.236 seconds - level norm  
{
0: {
  friendlyName: 'Next action date', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
  input: {
    type: 'date', 
    hidden: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: null, 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:416:11 -> 0.236 seconds - level verbose  
{
group: 'contacts', 
rows: '
            <tr class="d-flex">
              <th scope="row" class="col-3" >
                <span title="Linked from: 'user' via column 'organisation'.">
                  Associated people
                </span>
              </th>
              <td  class="col-7">
                
              </td>
              <td class="col-2 text-center">
                <button onclick="document.location='/admin?table=user&mode=new&prepopulate=organisation&organisation=35'" type="button" class="btn ...', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.236 seconds - level norm  
'sales'
'salesorders'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.236 seconds - level norm  
{
0: {
  collection: 'salesorders', 
  via: 'customer', 
  collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
  friendlyName: 'Salesorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'salesorders' via column 'customer'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
1: undefined, 
2: 0, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:343:17 -> 0.237 seconds - level norm  
{
collection: 'salesorders', 
via: 'customer', 
collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
friendlyName: 'Salesorders', 
database: { }, 
process: { }, 
description: 'Linked from: 'salesorders' via column 'customer'.', 
input: { class: 'form-control',  type: 'text',  }, 
display: { }, 
canEdit: true, 
canView: true, 
permission: { all: [ 'admin',  'sales',  ],  }, 
}

------------------------------------------------------------
has-permission.js:6:9 -> 0.237 seconds - level norm  
{
permission: 'sales', 
table: 'salesorders', 
has: 'edit', 
}

------------------------------------------------------------
table-data.js:9:9 -> 0.237 seconds - level verbose  
{ inputs: { 0: 'salesorders',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.237 seconds - level verbose  
'Customer orders'

------------------------------------------------------------
table-data.js:26:13 -> 0.237 seconds - level verbose  
{ all: [ 'sales',  'admin',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.237 seconds - level verbose  
'Sales orders'

------------------------------------------------------------
table-data.js:26:13 -> 0.237 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:26:13 -> 0.237 seconds - level verbose  
{
columns: [ 'updatedAt',  'id',  'customer',  'date',  ], 
open: 'salesorderlines', 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.237 seconds - level verbose  
{ postProcess: Function,  }

------------------------------------------------------------
table-data.js:46:9 -> 0.237 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.237 seconds - level verbose  
'Salesorders'

------------------------------------------------------------
table-data.js:100:9 -> 0.237 seconds - level verbose  
{
canedit: false, 
permission: undefined, 
mergedpermission: { all: [ 'sales',  'admin',  ],  }, 
tableData: {
  description: 'Customer orders', 
  permission: { all: [Deeper Object below level 3],  }, 
  friendlyName: 'Salesorders', 
  rowTitle: Function, 
  list: {
    columns: [Deeper Object below level 3], 
    open: 'salesorderlines', 
    }, 
  edit: { postProcess: Function,  }, 
  primaryKey: 'id', 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
has-permission.js:18:9 -> 0.237 seconds - level norm  
{
tablepermission: { all: [ 'sales',  'admin',  ],  }, 
}

------------------------------------------------------------
has-permission.js:87:9 -> 0.237 seconds - level norm  
true

------------------------------------------------------------
list-row.js:326:15 -> 0.237 seconds - level norm  
'sales'
'lastSale'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.238 seconds - level norm  
{
0: {
  type: 'number', 
  model: 'salesorders', 
  friendlyName: 'Last sale', 
  description: 'Created automatically. This is a link to the last sales order.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
1: null, 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:416:11 -> 0.238 seconds - level verbose  
{
group: 'sales', 
rows: '
            <tr class="d-flex">
              <th scope="row" class="col-3" >
                <span title="Linked from: 'salesorders' via column 'customer'.">
                  Salesorders
                </span>
              </th>
              <td  class="col-7">
                
              </td>
              <td class="col-2 text-center">
                <button onclick="document.location='/admin?table=salesorders&mode=new&prepopulate=customer&customer=35'" type="button" class="btn btn-...', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.238 seconds - level norm  
'products'
'products'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.238 seconds - level norm  
{
0: {
  collection: 'products', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'price',  'class',  'description',  ], 
    }, 
  friendlyName: 'Products', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'products' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
1: undefined, 
2: 0, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:343:17 -> 0.238 seconds - level norm  
{
collection: 'products', 
via: 'supplier', 
collectionList: {
  columns: [ 'name',  'price',  'class',  'description',  ], 
  }, 
friendlyName: 'Products', 
database: { }, 
process: { }, 
description: 'Linked from: 'products' via column 'supplier'.', 
input: { class: 'form-control',  type: 'text',  }, 
display: { }, 
canEdit: true, 
canView: true, 
permission: {
  all: [ 'admin',  'purchasing',  ], 
  view: [ 'sales',  ], 
  }, 
}

------------------------------------------------------------
has-permission.js:6:9 -> 0.238 seconds - level norm  
{
permission: 'sales', 
table: 'products', 
has: 'edit', 
}

------------------------------------------------------------
table-data.js:9:9 -> 0.238 seconds - level verbose  
{ inputs: { 0: 'products',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.238 seconds - level verbose  
'Products'

------------------------------------------------------------
table-data.js:26:13 -> 0.238 seconds - level verbose  
'One record for each product that the organisation deals in.'

------------------------------------------------------------
table-data.js:26:13 -> 0.238 seconds - level verbose  
'Products'

------------------------------------------------------------
table-data.js:26:13 -> 0.238 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:26:13 -> 0.238 seconds - level verbose  
{
columns: [
  'id', 
  'updatedAt', 
  'id', 
  'name', 
  'supplier', 
  'price', 
  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.238 seconds - level verbose  
{
all: [ 'admin',  'purchasing',  ], 
view: [ 'sales',  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.238 seconds - level verbose  
{
basic: {
  static: true, 
  columns: [ 'id',  'name',  'price',  ], 
  }, 
details: {
  columns: [
    'supplier', 
    'vatable', 
    'class', 
    'overview', 
    ], 
  }, 
transactions: {
  columns: [ 'purchases',  'sales',  ], 
  open: 'sales', 
  }, 
related: {
  friendlyName: 'Related Products', 
  columns: [ 'subproductOf',  'subproducts',  ], 
  }, 
description: {
  friendlyName: 'Full description', 
  columns: [ 'description',  ], 
  }, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.239 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.239 seconds - level verbose  
'Products'

------------------------------------------------------------
table-data.js:100:9 -> 0.239 seconds - level verbose  
{
canedit: false, 
permission: undefined, 
mergedpermission: {
  all: [ 'admin',  'purchasing',  ], 
  view: [ 'sales',  ], 
  }, 
tableData: {
  description: 'Products', 
  extendedDescription: 'One record for each product that the organisation deals in.', 
  friendlyName: 'Products', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  permission: {
    all: [Deeper Object below level 3], 
    view: [Deeper Object below level 3], 
    }, 
  groups: {
    basic: [Deeper Object below level 3], 
    details: [Deeper Object below level 3], 
    transactions: [Deeper Object below level 3], 
    related: [Deeper Object below level 3], 
    description: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
has-permission.js:18:9 -> 0.239 seconds - level norm  
{
tablepermission: {
  all: [ 'admin',  'purchasing',  ], 
  view: [ 'sales',  ], 
  }, 
}

------------------------------------------------------------
has-permission.js:87:9 -> 0.239 seconds - level norm  
false

------------------------------------------------------------
list-row.js:326:15 -> 0.239 seconds - level norm  
'products'
'purchaseorders'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.239 seconds - level norm  
{
0: {
  collection: 'purchaseorders', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'date',  'status',  'notes',  ], 
    }, 
  friendlyName: 'Purchaseorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
1: undefined, 
2: 0, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:343:17 -> 0.239 seconds - level norm  
{
collection: 'purchaseorders', 
via: 'supplier', 
collectionList: {
  columns: [ 'name',  'date',  'status',  'notes',  ], 
  }, 
friendlyName: 'Purchaseorders', 
database: { }, 
process: { }, 
description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
input: { class: 'form-control',  type: 'text',  }, 
display: { }, 
canEdit: true, 
canView: true, 
permission: {
  all: [ 'admin',  'purchasing',  ], 
  view: [ 'sales',  ], 
  }, 
}

------------------------------------------------------------
has-permission.js:6:9 -> 0.239 seconds - level norm  
{
permission: 'sales', 
table: 'purchaseorders', 
has: 'edit', 
}

------------------------------------------------------------
table-data.js:9:9 -> 0.239 seconds - level verbose  
{ inputs: { 0: 'purchaseorders',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.239 seconds - level verbose  
'Purchase orders'

------------------------------------------------------------
table-data.js:26:13 -> 0.239 seconds - level verbose  
'Purchase Orders'

------------------------------------------------------------
table-data.js:26:13 -> 0.239 seconds - level verbose  
{ all: [ 'purchasing',  'admin',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.239 seconds - level verbose  
'Add new purchase order'

------------------------------------------------------------
table-data.js:26:13 -> 0.239 seconds - level verbose  
'purchaseorderlines'

------------------------------------------------------------
table-data.js:46:9 -> 0.240 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.240 seconds - level verbose  
'Purchaseorders'

------------------------------------------------------------
table-data.js:100:9 -> 0.240 seconds - level verbose  
{
canedit: false, 
permission: undefined, 
mergedpermission: { all: [ 'purchasing',  'admin',  ],  }, 
tableData: {
  description: 'Purchase orders', 
  friendlyName: 'Purchaseorders', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add new purchase order', 
  open: 'purchaseorderlines', 
  primaryKey: 'id', 
  edit: { }, 
  list: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
has-permission.js:18:9 -> 0.240 seconds - level norm  
{
tablepermission: { all: [ 'purchasing',  'admin',  ],  }, 
}

------------------------------------------------------------
has-permission.js:87:9 -> 0.240 seconds - level norm  
false

------------------------------------------------------------
list-row.js:416:11 -> 0.240 seconds - level verbose  
{
group: 'products', 
rows: '
            <tr class="d-flex">
              <th scope="row" class="col-3" >
                <span title="Linked from: 'products' via column 'supplier'.">
                  Products
                </span>
              </th>
              <td  class="col-7">
                
              </td>
              <td class="col-2 text-center">
                
              </td>
            </tr>
            <tr class="d-flex">
              <th scope="row" class="col-3" >
                <span t...', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.240 seconds - level norm  
'website'
'webpages'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.240 seconds - level norm  
{
0: {
  collection: 'webpages', 
  via: 'author', 
  friendlyName: 'Webpages', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'webpages' via column 'author'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
1: undefined, 
2: 0, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:343:17 -> 0.240 seconds - level norm  
{
collection: 'webpages', 
via: 'author', 
friendlyName: 'Webpages', 
database: { }, 
process: { }, 
description: 'Linked from: 'webpages' via column 'author'.', 
input: { class: 'form-control',  type: 'text',  }, 
display: { }, 
canEdit: true, 
canView: true, 
permission: { all: [ 'admin',  'web',  ],  }, 
}

------------------------------------------------------------
has-permission.js:6:9 -> 0.240 seconds - level norm  
{
permission: 'sales', 
table: 'webpages', 
has: 'edit', 
}

------------------------------------------------------------
table-data.js:9:9 -> 0.240 seconds - level verbose  
{ inputs: { 0: 'webpages',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.240 seconds - level verbose  
'Web Pages'

------------------------------------------------------------
table-data.js:26:13 -> 0.240 seconds - level verbose  
{ all: [ 'admin',  'web',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.240 seconds - level verbose  
{
columns: [
  'pageno', 
  'slug', 
  'title', 
  'author', 
  'status', 
  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.241 seconds - level verbose  
{
basic: {
  static: true, 
  columns: [ 'title',  'headline',  'status',  'author',  ], 
  }, 
content: { columns: [ 'pageContent',  ],  }, 
placement: {
  columns: [ 'slug',  'onMenu',  'parent',  'tags',  ], 
  }, 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.241 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:46:9 -> 0.241 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.241 seconds - level verbose  
'Webpages'

------------------------------------------------------------
table-data.js:100:9 -> 0.241 seconds - level verbose  
{
canedit: false, 
permission: undefined, 
mergedpermission: { all: [ 'admin',  'web',  ],  }, 
tableData: {
  description: 'Web Pages', 
  permission: { all: [Deeper Object below level 3],  }, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basic: [Deeper Object below level 3], 
    content: [Deeper Object below level 3], 
    placement: [Deeper Object below level 3], 
    }, 
  rowTitle: Function, 
  primaryKey: 'pageno', 
  friendlyName: 'Webpages', 
  edit: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
has-permission.js:18:9 -> 0.241 seconds - level norm  
{ tablepermission: { all: [ 'admin',  'web',  ],  },  }

------------------------------------------------------------
has-permission.js:87:9 -> 0.241 seconds - level norm  
false

------------------------------------------------------------
list-row.js:416:11 -> 0.241 seconds - level verbose  
{
group: 'website', 
rows: '
            <tr class="d-flex">
              <th scope="row" class="col-3" >
                <span title="Linked from: 'webpages' via column 'author'.">
                  Webpages
                </span>
              </th>
              <td  class="col-7">
                
              </td>
              <td class="col-2 text-center">
                
              </td>
            </tr>', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.241 seconds - level norm  
'other'
'id'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.241 seconds - level norm  
{
0: {
  friendlyName: 'User No', 
  type: 'number', 
  primaryKey: true, 
  autoincrement: true, 
  database: { }, 
  process: { }, 
  description: 'User No', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: 35, 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
display-field.js:69:11 -> 0.242 seconds - level norm  
35

------------------------------------------------------------
display-field.js:136:11 -> 0.242 seconds - level verbose  
{
friendlyName: 'User No', 
type: 'number', 
primaryKey: true, 
autoincrement: true, 
database: { }, 
process: { }, 
description: 'User No', 
input: { class: 'form-control',  type: 'number',  }, 
display: { }, 
canEdit: true, 
canView: true, 
}

------------------------------------------------------------
display-field.js:137:11 -> 0.242 seconds - level norm  
35

------------------------------------------------------------
list-row.js:326:15 -> 0.242 seconds - level norm  
'other'
'createdAt'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.242 seconds - level norm  
{
0: {
  friendlyName: 'Date created', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { createdAt: true,  }, 
  description: 'Date created', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
1: 1629555493202, 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
display-field.js:69:11 -> 0.242 seconds - level norm  
1629555493202

------------------------------------------------------------
display-field.js:136:11 -> 0.242 seconds - level verbose  
{
friendlyName: 'Date created', 
type: 'number', 
display: { type: 'datetime',  truncateForTableList: 16,  }, 
database: { type: 'biginteger',  }, 
process: { createdAt: true,  }, 
description: 'Date created', 
input: { class: 'form-control',  type: 'number',  }, 
canEdit: true, 
canView: true, 
}

------------------------------------------------------------
display-field.js:137:11 -> 0.242 seconds - level norm  
'Sat Aug 21 2021 15:18:13 GMT+0100 (British Summer Time)'

------------------------------------------------------------
list-row.js:326:15 -> 0.242 seconds - level norm  
'other'
'updatedAt'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.242 seconds - level norm  
{
0: {
  friendlyName: 'Date last updated', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { updatedAt: true,  }, 
  description: 'Date last updated', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
1: 1629559194424, 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
display-field.js:69:11 -> 0.242 seconds - level norm  
1629559194424

------------------------------------------------------------
display-field.js:136:11 -> 0.242 seconds - level verbose  
{
friendlyName: 'Date last updated', 
type: 'number', 
display: { type: 'datetime',  truncateForTableList: 16,  }, 
database: { type: 'biginteger',  }, 
process: { updatedAt: true,  }, 
description: 'Date last updated', 
input: { class: 'form-control',  type: 'number',  }, 
canEdit: true, 
canView: true, 
}

------------------------------------------------------------
display-field.js:137:11 -> 0.243 seconds - level norm  
'Sat Aug 21 2021 16:19:54 GMT+0100 (British Summer Time)'

------------------------------------------------------------
list-row.js:326:15 -> 0.243 seconds - level norm  
'other'
'updatedBy'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.243 seconds - level norm  
{
0: {
  friendlyName: 'Last updated by', 
  description: 'The person who last updated the row.', 
  type: 'number', 
  model: 'user', 
  process: { updatedBy: true,  }, 
  database: { }, 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: 1, 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
display-field.js:69:11 -> 0.243 seconds - level norm  
1

------------------------------------------------------------
table-data.js:9:9 -> 0.243 seconds - level verbose  
{ inputs: { 0: 'user',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.243 seconds - level verbose  
'Users'

------------------------------------------------------------
table-data.js:26:13 -> 0.243 seconds - level verbose  
'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.'

------------------------------------------------------------
table-data.js:26:13 -> 0.243 seconds - level verbose  
{ all: [ 'sales',  'purchasing',  'admin',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.243 seconds - level verbose  
'Add a new user'

------------------------------------------------------------
table-data.js:26:13 -> 0.243 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:26:13 -> 0.243 seconds - level verbose  
{
columns: [
  'id', 
  'fullName', 
  'emailAddress', 
  'userType', 
  'organisation', 
  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.243 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.243 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.244 seconds - level verbose  
'User'

------------------------------------------------------------
table-data.js:100:9 -> 0.244 seconds - level verbose  
{
canedit: false, 
permission: undefined, 
mergedpermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
get-row.js:9:9 -> 0.244 seconds - level norm  
{ inputs: { 0: 'user',  1: 1,  },  }

------------------------------------------------------------
table-data.js:9:9 -> 0.244 seconds - level verbose  
{ inputs: { 0: 'user',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.244 seconds - level verbose  
'Users'

------------------------------------------------------------
table-data.js:26:13 -> 0.244 seconds - level verbose  
'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.'

------------------------------------------------------------
table-data.js:26:13 -> 0.244 seconds - level verbose  
{ all: [ 'sales',  'purchasing',  'admin',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.244 seconds - level verbose  
'Add a new user'

------------------------------------------------------------
table-data.js:26:13 -> 0.244 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:26:13 -> 0.244 seconds - level verbose  
{
columns: [
  'id', 
  'fullName', 
  'emailAddress', 
  'userType', 
  'organisation', 
  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.244 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.244 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.244 seconds - level verbose  
'User'

------------------------------------------------------------
table-data.js:100:9 -> 0.245 seconds - level verbose  
{
canedit: false, 
permission: undefined, 
mergedpermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
get-row.js:12:9 -> 0.245 seconds - level norm  
{
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
get-row.js:14:9 -> 0.245 seconds - level norm  
'id'
1

------------------------------------------------------------
get-row.js:16:9 -> 0.245 seconds - level norm  
{ searches: [ [ 'id',  'eq',  1,  ],  ],  }

------------------------------------------------------------
get-rows.js:26:9 -> 0.245 seconds - level norm  
{
input: {
  0: 'user', 
  1: { searches: [ [ 'id',  'eq',  1,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:9:10 -> 0.245 seconds - level norm  
{ inputs: { 0: 'user',  1: '#superuser#',  },  }

------------------------------------------------------------
merge-attributes.js:13:10 -> 0.247 seconds - level verbose  
{
tableData: {
  friendlyName: 'Users', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: {
    columns: [
      'id', 
      'fullName', 
      'emailAddress', 
      'userType', 
      'organisation', 
      ], 
    }, 
  groups: {
    basics: {
      static: true, 
      open: 'none', 
      columns: [
        'fullName', 
        'emailAddress', 
        'userType', 
        'isOrg', 
        ], 
      }, 
    profile: {
      friendlyName: 'profile', 
      open: 'none', 
      columns: [ 'organisation',  'business',  'notes',  ], 
      }, 
    location: {
      friendlyName: 'How to contact', 
      open: 'none', 
      columns: [
        'streetAddress', 
        'zip', 
        'country', 
        'region', 
        'mainPhone', 
        'mobilePhone', 
        ], 
      }, 
    contacts: {
      friendlyName: 'Contacts', 
      open: 'contacts', 
      columns: [
        'people', 
        'contacts', 
        'lastContact', 
        'nextAction', 
        'nextActionDate', 
        ], 
      }, 
    sales: {
      friendlyName: 'Sales', 
      open: 'salesorders', 
      columns: [ 'salesorders',  'lastSale',  ], 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      friendlyName: 'Products supplied', 
      open: 'products', 
      columns: [ 'products',  'purchaseorders',  ], 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    website: {
      friendlyName: 'Website', 
      open: 'website', 
      columns: [ 'webpages',  ], 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    other: {
      friendlyName: 'Other', 
      columns: [
        'id', 
        'createdAt', 
        'updatedAt', 
        'updatedBy', 
        'password', 
        'salt', 
        'forgottenPasswordToken', 
        'forgottenPasswordExpire', 
        'isSuperAdmin', 
        'lastSeenAt', 
        'permission', 
        ], 
      }, 
    }, 
  attributes: {
    id: {
      friendlyName: 'User No', 
      type: 'number', 
      primaryKey: true, 
      autoincrement: true, 
      database: { }, 
      process: { }, 
      description: 'User No', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    createdAt: {
      friendlyName: 'Date created', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { createdAt: true,  }, 
      description: 'Date created', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedAt: {
      friendlyName: 'Date last updated', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { updatedAt: true,  }, 
      description: 'Date last updated', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedBy: {
      friendlyName: 'Last updated by', 
      description: 'The person who last updated the row.', 
      type: 'number', 
      model: 'user', 
      process: { updatedBy: true,  }, 
      database: { }, 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    fullName: {
      type: 'string', 
      description: 'Full representation of the user's name.', 
      example: 'Mary Sue van der McHenst', 
      input: {
        required: true, 
        placeholder: 'Please enter the persons full name', 
        class: 'form-control', 
        type: 'text', 
        }, 
      friendlyName: 'Full name', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    emailAddress: {
      type: 'string', 
      friendlyName: 'Email address', 
      database: { }, 
      process: { }, 
      description: 'Email address', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    password: {
      type: 'string', 
      description: 'Securely hashed representation of the user's login password.', 
      permission: '#superuser#', 
      example: '2$28a8eabna301089103-13948134nad', 
      friendlyName: 'Password', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salt: {
      type: 'string', 
      permission: '#superuser#', 
      friendlyName: 'Salt', 
      database: { }, 
      process: { }, 
      description: 'Salt', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    forgottenPasswordToken: {
      permission: '#superuser#', 
      type: 'string', 
      friendlyName: 'Forgotten password token', 
      database: { }, 
      process: { }, 
      description: 'Forgotten password token', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    forgottenPasswordExpire: {
      permission: '#superuser#', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Forgotten password expire', 
      process: { }, 
      description: 'Forgotten password expire', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    isSuperAdmin: {
      type: 'boolean', 
      description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
      friendlyName: 'Is super admin', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'checkbox',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSeenAt: {
      type: 'number', 
      description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
      example: 1502844074211, 
      input: { type: 'date',  class: 'form-control',  }, 
      display: { type: 'date',  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Last seen at', 
      process: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    streetAddress: {
      type: 'string', 
      input: {
        type: 'textarea', 
        rows: 5, 
        cols: 60, 
        placeholder: 'Please enter the street address of the user', 
        class: 'form-control', 
        }, 
      friendlyName: 'Street address', 
      database: { }, 
      process: { }, 
      description: 'Street address', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    zip: {
      type: 'string', 
      friendlyName: 'Zip', 
      database: { }, 
      process: { }, 
      description: 'Zip', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    country: {
      type: 'string', 
      friendlyName: 'Country', 
      database: { }, 
      process: { }, 
      description: 'Country', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    region: {
      description: 'This is an example of a select using the data in the isIn attribute.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: [
          'Europe', 
          'Middle East', 
          'Africa', 
          'South Asia', 
          'East', 
          'N America', 
          'S America', 
          ], 
        class: 'form-control', 
        }, 
      friendlyName: 'Region', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    permission: {
      friendlyName: 'Permission set', 
      type: 'string', 
      description: 'Permission set.', 
      extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
      allowNull: true, 
      input: {
        type: 'select', 
        values: Function, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    isOrg: {
      friendlyName: 'Person or Business?', 
      type: 'string', 
      description: 'This record describes a business rather than a person', 
      input: {
        type: 'radio', 
        values: { P: 'Person',  B: 'Business/Organisation',  }, 
        required: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    business: {
      type: 'string', 
      description: 'Description of the customer's business', 
      friendlyName: 'The type of business.', 
      input: {
        type: 'textarea', 
        rows: 3, 
        cols: 60, 
        placeholder: 'Please enter a description of the user's business and place in the organisation', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    organisation: {
      friendlyName: 'Organisation', 
      model: 'user', 
      description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
      input: {
        type: 'select', 
        search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    userType: {
      description: 'The type of user.  Customer/Supplier or in-house.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: {
          L: 'Sales lead', 
          P: 'Prospect', 
          C: 'Customer', 
          S: 'Supplier', 
          I: 'In-house staff', 
          N: 'No longer considered a prospect', 
          O: 'Other', 
          }, 
        required: true, 
        class: 'form-control', 
        }, 
      friendlyName: 'User type', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastContact: {
      model: 'contacts', 
      child: false, 
      friendlyName: 'Last contact', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Last contact', 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextActionDate: {
      friendlyName: 'Next action date', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
      input: {
        type: 'date', 
        hidden: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextAction: {
      friendlyName: 'Next action', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'text', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mobilePhone: {
      type: 'string', 
      friendlyName: 'Mobile phone', 
      database: { }, 
      process: { }, 
      description: 'Mobile phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mainPhone: {
      type: 'string', 
      friendlyName: 'Main phone', 
      database: { }, 
      process: { }, 
      description: 'Main phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSale: {
      type: 'number', 
      model: 'salesorders', 
      friendlyName: 'Last sale', 
      description: 'Created automatically. This is a link to the last sales order.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    notes: {
      type: 'string', 
      friendlyName: 'Notes', 
      input: {
        type: 'textarea', 
        rows: 6, 
        cols: 60, 
        placeholder: 'Please enter any notes about this user.', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Notes', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    webpages: {
      collection: 'webpages', 
      via: 'author', 
      friendlyName: 'Webpages', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'webpages' via column 'author'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    contacts: {
      collection: 'contacts', 
      via: 'user', 
      collectionList: {
        limit: 5, 
        order: 'date', 
        direction: 'DESC', 
        heading: 'Recent contacts', 
        columns: [ 'id',  'date',  'notes',  'closed',  ], 
        addChildTip: 'Add a new contact for this user.', 
        }, 
      friendlyName: 'Contacts', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'contacts' via column 'user'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salesorders: {
      collection: 'salesorders', 
      via: 'customer', 
      collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
      friendlyName: 'Salesorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'salesorders' via column 'customer'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      collection: 'products', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'price',  'class',  'description',  ], 
        }, 
      friendlyName: 'Products', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'products' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    purchaseorders: {
      collection: 'purchaseorders', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'date',  'status',  'notes',  ], 
        }, 
      friendlyName: 'Purchaseorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    people: {
      friendlyName: 'Associated people', 
      collection: 'user', 
      via: 'organisation', 
      collectionList: {
        columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
        }, 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'user' via column 'organisation'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:21:9 -> 0.249 seconds - level verbose  
{
table: 'user', 
attributes: {
  id: {
    friendlyName: 'User No', 
    type: 'number', 
    primaryKey: true, 
    autoincrement: true, 
    database: { }, 
    process: { }, 
    description: 'User No', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  createdAt: {
    friendlyName: 'Date created', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { createdAt: true,  }, 
    description: 'Date created', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedAt: {
    friendlyName: 'Date last updated', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { updatedAt: true,  }, 
    description: 'Date last updated', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedBy: {
    friendlyName: 'Last updated by', 
    description: 'The person who last updated the row.', 
    type: 'number', 
    model: 'user', 
    process: { updatedBy: true,  }, 
    database: { }, 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  fullName: {
    type: 'string', 
    description: 'Full representation of the user's name.', 
    example: 'Mary Sue van der McHenst', 
    input: {
      required: true, 
      placeholder: 'Please enter the persons full name', 
      class: 'form-control', 
      type: 'text', 
      }, 
    friendlyName: 'Full name', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  emailAddress: {
    type: 'string', 
    friendlyName: 'Email address', 
    database: { }, 
    process: { }, 
    description: 'Email address', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  password: {
    type: 'string', 
    description: 'Securely hashed representation of the user's login password.', 
    permission: '#superuser#', 
    example: '2$28a8eabna301089103-13948134nad', 
    friendlyName: 'Password', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salt: {
    type: 'string', 
    permission: '#superuser#', 
    friendlyName: 'Salt', 
    database: { }, 
    process: { }, 
    description: 'Salt', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  forgottenPasswordToken: {
    permission: '#superuser#', 
    type: 'string', 
    friendlyName: 'Forgotten password token', 
    database: { }, 
    process: { }, 
    description: 'Forgotten password token', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  forgottenPasswordExpire: {
    permission: '#superuser#', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Forgotten password expire', 
    process: { }, 
    description: 'Forgotten password expire', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  isSuperAdmin: {
    type: 'boolean', 
    description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
    friendlyName: 'Is super admin', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'checkbox',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSeenAt: {
    type: 'number', 
    description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
    example: 1502844074211, 
    input: { type: 'date',  class: 'form-control',  }, 
    display: { type: 'date',  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Last seen at', 
    process: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  streetAddress: {
    type: 'string', 
    input: {
      type: 'textarea', 
      rows: 5, 
      cols: 60, 
      placeholder: 'Please enter the street address of the user', 
      class: 'form-control', 
      }, 
    friendlyName: 'Street address', 
    database: { }, 
    process: { }, 
    description: 'Street address', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  zip: {
    type: 'string', 
    friendlyName: 'Zip', 
    database: { }, 
    process: { }, 
    description: 'Zip', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  country: {
    type: 'string', 
    friendlyName: 'Country', 
    database: { }, 
    process: { }, 
    description: 'Country', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  region: {
    description: 'This is an example of a select using the data in the isIn attribute.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: [
        'Europe', 
        'Middle East', 
        'Africa', 
        'South Asia', 
        'East', 
        'N America', 
        'S America', 
        ], 
      class: 'form-control', 
      }, 
    friendlyName: 'Region', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  permission: {
    friendlyName: 'Permission set', 
    type: 'string', 
    description: 'Permission set.', 
    extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
    allowNull: true, 
    input: {
      type: 'select', 
      values: Function, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  isOrg: {
    friendlyName: 'Person or Business?', 
    type: 'string', 
    description: 'This record describes a business rather than a person', 
    input: {
      type: 'radio', 
      values: { P: 'Person',  B: 'Business/Organisation',  }, 
      required: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  business: {
    type: 'string', 
    description: 'Description of the customer's business', 
    friendlyName: 'The type of business.', 
    input: {
      type: 'textarea', 
      rows: 3, 
      cols: 60, 
      placeholder: 'Please enter a description of the user's business and place in the organisation', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  organisation: {
    friendlyName: 'Organisation', 
    model: 'user', 
    description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
    input: {
      type: 'select', 
      search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  userType: {
    description: 'The type of user.  Customer/Supplier or in-house.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: {
        L: 'Sales lead', 
        P: 'Prospect', 
        C: 'Customer', 
        S: 'Supplier', 
        I: 'In-house staff', 
        N: 'No longer considered a prospect', 
        O: 'Other', 
        }, 
      required: true, 
      class: 'form-control', 
      }, 
    friendlyName: 'User type', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastContact: {
    model: 'contacts', 
    child: false, 
    friendlyName: 'Last contact', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Last contact', 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextActionDate: {
    friendlyName: 'Next action date', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
    input: {
      type: 'date', 
      hidden: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextAction: {
    friendlyName: 'Next action', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'text', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mobilePhone: {
    type: 'string', 
    friendlyName: 'Mobile phone', 
    database: { }, 
    process: { }, 
    description: 'Mobile phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mainPhone: {
    type: 'string', 
    friendlyName: 'Main phone', 
    database: { }, 
    process: { }, 
    description: 'Main phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSale: {
    type: 'number', 
    model: 'salesorders', 
    friendlyName: 'Last sale', 
    description: 'Created automatically. This is a link to the last sales order.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  notes: {
    type: 'string', 
    friendlyName: 'Notes', 
    input: {
      type: 'textarea', 
      rows: 6, 
      cols: 60, 
      placeholder: 'Please enter any notes about this user.', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Notes', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  webpages: {
    collection: 'webpages', 
    via: 'author', 
    friendlyName: 'Webpages', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'webpages' via column 'author'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'web',  ],  }, 
    }, 
  contacts: {
    collection: 'contacts', 
    via: 'user', 
    collectionList: {
      limit: 5, 
      order: 'date', 
      direction: 'DESC', 
      heading: 'Recent contacts', 
      columns: [ 'id',  'date',  'notes',  'closed',  ], 
      addChildTip: 'Add a new contact for this user.', 
      }, 
    friendlyName: 'Contacts', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'contacts' via column 'user'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salesorders: {
    collection: 'salesorders', 
    via: 'customer', 
    collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
    friendlyName: 'Salesorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'salesorders' via column 'customer'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  products: {
    collection: 'products', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'price',  'class',  'description',  ], 
      }, 
    friendlyName: 'Products', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'products' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  purchaseorders: {
    collection: 'purchaseorders', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'date',  'status',  'notes',  ], 
      }, 
    friendlyName: 'Purchaseorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  people: {
    friendlyName: 'Associated people', 
    collection: 'user', 
    via: 'organisation', 
    collectionList: {
      columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
      }, 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'user' via column 'organisation'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  }, 
}

------------------------------------------------------------
invert-groups.js:5:9 -> 0.251 seconds - level verbose  
{
inputs: {
  0: {
    friendlyName: 'Users', 
    description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
    permission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
    addRow: 'Add a new user', 
    rowTitle: Function, 
    list: {
      columns: [
        'id', 
        'fullName', 
        'emailAddress', 
        'userType', 
        'organisation', 
        ], 
      }, 
    groups: {
      basics: {
        static: true, 
        open: 'none', 
        columns: [
          'fullName', 
          'emailAddress', 
          'userType', 
          'isOrg', 
          ], 
        }, 
      profile: {
        friendlyName: 'profile', 
        open: 'none', 
        columns: [ 'organisation',  'business',  'notes',  ], 
        }, 
      location: {
        friendlyName: 'How to contact', 
        open: 'none', 
        columns: [
          'streetAddress', 
          'zip', 
          'country', 
          'region', 
          'mainPhone', 
          'mobilePhone', 
          ], 
        }, 
      contacts: {
        friendlyName: 'Contacts', 
        open: 'contacts', 
        columns: [
          'people', 
          'contacts', 
          'lastContact', 
          'nextAction', 
          'nextActionDate', 
          ], 
        }, 
      sales: {
        friendlyName: 'Sales', 
        open: 'salesorders', 
        columns: [ 'salesorders',  'lastSale',  ], 
        permission: { all: [ 'admin',  'sales',  ],  }, 
        }, 
      products: {
        friendlyName: 'Products supplied', 
        open: 'products', 
        columns: [ 'products',  'purchaseorders',  ], 
        permission: {
          all: [ 'admin',  'purchasing',  ], 
          view: [ 'sales',  ], 
          }, 
        }, 
      website: {
        friendlyName: 'Website', 
        open: 'website', 
        columns: [ 'webpages',  ], 
        permission: { all: [ 'admin',  'web',  ],  }, 
        }, 
      other: {
        friendlyName: 'Other', 
        columns: [
          'id', 
          'createdAt', 
          'updatedAt', 
          'updatedBy', 
          'password', 
          'salt', 
          'forgottenPasswordToken', 
          'forgottenPasswordExpire', 
          'isSuperAdmin', 
          'lastSeenAt', 
          'permission', 
          ], 
        }, 
      }, 
    attributes: {
      id: {
        friendlyName: 'User No', 
        type: 'number', 
        primaryKey: true, 
        autoincrement: true, 
        database: { }, 
        process: { }, 
        description: 'User No', 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      createdAt: {
        friendlyName: 'Date created', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        process: { createdAt: true,  }, 
        description: 'Date created', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      updatedAt: {
        friendlyName: 'Date last updated', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        process: { updatedAt: true,  }, 
        description: 'Date last updated', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      updatedBy: {
        friendlyName: 'Last updated by', 
        description: 'The person who last updated the row.', 
        type: 'number', 
        model: 'user', 
        process: { updatedBy: true,  }, 
        database: { }, 
        input: { class: 'form-control',  type: 'number',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      fullName: {
        type: 'string', 
        description: 'Full representation of the user's name.', 
        example: 'Mary Sue van der McHenst', 
        input: {
          required: true, 
          placeholder: 'Please enter the persons full name', 
          class: 'form-control', 
          type: 'text', 
          }, 
        friendlyName: 'Full name', 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      emailAddress: {
        type: 'string', 
        friendlyName: 'Email address', 
        database: { }, 
        process: { }, 
        description: 'Email address', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      password: {
        type: 'string', 
        description: 'Securely hashed representation of the user's login password.', 
        permission: '#superuser#', 
        example: '2$28a8eabna301089103-13948134nad', 
        friendlyName: 'Password', 
        database: { }, 
        process: { }, 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      salt: {
        type: 'string', 
        permission: '#superuser#', 
        friendlyName: 'Salt', 
        database: { }, 
        process: { }, 
        description: 'Salt', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      forgottenPasswordToken: {
        permission: '#superuser#', 
        type: 'string', 
        friendlyName: 'Forgotten password token', 
        database: { }, 
        process: { }, 
        description: 'Forgotten password token', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      forgottenPasswordExpire: {
        permission: '#superuser#', 
        type: 'number', 
        display: { type: 'datetime',  truncateForTableList: 16,  }, 
        database: { type: 'biginteger',  }, 
        friendlyName: 'Forgotten password expire', 
        process: { }, 
        description: 'Forgotten password expire', 
        input: { class: 'form-control',  type: 'number',  }, 
        canEdit: true, 
        canView: true, 
        }, 
      isSuperAdmin: {
        type: 'boolean', 
        description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
        friendlyName: 'Is super admin', 
        database: { }, 
        process: { }, 
        input: { class: 'form-control',  type: 'checkbox',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      lastSeenAt: {
        type: 'number', 
        description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
        example: 1502844074211, 
        input: { type: 'date',  class: 'form-control',  }, 
        display: { type: 'date',  }, 
        database: { type: 'biginteger',  }, 
        friendlyName: 'Last seen at', 
        process: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      streetAddress: {
        type: 'string', 
        input: {
          type: 'textarea', 
          rows: 5, 
          cols: 60, 
          placeholder: 'Please enter the street address of the user', 
          class: 'form-control', 
          }, 
        friendlyName: 'Street address', 
        database: { }, 
        process: { }, 
        description: 'Street address', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      zip: {
        type: 'string', 
        friendlyName: 'Zip', 
        database: { }, 
        process: { }, 
        description: 'Zip', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      country: {
        type: 'string', 
        friendlyName: 'Country', 
        database: { }, 
        process: { }, 
        description: 'Country', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      region: {
        description: 'This is an example of a select using the data in the isIn attribute.', 
        type: 'string', 
        input: {
          type: 'select', 
          values: [
            'Europe', 
            'Middle East', 
            'Africa', 
            'South Asia', 
            'East', 
            'N America', 
            'S America', 
            ], 
          class: 'form-control', 
          }, 
        friendlyName: 'Region', 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      permission: {
        friendlyName: 'Permission set', 
        type: 'string', 
        description: 'Permission set.', 
        extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
        allowNull: true, 
        input: {
          type: 'select', 
          values: Function, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      isOrg: {
        friendlyName: 'Person or Business?', 
        type: 'string', 
        description: 'This record describes a business rather than a person', 
        input: {
          type: 'radio', 
          values: { P: 'Person',  B: 'Business/Organisation',  }, 
          required: true, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      business: {
        type: 'string', 
        description: 'Description of the customer's business', 
        friendlyName: 'The type of business.', 
        input: {
          type: 'textarea', 
          rows: 3, 
          cols: 60, 
          placeholder: 'Please enter a description of the user's business and place in the organisation', 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      organisation: {
        friendlyName: 'Organisation', 
        model: 'user', 
        description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
        input: {
          type: 'select', 
          search: { searches: [ [Deeper Object below level 8],  ],  }, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        type: 'number', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      userType: {
        description: 'The type of user.  Customer/Supplier or in-house.', 
        type: 'string', 
        input: {
          type: 'select', 
          values: {
            L: 'Sales lead', 
            P: 'Prospect', 
            C: 'Customer', 
            S: 'Supplier', 
            I: 'In-house staff', 
            N: 'No longer considered a prospect', 
            O: 'Other', 
            }, 
          required: true, 
          class: 'form-control', 
          }, 
        friendlyName: 'User type', 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      lastContact: {
        model: 'contacts', 
        child: false, 
        friendlyName: 'Last contact', 
        input: {
          hidden: true, 
          class: 'form-control', 
          type: 'number', 
          }, 
        database: { }, 
        process: { }, 
        description: 'Last contact', 
        type: 'number', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      nextActionDate: {
        friendlyName: 'Next action date', 
        type: 'string', 
        description: 'When a contact is entered, this is updated.', 
        extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
        input: {
          type: 'date', 
          hidden: true, 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      nextAction: {
        friendlyName: 'Next action', 
        type: 'string', 
        description: 'When a contact is entered, this is updated.', 
        extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
        input: {
          hidden: true, 
          class: 'form-control', 
          type: 'text', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      mobilePhone: {
        type: 'string', 
        friendlyName: 'Mobile phone', 
        database: { }, 
        process: { }, 
        description: 'Mobile phone', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      mainPhone: {
        type: 'string', 
        friendlyName: 'Main phone', 
        database: { }, 
        process: { }, 
        description: 'Main phone', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      lastSale: {
        type: 'number', 
        model: 'salesorders', 
        friendlyName: 'Last sale', 
        description: 'Created automatically. This is a link to the last sales order.', 
        input: {
          hidden: true, 
          class: 'form-control', 
          type: 'number', 
          }, 
        database: { }, 
        process: { }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: { all: [ 'admin',  'sales',  ],  }, 
        }, 
      notes: {
        type: 'string', 
        friendlyName: 'Notes', 
        input: {
          type: 'textarea', 
          rows: 6, 
          cols: 60, 
          placeholder: 'Please enter any notes about this user.', 
          class: 'form-control', 
          }, 
        database: { }, 
        process: { }, 
        description: 'Notes', 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      webpages: {
        collection: 'webpages', 
        via: 'author', 
        friendlyName: 'Webpages', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'webpages' via column 'author'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: { all: [ 'admin',  'web',  ],  }, 
        }, 
      contacts: {
        collection: 'contacts', 
        via: 'user', 
        collectionList: {
          limit: 5, 
          order: 'date', 
          direction: 'DESC', 
          heading: 'Recent contacts', 
          columns: [ 'id',  'date',  'notes',  'closed',  ], 
          addChildTip: 'Add a new contact for this user.', 
          }, 
        friendlyName: 'Contacts', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'contacts' via column 'user'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      salesorders: {
        collection: 'salesorders', 
        via: 'customer', 
        collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
        friendlyName: 'Salesorders', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'salesorders' via column 'customer'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: { all: [ 'admin',  'sales',  ],  }, 
        }, 
      products: {
        collection: 'products', 
        via: 'supplier', 
        collectionList: {
          columns: [ 'name',  'price',  'class',  'description',  ], 
          }, 
        friendlyName: 'Products', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'products' via column 'supplier'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: {
          all: [ 'admin',  'purchasing',  ], 
          view: [ 'sales',  ], 
          }, 
        }, 
      purchaseorders: {
        collection: 'purchaseorders', 
        via: 'supplier', 
        collectionList: {
          columns: [ 'name',  'date',  'status',  'notes',  ], 
          }, 
        friendlyName: 'Purchaseorders', 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        permission: {
          all: [ 'admin',  'purchasing',  ], 
          view: [ 'sales',  ], 
          }, 
        }, 
      people: {
        friendlyName: 'Associated people', 
        collection: 'user', 
        via: 'organisation', 
        collectionList: {
          columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
          }, 
        database: { }, 
        process: { }, 
        description: 'Linked from: 'user' via column 'organisation'.', 
        input: { class: 'form-control',  type: 'text',  }, 
        display: { }, 
        canEdit: true, 
        canView: true, 
        }, 
      }, 
    }, 
  1: {
    id: {
      friendlyName: 'User No', 
      type: 'number', 
      primaryKey: true, 
      autoincrement: true, 
      database: { }, 
      process: { }, 
      description: 'User No', 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    createdAt: {
      friendlyName: 'Date created', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { createdAt: true,  }, 
      description: 'Date created', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedAt: {
      friendlyName: 'Date last updated', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      process: { updatedAt: true,  }, 
      description: 'Date last updated', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    updatedBy: {
      friendlyName: 'Last updated by', 
      description: 'The person who last updated the row.', 
      type: 'number', 
      model: 'user', 
      process: { updatedBy: true,  }, 
      database: { }, 
      input: { class: 'form-control',  type: 'number',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    fullName: {
      type: 'string', 
      description: 'Full representation of the user's name.', 
      example: 'Mary Sue van der McHenst', 
      input: {
        required: true, 
        placeholder: 'Please enter the persons full name', 
        class: 'form-control', 
        type: 'text', 
        }, 
      friendlyName: 'Full name', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    emailAddress: {
      type: 'string', 
      friendlyName: 'Email address', 
      database: { }, 
      process: { }, 
      description: 'Email address', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    password: {
      type: 'string', 
      description: 'Securely hashed representation of the user's login password.', 
      permission: '#superuser#', 
      example: '2$28a8eabna301089103-13948134nad', 
      friendlyName: 'Password', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salt: {
      type: 'string', 
      permission: '#superuser#', 
      friendlyName: 'Salt', 
      database: { }, 
      process: { }, 
      description: 'Salt', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    forgottenPasswordToken: {
      permission: '#superuser#', 
      type: 'string', 
      friendlyName: 'Forgotten password token', 
      database: { }, 
      process: { }, 
      description: 'Forgotten password token', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    forgottenPasswordExpire: {
      permission: '#superuser#', 
      type: 'number', 
      display: { type: 'datetime',  truncateForTableList: 16,  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Forgotten password expire', 
      process: { }, 
      description: 'Forgotten password expire', 
      input: { class: 'form-control',  type: 'number',  }, 
      canEdit: true, 
      canView: true, 
      }, 
    isSuperAdmin: {
      type: 'boolean', 
      description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
      friendlyName: 'Is super admin', 
      database: { }, 
      process: { }, 
      input: { class: 'form-control',  type: 'checkbox',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSeenAt: {
      type: 'number', 
      description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
      example: 1502844074211, 
      input: { type: 'date',  class: 'form-control',  }, 
      display: { type: 'date',  }, 
      database: { type: 'biginteger',  }, 
      friendlyName: 'Last seen at', 
      process: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    streetAddress: {
      type: 'string', 
      input: {
        type: 'textarea', 
        rows: 5, 
        cols: 60, 
        placeholder: 'Please enter the street address of the user', 
        class: 'form-control', 
        }, 
      friendlyName: 'Street address', 
      database: { }, 
      process: { }, 
      description: 'Street address', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    zip: {
      type: 'string', 
      friendlyName: 'Zip', 
      database: { }, 
      process: { }, 
      description: 'Zip', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    country: {
      type: 'string', 
      friendlyName: 'Country', 
      database: { }, 
      process: { }, 
      description: 'Country', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    region: {
      description: 'This is an example of a select using the data in the isIn attribute.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: [
          'Europe', 
          'Middle East', 
          'Africa', 
          'South Asia', 
          'East', 
          'N America', 
          'S America', 
          ], 
        class: 'form-control', 
        }, 
      friendlyName: 'Region', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    permission: {
      friendlyName: 'Permission set', 
      type: 'string', 
      description: 'Permission set.', 
      extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
      allowNull: true, 
      input: {
        type: 'select', 
        values: Function, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    isOrg: {
      friendlyName: 'Person or Business?', 
      type: 'string', 
      description: 'This record describes a business rather than a person', 
      input: {
        type: 'radio', 
        values: { P: 'Person',  B: 'Business/Organisation',  }, 
        required: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    business: {
      type: 'string', 
      description: 'Description of the customer's business', 
      friendlyName: 'The type of business.', 
      input: {
        type: 'textarea', 
        rows: 3, 
        cols: 60, 
        placeholder: 'Please enter a description of the user's business and place in the organisation', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    organisation: {
      friendlyName: 'Organisation', 
      model: 'user', 
      description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
      input: {
        type: 'select', 
        search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    userType: {
      description: 'The type of user.  Customer/Supplier or in-house.', 
      type: 'string', 
      input: {
        type: 'select', 
        values: {
          L: 'Sales lead', 
          P: 'Prospect', 
          C: 'Customer', 
          S: 'Supplier', 
          I: 'In-house staff', 
          N: 'No longer considered a prospect', 
          O: 'Other', 
          }, 
        required: true, 
        class: 'form-control', 
        }, 
      friendlyName: 'User type', 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastContact: {
      model: 'contacts', 
      child: false, 
      friendlyName: 'Last contact', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Last contact', 
      type: 'number', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextActionDate: {
      friendlyName: 'Next action date', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
      input: {
        type: 'date', 
        hidden: true, 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    nextAction: {
      friendlyName: 'Next action', 
      type: 'string', 
      description: 'When a contact is entered, this is updated.', 
      extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'text', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mobilePhone: {
      type: 'string', 
      friendlyName: 'Mobile phone', 
      database: { }, 
      process: { }, 
      description: 'Mobile phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    mainPhone: {
      type: 'string', 
      friendlyName: 'Main phone', 
      database: { }, 
      process: { }, 
      description: 'Main phone', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    lastSale: {
      type: 'number', 
      model: 'salesorders', 
      friendlyName: 'Last sale', 
      description: 'Created automatically. This is a link to the last sales order.', 
      input: {
        hidden: true, 
        class: 'form-control', 
        type: 'number', 
        }, 
      database: { }, 
      process: { }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    notes: {
      type: 'string', 
      friendlyName: 'Notes', 
      input: {
        type: 'textarea', 
        rows: 6, 
        cols: 60, 
        placeholder: 'Please enter any notes about this user.', 
        class: 'form-control', 
        }, 
      database: { }, 
      process: { }, 
      description: 'Notes', 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    webpages: {
      collection: 'webpages', 
      via: 'author', 
      friendlyName: 'Webpages', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'webpages' via column 'author'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'web',  ],  }, 
      }, 
    contacts: {
      collection: 'contacts', 
      via: 'user', 
      collectionList: {
        limit: 5, 
        order: 'date', 
        direction: 'DESC', 
        heading: 'Recent contacts', 
        columns: [ 'id',  'date',  'notes',  'closed',  ], 
        addChildTip: 'Add a new contact for this user.', 
        }, 
      friendlyName: 'Contacts', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'contacts' via column 'user'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    salesorders: {
      collection: 'salesorders', 
      via: 'customer', 
      collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
      friendlyName: 'Salesorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'salesorders' via column 'customer'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: { all: [ 'admin',  'sales',  ],  }, 
      }, 
    products: {
      collection: 'products', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'price',  'class',  'description',  ], 
        }, 
      friendlyName: 'Products', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'products' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    purchaseorders: {
      collection: 'purchaseorders', 
      via: 'supplier', 
      collectionList: {
        columns: [ 'name',  'date',  'status',  'notes',  ], 
        }, 
      friendlyName: 'Purchaseorders', 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      permission: {
        all: [ 'admin',  'purchasing',  ], 
        view: [ 'sales',  ], 
        }, 
      }, 
    people: {
      friendlyName: 'Associated people', 
      collection: 'user', 
      via: 'organisation', 
      collectionList: {
        columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
        }, 
      database: { }, 
      process: { }, 
      description: 'Linked from: 'user' via column 'organisation'.', 
      input: { class: 'form-control',  type: 'text',  }, 
      display: { }, 
      canEdit: true, 
      canView: true, 
      }, 
    }, 
  }, 
}

------------------------------------------------------------
invert-groups.js:16:9 -> 0.251 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
invert-groups.js:18:11 -> 0.251 seconds - level verbose  
'basics'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.251 seconds - level verbose  
'profile'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.251 seconds - level verbose  
'location'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.251 seconds - level verbose  
'contacts'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.251 seconds - level verbose  
'sales'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.251 seconds - level verbose  
'products'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.251 seconds - level verbose  
'website'

------------------------------------------------------------
invert-groups.js:18:11 -> 0.251 seconds - level verbose  
'other'

------------------------------------------------------------
invert-groups.js:31:9 -> 0.251 seconds - level verbose  
{
fullName: 'basics', 
emailAddress: 'basics', 
userType: 'basics', 
isOrg: 'basics', 
organisation: 'profile', 
business: 'profile', 
notes: 'profile', 
streetAddress: 'location', 
zip: 'location', 
country: 'location', 
region: 'location', 
mainPhone: 'location', 
mobilePhone: 'location', 
people: 'contacts', 
contacts: 'contacts', 
lastContact: 'contacts', 
nextAction: 'contacts', 
nextActionDate: 'contacts', 
salesorders: 'sales', 
lastSale: 'sales', 
products: 'products', 
purchaseorders: 'products', 
webpages: 'website', 
id: 'other', 
createdAt: 'other', 
updatedAt: 'other', 
updatedBy: 'other', 
password: 'other', 
salt: 'other', 
forgottenPasswordToken: 'other', 
forgottenPasswordExpire: 'other', 
isSuperAdmin: 'other', 
lastSeenAt: 'other', 
permission: 'other', 
}

------------------------------------------------------------
merge-attributes.js:26:9 -> 0.252 seconds - level verbose  
{
fullName: 'basics', 
emailAddress: 'basics', 
userType: 'basics', 
isOrg: 'basics', 
organisation: 'profile', 
business: 'profile', 
notes: 'profile', 
streetAddress: 'location', 
zip: 'location', 
country: 'location', 
region: 'location', 
mainPhone: 'location', 
mobilePhone: 'location', 
people: 'contacts', 
contacts: 'contacts', 
lastContact: 'contacts', 
nextAction: 'contacts', 
nextActionDate: 'contacts', 
salesorders: 'sales', 
lastSale: 'sales', 
products: 'products', 
purchaseorders: 'products', 
webpages: 'website', 
id: 'other', 
createdAt: 'other', 
updatedAt: 'other', 
updatedBy: 'other', 
password: 'other', 
salt: 'other', 
forgottenPasswordToken: 'other', 
forgottenPasswordExpire: 'other', 
isSuperAdmin: 'other', 
lastSeenAt: 'other', 
permission: 'other', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.252 seconds - level verbose  
{ key: 'id',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.252 seconds - level verbose  
{
key: 'id', 
type: {
  friendlyName: 'User No', 
  type: 'number', 
  primaryKey: true, 
  autoincrement: true, 
  database: { }, 
  process: { }, 
  description: 'User No', 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.252 seconds - level verbose  
{ key: 'id',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.252 seconds - level verbose  
{
key: 'id', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.252 seconds - level verbose  
{ key: 'createdAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.252 seconds - level verbose  
{
key: 'createdAt', 
type: {
  friendlyName: 'Date created', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { createdAt: true,  }, 
  description: 'Date created', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.252 seconds - level verbose  
{ key: 'createdAt',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.252 seconds - level verbose  
{
key: 'createdAt', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.252 seconds - level verbose  
{ key: 'updatedAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.252 seconds - level verbose  
{
key: 'updatedAt', 
type: {
  friendlyName: 'Date last updated', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  process: { updatedAt: true,  }, 
  description: 'Date last updated', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.252 seconds - level verbose  
{ key: 'updatedAt',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.253 seconds - level verbose  
{
key: 'updatedAt', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.253 seconds - level verbose  
{ key: 'updatedBy',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.253 seconds - level verbose  
{
key: 'updatedBy', 
type: {
  friendlyName: 'Last updated by', 
  description: 'The person who last updated the row.', 
  type: 'number', 
  model: 'user', 
  process: { updatedBy: true,  }, 
  database: { }, 
  input: { class: 'form-control',  type: 'number',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.253 seconds - level verbose  
{ key: 'updatedBy',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.253 seconds - level verbose  
{
key: 'updatedBy', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.253 seconds - level verbose  
{ key: 'fullName',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.253 seconds - level verbose  
{
key: 'fullName', 
type: {
  type: 'string', 
  description: 'Full representation of the user's name.', 
  example: 'Mary Sue van der McHenst', 
  input: {
    required: true, 
    placeholder: 'Please enter the persons full name', 
    class: 'form-control', 
    type: 'text', 
    }, 
  friendlyName: 'Full name', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.253 seconds - level verbose  
{ key: 'fullName',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.253 seconds - level verbose  
{
key: 'fullName', 
group: 'basics', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.253 seconds - level verbose  
{ key: 'emailAddress',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.253 seconds - level verbose  
{
key: 'emailAddress', 
type: {
  type: 'string', 
  friendlyName: 'Email address', 
  database: { }, 
  process: { }, 
  description: 'Email address', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.253 seconds - level verbose  
{ key: 'emailAddress',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.253 seconds - level verbose  
{
key: 'emailAddress', 
group: 'basics', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.254 seconds - level verbose  
{ key: 'password',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.254 seconds - level verbose  
{
key: 'password', 
type: {
  type: 'string', 
  description: 'Securely hashed representation of the user's login password.', 
  permission: '#superuser#', 
  example: '2$28a8eabna301089103-13948134nad', 
  friendlyName: 'Password', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.254 seconds - level verbose  
{ key: 'password',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.254 seconds - level verbose  
{
key: 'password', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.254 seconds - level verbose  
{ key: 'salt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.254 seconds - level verbose  
{
key: 'salt', 
type: {
  type: 'string', 
  permission: '#superuser#', 
  friendlyName: 'Salt', 
  database: { }, 
  process: { }, 
  description: 'Salt', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.254 seconds - level verbose  
{ key: 'salt',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.254 seconds - level verbose  
{
key: 'salt', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.254 seconds - level verbose  
{ key: 'forgottenPasswordToken',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.254 seconds - level verbose  
{
key: 'forgottenPasswordToken', 
type: {
  permission: '#superuser#', 
  type: 'string', 
  friendlyName: 'Forgotten password token', 
  database: { }, 
  process: { }, 
  description: 'Forgotten password token', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.254 seconds - level verbose  
{ key: 'forgottenPasswordToken',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.254 seconds - level verbose  
{
key: 'forgottenPasswordToken', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.254 seconds - level verbose  
{ key: 'forgottenPasswordExpire',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.255 seconds - level verbose  
{
key: 'forgottenPasswordExpire', 
type: {
  permission: '#superuser#', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Forgotten password expire', 
  process: { }, 
  description: 'Forgotten password expire', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.255 seconds - level verbose  
{ key: 'forgottenPasswordExpire',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.255 seconds - level verbose  
{
key: 'forgottenPasswordExpire', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.255 seconds - level verbose  
{ key: 'isSuperAdmin',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.255 seconds - level verbose  
{
key: 'isSuperAdmin', 
type: {
  type: 'boolean', 
  description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
  friendlyName: 'Is super admin', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'checkbox',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.255 seconds - level verbose  
{ key: 'isSuperAdmin',  type: 'checkbox',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.255 seconds - level verbose  
{
key: 'isSuperAdmin', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.255 seconds - level verbose  
{ key: 'lastSeenAt',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.255 seconds - level verbose  
{
key: 'lastSeenAt', 
type: {
  type: 'number', 
  description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
  example: 1502844074211, 
  input: { type: 'date',  class: 'form-control',  }, 
  display: { type: 'date',  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Last seen at', 
  process: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.255 seconds - level verbose  
{ key: 'lastSeenAt',  type: 'date',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.255 seconds - level verbose  
{
key: 'lastSeenAt', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.255 seconds - level verbose  
{ key: 'streetAddress',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.255 seconds - level verbose  
{
key: 'streetAddress', 
type: {
  type: 'string', 
  input: {
    type: 'textarea', 
    rows: 5, 
    cols: 60, 
    placeholder: 'Please enter the street address of the user', 
    class: 'form-control', 
    }, 
  friendlyName: 'Street address', 
  database: { }, 
  process: { }, 
  description: 'Street address', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.255 seconds - level verbose  
{ key: 'streetAddress',  type: 'textarea',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.256 seconds - level verbose  
{
key: 'streetAddress', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.256 seconds - level verbose  
{ key: 'zip',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.256 seconds - level verbose  
{
key: 'zip', 
type: {
  type: 'string', 
  friendlyName: 'Zip', 
  database: { }, 
  process: { }, 
  description: 'Zip', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.256 seconds - level verbose  
{ key: 'zip',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.256 seconds - level verbose  
{
key: 'zip', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.256 seconds - level verbose  
{ key: 'country',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.256 seconds - level verbose  
{
key: 'country', 
type: {
  type: 'string', 
  friendlyName: 'Country', 
  database: { }, 
  process: { }, 
  description: 'Country', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.256 seconds - level verbose  
{ key: 'country',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.256 seconds - level verbose  
{
key: 'country', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.256 seconds - level verbose  
{ key: 'region',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.256 seconds - level verbose  
{
key: 'region', 
type: {
  description: 'This is an example of a select using the data in the isIn attribute.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: [
      'Europe', 
      'Middle East', 
      'Africa', 
      'South Asia', 
      'East', 
      'N America', 
      'S America', 
      ], 
    class: 'form-control', 
    }, 
  friendlyName: 'Region', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.256 seconds - level verbose  
{ key: 'region',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.256 seconds - level verbose  
{
key: 'region', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.257 seconds - level verbose  
{ key: 'permission',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.257 seconds - level verbose  
{
key: 'permission', 
type: {
  friendlyName: 'Permission set', 
  type: 'string', 
  description: 'Permission set.', 
  extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
  allowNull: true, 
  input: {
    type: 'select', 
    values: Function, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.257 seconds - level verbose  
{ key: 'permission',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.257 seconds - level verbose  
{
key: 'permission', 
group: 'other', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.257 seconds - level verbose  
{ key: 'isOrg',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.257 seconds - level verbose  
{
key: 'isOrg', 
type: {
  friendlyName: 'Person or Business?', 
  type: 'string', 
  description: 'This record describes a business rather than a person', 
  input: {
    type: 'radio', 
    values: { P: 'Person',  B: 'Business/Organisation',  }, 
    required: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.257 seconds - level verbose  
{ key: 'isOrg',  type: 'radio',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.257 seconds - level verbose  
{
key: 'isOrg', 
group: 'basics', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.257 seconds - level verbose  
{ key: 'business',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.257 seconds - level verbose  
{
key: 'business', 
type: {
  type: 'string', 
  description: 'Description of the customer's business', 
  friendlyName: 'The type of business.', 
  input: {
    type: 'textarea', 
    rows: 3, 
    cols: 60, 
    placeholder: 'Please enter a description of the user's business and place in the organisation', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.257 seconds - level verbose  
{ key: 'business',  type: 'textarea',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.258 seconds - level verbose  
{
key: 'business', 
group: 'profile', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.258 seconds - level verbose  
{ key: 'organisation',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.258 seconds - level verbose  
{
key: 'organisation', 
type: {
  friendlyName: 'Organisation', 
  model: 'user', 
  description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
  input: {
    type: 'select', 
    search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.258 seconds - level verbose  
{ key: 'organisation',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.258 seconds - level verbose  
{
key: 'organisation', 
group: 'profile', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.258 seconds - level verbose  
{ key: 'userType',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.258 seconds - level verbose  
{
key: 'userType', 
type: {
  description: 'The type of user.  Customer/Supplier or in-house.', 
  type: 'string', 
  input: {
    type: 'select', 
    values: {
      L: 'Sales lead', 
      P: 'Prospect', 
      C: 'Customer', 
      S: 'Supplier', 
      I: 'In-house staff', 
      N: 'No longer considered a prospect', 
      O: 'Other', 
      }, 
    required: true, 
    class: 'form-control', 
    }, 
  friendlyName: 'User type', 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.258 seconds - level verbose  
{ key: 'userType',  type: 'select',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.258 seconds - level verbose  
{
key: 'userType', 
group: 'basics', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.258 seconds - level verbose  
{ key: 'lastContact',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.258 seconds - level verbose  
{
key: 'lastContact', 
type: {
  model: 'contacts', 
  child: false, 
  friendlyName: 'Last contact', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Last contact', 
  type: 'number', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.258 seconds - level verbose  
{ key: 'lastContact',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.258 seconds - level verbose  
{
key: 'lastContact', 
group: 'contacts', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.259 seconds - level verbose  
{ key: 'nextActionDate',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.259 seconds - level verbose  
{
key: 'nextActionDate', 
type: {
  friendlyName: 'Next action date', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
  input: {
    type: 'date', 
    hidden: true, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.259 seconds - level verbose  
{ key: 'nextActionDate',  type: 'date',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.259 seconds - level verbose  
{
key: 'nextActionDate', 
group: 'contacts', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.259 seconds - level verbose  
{ key: 'nextAction',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.259 seconds - level verbose  
{
key: 'nextAction', 
type: {
  friendlyName: 'Next action', 
  type: 'string', 
  description: 'When a contact is entered, this is updated.', 
  extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'text', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.259 seconds - level verbose  
{ key: 'nextAction',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.259 seconds - level verbose  
{
key: 'nextAction', 
group: 'contacts', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.259 seconds - level verbose  
{ key: 'mobilePhone',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.259 seconds - level verbose  
{
key: 'mobilePhone', 
type: {
  type: 'string', 
  friendlyName: 'Mobile phone', 
  database: { }, 
  process: { }, 
  description: 'Mobile phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.259 seconds - level verbose  
{ key: 'mobilePhone',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.259 seconds - level verbose  
{
key: 'mobilePhone', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.259 seconds - level verbose  
{ key: 'mainPhone',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.260 seconds - level verbose  
{
key: 'mainPhone', 
type: {
  type: 'string', 
  friendlyName: 'Main phone', 
  database: { }, 
  process: { }, 
  description: 'Main phone', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.260 seconds - level verbose  
{ key: 'mainPhone',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.260 seconds - level verbose  
{
key: 'mainPhone', 
group: 'location', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.260 seconds - level verbose  
{ key: 'lastSale',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.260 seconds - level verbose  
{
key: 'lastSale', 
type: {
  type: 'number', 
  model: 'salesorders', 
  friendlyName: 'Last sale', 
  description: 'Created automatically. This is a link to the last sales order.', 
  input: {
    hidden: true, 
    class: 'form-control', 
    type: 'number', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.260 seconds - level verbose  
{ key: 'lastSale',  type: 'number',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.260 seconds - level verbose  
{
key: 'lastSale', 
group: 'sales', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.260 seconds - level verbose  
{ key: 'notes',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.260 seconds - level verbose  
{
key: 'notes', 
type: {
  type: 'string', 
  friendlyName: 'Notes', 
  input: {
    type: 'textarea', 
    rows: 6, 
    cols: 60, 
    placeholder: 'Please enter any notes about this user.', 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  description: 'Notes', 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.260 seconds - level verbose  
{ key: 'notes',  type: 'textarea',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.260 seconds - level verbose  
{
key: 'notes', 
group: 'profile', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.260 seconds - level verbose  
{ key: 'webpages',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.260 seconds - level verbose  
{
key: 'webpages', 
type: {
  collection: 'webpages', 
  via: 'author', 
  friendlyName: 'Webpages', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'webpages' via column 'author'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.261 seconds - level verbose  
{ key: 'webpages',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.261 seconds - level verbose  
{
key: 'webpages', 
group: 'website', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.261 seconds - level verbose  
{ key: 'contacts',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.261 seconds - level verbose  
{
key: 'contacts', 
type: {
  collection: 'contacts', 
  via: 'user', 
  collectionList: {
    limit: 5, 
    order: 'date', 
    direction: 'DESC', 
    heading: 'Recent contacts', 
    columns: [ 'id',  'date',  'notes',  'closed',  ], 
    addChildTip: 'Add a new contact for this user.', 
    }, 
  friendlyName: 'Contacts', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'contacts' via column 'user'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.261 seconds - level verbose  
{ key: 'contacts',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.261 seconds - level verbose  
{
key: 'contacts', 
group: 'contacts', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.261 seconds - level verbose  
{ key: 'salesorders',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.261 seconds - level verbose  
{
key: 'salesorders', 
type: {
  collection: 'salesorders', 
  via: 'customer', 
  collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
  friendlyName: 'Salesorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'salesorders' via column 'customer'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.261 seconds - level verbose  
{ key: 'salesorders',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.261 seconds - level verbose  
{
key: 'salesorders', 
group: 'sales', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.261 seconds - level verbose  
{ key: 'products',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.262 seconds - level verbose  
{
key: 'products', 
type: {
  collection: 'products', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'price',  'class',  'description',  ], 
    }, 
  friendlyName: 'Products', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'products' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.262 seconds - level verbose  
{ key: 'products',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.262 seconds - level verbose  
{
key: 'products', 
group: 'products', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.262 seconds - level verbose  
{ key: 'purchaseorders',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.262 seconds - level verbose  
{
key: 'purchaseorders', 
type: {
  collection: 'purchaseorders', 
  via: 'supplier', 
  collectionList: {
    columns: [ 'name',  'date',  'status',  'notes',  ], 
    }, 
  friendlyName: 'Purchaseorders', 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.262 seconds - level verbose  
{ key: 'purchaseorders',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.262 seconds - level verbose  
{
key: 'purchaseorders', 
group: 'products', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:36:11 -> 0.262 seconds - level verbose  
{ key: 'people',  }

------------------------------------------------------------
merge-attributes.js:77:11 -> 0.262 seconds - level verbose  
{
key: 'people', 
type: {
  friendlyName: 'Associated people', 
  collection: 'user', 
  via: 'organisation', 
  collectionList: {
    columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
    }, 
  database: { }, 
  process: { }, 
  description: 'Linked from: 'user' via column 'organisation'.', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
}

------------------------------------------------------------
merge-attributes.js:87:11 -> 0.262 seconds - level verbose  
{ key: 'people',  type: 'text',  }

------------------------------------------------------------
merge-attributes.js:104:11 -> 0.262 seconds - level verbose  
{
key: 'people', 
group: 'contacts', 
permission: '#superuser#', 
}

------------------------------------------------------------
merge-attributes.js:162:9 -> 0.263 seconds - level verbose  
{
merged: {
  id: {
    friendlyName: 'User No', 
    type: 'number', 
    primaryKey: true, 
    autoincrement: true, 
    database: { }, 
    process: { }, 
    description: 'User No', 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  createdAt: {
    friendlyName: 'Date created', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { createdAt: true,  }, 
    description: 'Date created', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedAt: {
    friendlyName: 'Date last updated', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    process: { updatedAt: true,  }, 
    description: 'Date last updated', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  updatedBy: {
    friendlyName: 'Last updated by', 
    description: 'The person who last updated the row.', 
    type: 'number', 
    model: 'user', 
    process: { updatedBy: true,  }, 
    database: { }, 
    input: { class: 'form-control',  type: 'number',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  fullName: {
    type: 'string', 
    description: 'Full representation of the user's name.', 
    example: 'Mary Sue van der McHenst', 
    input: {
      required: true, 
      placeholder: 'Please enter the persons full name', 
      class: 'form-control', 
      type: 'text', 
      }, 
    friendlyName: 'Full name', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  emailAddress: {
    type: 'string', 
    friendlyName: 'Email address', 
    database: { }, 
    process: { }, 
    description: 'Email address', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  password: {
    type: 'string', 
    description: 'Securely hashed representation of the user's login password.', 
    permission: '#superuser#', 
    example: '2$28a8eabna301089103-13948134nad', 
    friendlyName: 'Password', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salt: {
    type: 'string', 
    permission: '#superuser#', 
    friendlyName: 'Salt', 
    database: { }, 
    process: { }, 
    description: 'Salt', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  forgottenPasswordToken: {
    permission: '#superuser#', 
    type: 'string', 
    friendlyName: 'Forgotten password token', 
    database: { }, 
    process: { }, 
    description: 'Forgotten password token', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  forgottenPasswordExpire: {
    permission: '#superuser#', 
    type: 'number', 
    display: { type: 'datetime',  truncateForTableList: 16,  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Forgotten password expire', 
    process: { }, 
    description: 'Forgotten password expire', 
    input: { class: 'form-control',  type: 'number',  }, 
    canEdit: true, 
    canView: true, 
    }, 
  isSuperAdmin: {
    type: 'boolean', 
    description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
    friendlyName: 'Is super admin', 
    database: { }, 
    process: { }, 
    input: { class: 'form-control',  type: 'checkbox',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSeenAt: {
    type: 'number', 
    description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
    example: 1502844074211, 
    input: { type: 'date',  class: 'form-control',  }, 
    display: { type: 'date',  }, 
    database: { type: 'biginteger',  }, 
    friendlyName: 'Last seen at', 
    process: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  streetAddress: {
    type: 'string', 
    input: {
      type: 'textarea', 
      rows: 5, 
      cols: 60, 
      placeholder: 'Please enter the street address of the user', 
      class: 'form-control', 
      }, 
    friendlyName: 'Street address', 
    database: { }, 
    process: { }, 
    description: 'Street address', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  zip: {
    type: 'string', 
    friendlyName: 'Zip', 
    database: { }, 
    process: { }, 
    description: 'Zip', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  country: {
    type: 'string', 
    friendlyName: 'Country', 
    database: { }, 
    process: { }, 
    description: 'Country', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  region: {
    description: 'This is an example of a select using the data in the isIn attribute.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: [
        'Europe', 
        'Middle East', 
        'Africa', 
        'South Asia', 
        'East', 
        'N America', 
        'S America', 
        ], 
      class: 'form-control', 
      }, 
    friendlyName: 'Region', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  permission: {
    friendlyName: 'Permission set', 
    type: 'string', 
    description: 'Permission set.', 
    extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
    allowNull: true, 
    input: {
      type: 'select', 
      values: Function, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  isOrg: {
    friendlyName: 'Person or Business?', 
    type: 'string', 
    description: 'This record describes a business rather than a person', 
    input: {
      type: 'radio', 
      values: { P: 'Person',  B: 'Business/Organisation',  }, 
      required: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  business: {
    type: 'string', 
    description: 'Description of the customer's business', 
    friendlyName: 'The type of business.', 
    input: {
      type: 'textarea', 
      rows: 3, 
      cols: 60, 
      placeholder: 'Please enter a description of the user's business and place in the organisation', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  organisation: {
    friendlyName: 'Organisation', 
    model: 'user', 
    description: 'The organsation this user belongs to (or holding group if this is an organisation)', 
    input: {
      type: 'select', 
      search: { searches: [ [ 'isOrg',  'equals',  'B',  ],  ],  }, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  userType: {
    description: 'The type of user.  Customer/Supplier or in-house.', 
    type: 'string', 
    input: {
      type: 'select', 
      values: {
        L: 'Sales lead', 
        P: 'Prospect', 
        C: 'Customer', 
        S: 'Supplier', 
        I: 'In-house staff', 
        N: 'No longer considered a prospect', 
        O: 'Other', 
        }, 
      required: true, 
      class: 'form-control', 
      }, 
    friendlyName: 'User type', 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastContact: {
    model: 'contacts', 
    child: false, 
    friendlyName: 'Last contact', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Last contact', 
    type: 'number', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextActionDate: {
    friendlyName: 'Next action date', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the date the user should be contacted next.  
        This is set up when a contact is registered that has a next action.', 
    input: {
      type: 'date', 
      hidden: true, 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  nextAction: {
    friendlyName: 'Next action', 
    type: 'string', 
    description: 'When a contact is entered, this is updated.', 
    extendedDescription: 'Created automatically with the description of the next action required.
        This is set up when a contact is registered that has a next action.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'text', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mobilePhone: {
    type: 'string', 
    friendlyName: 'Mobile phone', 
    database: { }, 
    process: { }, 
    description: 'Mobile phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  mainPhone: {
    type: 'string', 
    friendlyName: 'Main phone', 
    database: { }, 
    process: { }, 
    description: 'Main phone', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  lastSale: {
    type: 'number', 
    model: 'salesorders', 
    friendlyName: 'Last sale', 
    description: 'Created automatically. This is a link to the last sales order.', 
    input: {
      hidden: true, 
      class: 'form-control', 
      type: 'number', 
      }, 
    database: { }, 
    process: { }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  notes: {
    type: 'string', 
    friendlyName: 'Notes', 
    input: {
      type: 'textarea', 
      rows: 6, 
      cols: 60, 
      placeholder: 'Please enter any notes about this user.', 
      class: 'form-control', 
      }, 
    database: { }, 
    process: { }, 
    description: 'Notes', 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  webpages: {
    collection: 'webpages', 
    via: 'author', 
    friendlyName: 'Webpages', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'webpages' via column 'author'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'web',  ],  }, 
    }, 
  contacts: {
    collection: 'contacts', 
    via: 'user', 
    collectionList: {
      limit: 5, 
      order: 'date', 
      direction: 'DESC', 
      heading: 'Recent contacts', 
      columns: [ 'id',  'date',  'notes',  'closed',  ], 
      addChildTip: 'Add a new contact for this user.', 
      }, 
    friendlyName: 'Contacts', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'contacts' via column 'user'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  salesorders: {
    collection: 'salesorders', 
    via: 'customer', 
    collectionList: { columns: [ 'date',  'id',  'status',  'total',  ],  }, 
    friendlyName: 'Salesorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'salesorders' via column 'customer'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: { all: [ 'admin',  'sales',  ],  }, 
    }, 
  products: {
    collection: 'products', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'price',  'class',  'description',  ], 
      }, 
    friendlyName: 'Products', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'products' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  purchaseorders: {
    collection: 'purchaseorders', 
    via: 'supplier', 
    collectionList: {
      columns: [ 'name',  'date',  'status',  'notes',  ], 
      }, 
    friendlyName: 'Purchaseorders', 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'purchaseorders' via column 'supplier'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    permission: {
      all: [ 'admin',  'purchasing',  ], 
      view: [ 'sales',  ], 
      }, 
    }, 
  people: {
    friendlyName: 'Associated people', 
    collection: 'user', 
    via: 'organisation', 
    collectionList: {
      columns: [ 'fullName',  'mobilePhone',  'lastContact',  ], 
      }, 
    database: { }, 
    process: { }, 
    description: 'Linked from: 'user' via column 'organisation'.', 
    input: { class: 'form-control',  type: 'text',  }, 
    display: { }, 
    canEdit: true, 
    canView: true, 
    }, 
  }, 
}

------------------------------------------------------------
table-data.js:9:9 -> 0.263 seconds - level verbose  
{ inputs: { 0: 'user',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.263 seconds - level verbose  
'Users'

------------------------------------------------------------
table-data.js:26:13 -> 0.263 seconds - level verbose  
'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.'

------------------------------------------------------------
table-data.js:26:13 -> 0.263 seconds - level verbose  
{ all: [ 'sales',  'purchasing',  'admin',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.263 seconds - level verbose  
'Add a new user'

------------------------------------------------------------
table-data.js:26:13 -> 0.263 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:26:13 -> 0.264 seconds - level verbose  
{
columns: [
  'id', 
  'fullName', 
  'emailAddress', 
  'userType', 
  'organisation', 
  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.264 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.264 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.264 seconds - level verbose  
'User'

------------------------------------------------------------
table-data.js:100:9 -> 0.264 seconds - level verbose  
{
canedit: false, 
permission: undefined, 
mergedpermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
get-rows.js:33:9 -> 0.264 seconds - level norm  
{ searches: [ [ 'id',  'eq',  1,  ],  ],  }

------------------------------------------------------------
get-instruction.js:24:9 -> 0.264 seconds - level norm  
{
input: {
  0: 'user', 
  1: { searches: [ [ 'id',  'eq',  1,  ],  ],  }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:26:9 -> 0.264 seconds - level norm  
{
tableData: {
  friendlyName: 'Users', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  attributes: {
    id: [Deeper Object below level 3], 
    createdAt: [Deeper Object below level 3], 
    updatedAt: [Deeper Object below level 3], 
    updatedBy: [Deeper Object below level 3], 
    fullName: [Deeper Object below level 3], 
    emailAddress: [Deeper Object below level 3], 
    password: [Deeper Object below level 3], 
    salt: [Deeper Object below level 3], 
    forgottenPasswordToken: [Deeper Object below level 3], 
    forgottenPasswordExpire: [Deeper Object below level 3], 
    isSuperAdmin: [Deeper Object below level 3], 
    lastSeenAt: [Deeper Object below level 3], 
    streetAddress: [Deeper Object below level 3], 
    zip: [Deeper Object below level 3], 
    country: [Deeper Object below level 3], 
    region: [Deeper Object below level 3], 
    permission: [Deeper Object below level 3], 
    isOrg: [Deeper Object below level 3], 
    business: [Deeper Object below level 3], 
    organisation: [Deeper Object below level 3], 
    userType: [Deeper Object below level 3], 
    lastContact: [Deeper Object below level 3], 
    nextActionDate: [Deeper Object below level 3], 
    nextAction: [Deeper Object below level 3], 
    mobilePhone: [Deeper Object below level 3], 
    mainPhone: [Deeper Object below level 3], 
    lastSale: [Deeper Object below level 3], 
    notes: [Deeper Object below level 3], 
    webpages: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    salesorders: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    purchaseorders: [Deeper Object below level 3], 
    people: [Deeper Object below level 3], 
    }, 
  }, 
}

------------------------------------------------------------
get-instruction.js:34:9 -> 0.264 seconds - level norm  
{ searches: [ [ 'id',  'eq',  1,  ],  ],  }

------------------------------------------------------------
get-instruction.js:43:11 -> 0.264 seconds - level norm  
{ searchField: 'id',  compare: 'eq',  value: 1,  }

------------------------------------------------------------
get-instruction.js:82:9 -> 0.264 seconds - level norm  
{ instruction: 'user.id = ?',  bindings: [ 1,  ],  }

------------------------------------------------------------
get-rows.js:40:11 -> 0.264 seconds - level norm  
{
instruction: 'user.id = ?', 
bindings: [ 1,  ], 
edit: false, 
}

------------------------------------------------------------
get-rows.js:58:9 -> 0.265 seconds - level norm  
[
{
  id: 1, 
  createdAt: 1628767347442, 
  updatedAt: 1628869147126, 
  updatedBy: 1, 
  fullName: 'Administrator', 
  emailAddress: 'admin@admin.com', 
  password: 'e25af2521e8f491658de99ec003c721388c741f7a8890187ed9f870b8c8685ff74c6c9c87f5b3296b2c57e6217d542091c89280f141dad9d7ffd36495af8954c', 
  salt: 'dde1dc9313b1a4ef7f9c0572889a3e1135aac8eb518f6f98fe3425fd3bb8e76a', 
  forgottenPasswordToken: null, 
  forgottenPasswordExpire: null, 
  isSuperAdmin: 0, 
  lastSeenAt: 1628726400000, 
  streetAddress: '', 
  zip: '', 
  country: '', 
  region: '', 
  permission: '', 
  isOrg: 'P', 
  business: '', 
  organisation: 19, 
  userType: 'I', 
  lastContact: null, 
  nextActionDate: null, 
  nextAction: null, 
  mobilePhone: '', 
  mainPhone: '', 
  lastSale: null, 
  notes: '', 
  }, 
]

------------------------------------------------------------
get-row.js:18:9 -> 0.265 seconds - level norm  
{
table: 'user', 
value: 1, 
recordarray: [
  {
    id: 1, 
    createdAt: 1628767347442, 
    updatedAt: 1628869147126, 
    updatedBy: 1, 
    fullName: 'Administrator', 
    emailAddress: 'admin@admin.com', 
    password: 'e25af2521e8f491658de99ec003c721388c741f7a8890187ed9f870b8c8685ff74c6c9c87f5b3296b2c57e6217d542091c89280f141dad9d7ffd36495af8954c', 
    salt: 'dde1dc9313b1a4ef7f9c0572889a3e1135aac8eb518f6f98fe3425fd3bb8e76a', 
    forgottenPasswordToken: null, 
    forgottenPasswordExpire: null, 
    isSuperAdmin: 0, 
    lastSeenAt: 1628726400000, 
    streetAddress: '', 
    zip: '', 
    country: '', 
    region: '', 
    permission: '', 
    isOrg: 'P', 
    business: '', 
    organisation: 19, 
    userType: 'I', 
    lastContact: null, 
    nextActionDate: null, 
    nextAction: null, 
    mobilePhone: '', 
    mainPhone: '', 
    lastSale: null, 
    notes: '', 
    }, 
  ], 
}

------------------------------------------------------------
get-row.js:21:11 -> 0.265 seconds - level norm  
'Record: 
'
{
id: 1, 
createdAt: 1628767347442, 
updatedAt: 1628869147126, 
updatedBy: 1, 
fullName: 'Administrator', 
emailAddress: 'admin@admin.com', 
password: 'e25af2521e8f491658de99ec003c721388c741f7a8890187ed9f870b8c8685ff74c6c9c87f5b3296b2c57e6217d542091c89280f141dad9d7ffd36495af8954c', 
salt: 'dde1dc9313b1a4ef7f9c0572889a3e1135aac8eb518f6f98fe3425fd3bb8e76a', 
forgottenPasswordToken: null, 
forgottenPasswordExpire: null, 
isSuperAdmin: 0, 
lastSeenAt: 1628726400000, 
streetAddress: '', 
zip: '', 
country: '', 
region: '', 
permission: '', 
isOrg: 'P', 
business: '', 
organisation: 19, 
userType: 'I', 
lastContact: null, 
nextActionDate: null, 
nextAction: null, 
mobilePhone: '', 
mainPhone: '', 
lastSale: null, 
notes: '', 
}

------------------------------------------------------------
display-field.js:99:17 -> 0.266 seconds - level norm  
{
id: 1, 
createdAt: 1628767347442, 
updatedAt: 1628869147126, 
updatedBy: 1, 
fullName: 'Administrator', 
emailAddress: 'admin@admin.com', 
password: 'e25af2521e8f491658de99ec003c721388c741f7a8890187ed9f870b8c8685ff74c6c9c87f5b3296b2c57e6217d542091c89280f141dad9d7ffd36495af8954c', 
salt: 'dde1dc9313b1a4ef7f9c0572889a3e1135aac8eb518f6f98fe3425fd3bb8e76a', 
forgottenPasswordToken: null, 
forgottenPasswordExpire: null, 
isSuperAdmin: 0, 
lastSeenAt: 1628726400000, 
streetAddress: '', 
zip: '', 
country: '', 
region: '', 
permission: '', 
isOrg: 'P', 
business: '', 
organisation: 19, 
userType: 'I', 
lastContact: null, 
nextActionDate: null, 
nextAction: null, 
mobilePhone: '', 
mainPhone: '', 
lastSale: null, 
notes: '', 
}

------------------------------------------------------------
display-field.js:136:11 -> 0.266 seconds - level verbose  
{
friendlyName: 'Last updated by', 
description: 'The person who last updated the row.', 
type: 'number', 
model: 'user', 
process: { updatedBy: true,  }, 
database: { }, 
input: { class: 'form-control',  type: 'number',  }, 
display: { }, 
canEdit: true, 
canView: true, 
}

------------------------------------------------------------
display-field.js:137:11 -> 0.266 seconds - level norm  
'Administrator (User no:1)
            &nbsp;<a href="/admin?table=user&mode=listrow&id=1" >
            
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-box-arrow-up" viewBox="0 0 16 16">
    <path fill-rule="evenodd" d="M3.5 6a.5.5 0 0 0-.5.5v8a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-8a.5.5 0 0 0-.5-.5h-2a.5.5 0 0 1 0-1h2A1.5 1.5 0 0 1 14 6.5v8a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 14.5v-8A1.5 1.5 0 0 1 3.5 5h2a.5.5 0 0 1 0 1h-2z"/>
    <path f...'

------------------------------------------------------------
list-row.js:326:15 -> 0.266 seconds - level norm  
'other'
'password'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.266 seconds - level norm  
{
0: {
  type: 'string', 
  description: 'Securely hashed representation of the user's login password.', 
  permission: '#superuser#', 
  example: '2$28a8eabna301089103-13948134nad', 
  friendlyName: 'Password', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: 'ae6e5548f467a669624b7d81e753b0663675b6a0b3f8902efee83aab38df72083e1322d4ed2d47be8c870da9f06cbb014cf05d0ffdec02ebea7f220a0adb0a0a', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
display-field.js:69:11 -> 0.266 seconds - level norm  
'ae6e5548f467a669624b7d81e753b0663675b6a0b3f8902efee83aab38df72083e1322d4ed2d47be8c870da9f06cbb014cf05d0ffdec02ebea7f220a0adb0a0a'

------------------------------------------------------------
display-field.js:136:11 -> 0.266 seconds - level verbose  
{
type: 'string', 
description: 'Securely hashed representation of the user's login password.', 
permission: '#superuser#', 
example: '2$28a8eabna301089103-13948134nad', 
friendlyName: 'Password', 
database: { }, 
process: { }, 
input: { class: 'form-control',  type: 'text',  }, 
display: { }, 
canEdit: true, 
canView: true, 
}

------------------------------------------------------------
display-field.js:137:11 -> 0.266 seconds - level norm  
'ae6e5548f467a669624b7d81e753b0663675b6a0b3f8902efee83aab38df72083e1322d4ed2d47be8c870da9f06cbb014cf05d0ffdec02ebea7f220a0adb0a0a'

------------------------------------------------------------
list-row.js:326:15 -> 0.266 seconds - level norm  
'other'
'salt'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.266 seconds - level norm  
{
0: {
  type: 'string', 
  permission: '#superuser#', 
  friendlyName: 'Salt', 
  database: { }, 
  process: { }, 
  description: 'Salt', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: 'fd6b2c4bb7baaa90be133b528477c5afb606109d8f0b94ef3fbb1718b1805b41', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
display-field.js:69:11 -> 0.266 seconds - level norm  
'fd6b2c4bb7baaa90be133b528477c5afb606109d8f0b94ef3fbb1718b1805b41'

------------------------------------------------------------
display-field.js:136:11 -> 0.266 seconds - level verbose  
{
type: 'string', 
permission: '#superuser#', 
friendlyName: 'Salt', 
database: { }, 
process: { }, 
description: 'Salt', 
input: { class: 'form-control',  type: 'text',  }, 
display: { }, 
canEdit: true, 
canView: true, 
}

------------------------------------------------------------
display-field.js:137:11 -> 0.267 seconds - level norm  
'fd6b2c4bb7baaa90be133b528477c5afb606109d8f0b94ef3fbb1718b1805b41'

------------------------------------------------------------
list-row.js:326:15 -> 0.267 seconds - level norm  
'other'
'forgottenPasswordToken'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.267 seconds - level norm  
{
0: {
  permission: '#superuser#', 
  type: 'string', 
  friendlyName: 'Forgotten password token', 
  database: { }, 
  process: { }, 
  description: 'Forgotten password token', 
  input: { class: 'form-control',  type: 'text',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: '', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.267 seconds - level norm  
'other'
'forgottenPasswordExpire'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.267 seconds - level norm  
{
0: {
  permission: '#superuser#', 
  type: 'number', 
  display: { type: 'datetime',  truncateForTableList: 16,  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Forgotten password expire', 
  process: { }, 
  description: 'Forgotten password expire', 
  input: { class: 'form-control',  type: 'number',  }, 
  canEdit: true, 
  canView: true, 
  }, 
1: 0, 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.267 seconds - level norm  
'other'
'isSuperAdmin'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.267 seconds - level norm  
{
0: {
  type: 'boolean', 
  description: 'Whether this user is a &quot;super admin&quot; with extra permissions, etc.', 
  friendlyName: 'Is super admin', 
  database: { }, 
  process: { }, 
  input: { class: 'form-control',  type: 'checkbox',  }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: 0, 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
list-row.js:326:15 -> 0.267 seconds - level norm  
'other'
'lastSeenAt'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.267 seconds - level norm  
{
0: {
  type: 'number', 
  description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
  example: 1502844074211, 
  input: { type: 'date',  class: 'form-control',  }, 
  display: { type: 'date',  }, 
  database: { type: 'biginteger',  }, 
  friendlyName: 'Last seen at', 
  process: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: 1629504000000, 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
display-field.js:69:11 -> 0.267 seconds - level norm  
1629504000000

------------------------------------------------------------
display-field.js:136:11 -> 0.267 seconds - level verbose  
{
type: 'number', 
description: 'A JS timestamp (epoch ms) representing the moment at which this user most recently interacted with the backend while logged in (or 0 if they have not interacted with the backend at all yet).', 
example: 1502844074211, 
input: { type: 'date',  class: 'form-control',  }, 
display: { type: 'date',  }, 
database: { type: 'biginteger',  }, 
friendlyName: 'Last seen at', 
process: { }, 
canEdit: true, 
canView: true, 
}

------------------------------------------------------------
display-field.js:137:11 -> 0.267 seconds - level norm  
'Sat Aug 21 2021'

------------------------------------------------------------
list-row.js:326:15 -> 0.267 seconds - level norm  
'other'
'permission'
true

------------------------------------------------------------
display-field.js:22:11 -> 0.267 seconds - level norm  
{
0: {
  friendlyName: 'Permission set', 
  type: 'string', 
  description: 'Permission set.', 
  extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
  allowNull: true, 
  input: {
    type: 'select', 
    values: Function, 
    class: 'form-control', 
    }, 
  database: { }, 
  process: { }, 
  display: { }, 
  canEdit: true, 
  canView: true, 
  }, 
1: 'sales', 
2: undefined, 
3: 'sales', 
}

------------------------------------------------------------
display-field.js:69:11 -> 0.268 seconds - level norm  
'sales'

------------------------------------------------------------
display-field.js:136:11 -> 0.268 seconds - level verbose  
{
friendlyName: 'Permission set', 
type: 'string', 
description: 'Permission set.', 
extendedDescription: 'Every table, column group and column can have a set of permission values for 
        viewing. Tables addionally have permissions for editing and deleting rows.  
        The user can only carry out this finmction if their permission in this
        field is in the permission array. The permissions are set in config.subdstables', 
allowNull: true, 
input: {
  type: 'select', 
  values: Function, 
  class: 'form-control', 
  }, 
database: { }, 
process: { }, 
display: { }, 
canEdit: true, 
canView: true, 
}

------------------------------------------------------------
display-field.js:137:11 -> 0.268 seconds - level norm  
'Sales department'

------------------------------------------------------------
list-row.js:416:11 -> 0.268 seconds - level verbose  
{
group: 'other', 
rows: '
            <tr class="d-flex">
              <th scope="row" class="col-3" >
                <span title="User No">
                  User No
                </span>
              </th>
              <td  class="col-7">
                35
              </td>
              <td class="col-2 text-center">
                
              </td>
            </tr>
            <tr class="d-flex">
              <th scope="row" class="col-3" >
                <span title="Date created">
                 ...', 
}

------------------------------------------------------------
list-row.js:432:11 -> 0.268 seconds - level verbose  
{
group: 'basics', 
rows: '
            <tr class="d-flex">
              <th scope="row" class="col-3" >
                <span title="Full representation of the user's name.">
                  Full name
                </span>
              </th>
              <td  class="col-7">
                Willy Loman
              </td>
              <td class="col-2 text-center">
                
              </td>
            </tr>
            <tr class="d-flex">
              <th scope="row" class="col-3" >
                <s...', 
}

------------------------------------------------------------
list-row.js:439:9 -> 0.268 seconds - level norm  
{
tabs: [
  'profile', 
  'location', 
  'contacts', 
  'sales', 
  'products', 
  'website', 
  'other', 
  ], 
length: 7, 
}

------------------------------------------------------------
list-row.js:442:11 -> 0.268 seconds - level norm  
{
tabs: [
  'profile', 
  'location', 
  'contacts', 
  'sales', 
  'products', 
  'website', 
  'other', 
  ], 
}

------------------------------------------------------------
list-row.js:449:13 -> 0.268 seconds - level norm  
'profile'
'profile'

------------------------------------------------------------
list-row.js:449:13 -> 0.268 seconds - level norm  
'profile'
'location'

------------------------------------------------------------
list-row.js:449:13 -> 0.268 seconds - level norm  
'profile'
'contacts'

------------------------------------------------------------
list-row.js:449:13 -> 0.268 seconds - level norm  
'profile'
'sales'

------------------------------------------------------------
list-row.js:449:13 -> 0.268 seconds - level norm  
'profile'
'products'

------------------------------------------------------------
list-row.js:449:13 -> 0.268 seconds - level norm  
'profile'
'website'

------------------------------------------------------------
list-row.js:449:13 -> 0.268 seconds - level norm  
'profile'
'other'

------------------------------------------------------------
has-permission.js:6:9 -> 0.269 seconds - level norm  
{
permission: 'sales', 
table: 'user', 
has: 'edit', 
}

------------------------------------------------------------
table-data.js:9:9 -> 0.269 seconds - level verbose  
{ inputs: { 0: 'user',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.269 seconds - level verbose  
'Users'

------------------------------------------------------------
table-data.js:26:13 -> 0.269 seconds - level verbose  
'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.'

------------------------------------------------------------
table-data.js:26:13 -> 0.269 seconds - level verbose  
{ all: [ 'sales',  'purchasing',  'admin',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.269 seconds - level verbose  
'Add a new user'

------------------------------------------------------------
table-data.js:26:13 -> 0.269 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:26:13 -> 0.269 seconds - level verbose  
{
columns: [
  'id', 
  'fullName', 
  'emailAddress', 
  'userType', 
  'organisation', 
  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.269 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.269 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.269 seconds - level verbose  
'User'

------------------------------------------------------------
table-data.js:100:9 -> 0.269 seconds - level verbose  
{
canedit: false, 
permission: undefined, 
mergedpermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
has-permission.js:18:9 -> 0.269 seconds - level norm  
{
tablepermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
}

------------------------------------------------------------
has-permission.js:87:9 -> 0.270 seconds - level norm  
true

------------------------------------------------------------
list-row.js:505:9 -> 0.270 seconds - level norm  
{ hasPermission: true,  }

------------------------------------------------------------
has-permission.js:6:9 -> 0.270 seconds - level norm  
{
permission: 'sales', 
table: 'user', 
has: 'delete', 
}

------------------------------------------------------------
table-data.js:9:9 -> 0.270 seconds - level verbose  
{ inputs: { 0: 'user',  },  }

------------------------------------------------------------
table-data.js:26:13 -> 0.270 seconds - level verbose  
'Users'

------------------------------------------------------------
table-data.js:26:13 -> 0.270 seconds - level verbose  
'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.'

------------------------------------------------------------
table-data.js:26:13 -> 0.270 seconds - level verbose  
{ all: [ 'sales',  'purchasing',  'admin',  ],  }

------------------------------------------------------------
table-data.js:26:13 -> 0.270 seconds - level verbose  
'Add a new user'

------------------------------------------------------------
table-data.js:26:13 -> 0.270 seconds - level verbose  
Function

------------------------------------------------------------
table-data.js:26:13 -> 0.270 seconds - level verbose  
{
columns: [
  'id', 
  'fullName', 
  'emailAddress', 
  'userType', 
  'organisation', 
  ], 
}

------------------------------------------------------------
table-data.js:26:13 -> 0.271 seconds - level verbose  
{
basics: {
  static: true, 
  open: 'none', 
  columns: [
    'fullName', 
    'emailAddress', 
    'userType', 
    'isOrg', 
    ], 
  }, 
profile: {
  friendlyName: 'profile', 
  open: 'none', 
  columns: [ 'organisation',  'business',  'notes',  ], 
  }, 
location: {
  friendlyName: 'How to contact', 
  open: 'none', 
  columns: [
    'streetAddress', 
    'zip', 
    'country', 
    'region', 
    'mainPhone', 
    'mobilePhone', 
    ], 
  }, 
contacts: {
  friendlyName: 'Contacts', 
  open: 'contacts', 
  columns: [
    'people', 
    'contacts', 
    'lastContact', 
    'nextAction', 
    'nextActionDate', 
    ], 
  }, 
sales: {
  friendlyName: 'Sales', 
  open: 'salesorders', 
  columns: [ 'salesorders',  'lastSale',  ], 
  permission: { all: [ 'admin',  'sales',  ],  }, 
  }, 
products: {
  friendlyName: 'Products supplied', 
  open: 'products', 
  columns: [ 'products',  'purchaseorders',  ], 
  permission: {
    all: [ 'admin',  'purchasing',  ], 
    view: [ 'sales',  ], 
    }, 
  }, 
website: {
  friendlyName: 'Website', 
  open: 'website', 
  columns: [ 'webpages',  ], 
  permission: { all: [ 'admin',  'web',  ],  }, 
  }, 
other: {
  friendlyName: 'Other', 
  columns: [
    'id', 
    'createdAt', 
    'updatedAt', 
    'updatedBy', 
    'password', 
    'salt', 
    'forgottenPasswordToken', 
    'forgottenPasswordExpire', 
    'isSuperAdmin', 
    'lastSeenAt', 
    'permission', 
    ], 
  }, 
}

------------------------------------------------------------
table-data.js:46:9 -> 0.271 seconds - level verbose  
{ primaryKey: undefined,  }

------------------------------------------------------------
humanise-fieldname.js:15:9 -> 0.271 seconds - level verbose  
'User'

------------------------------------------------------------
table-data.js:100:9 -> 0.271 seconds - level verbose  
{
canedit: false, 
permission: undefined, 
mergedpermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
tableData: {
  friendlyName: 'User', 
  description: 'This table includes a row for each person or organisation that 
  the system needs to process. This may be a customer, supplier, or in-house staff. 
  Rows can be linked so it can indicate which organisation a customer works for.', 
  permission: { all: [Deeper Object below level 3],  }, 
  addRow: 'Add a new user', 
  rowTitle: Function, 
  list: { columns: [Deeper Object below level 3],  }, 
  groups: {
    basics: [Deeper Object below level 3], 
    profile: [Deeper Object below level 3], 
    location: [Deeper Object below level 3], 
    contacts: [Deeper Object below level 3], 
    sales: [Deeper Object below level 3], 
    products: [Deeper Object below level 3], 
    website: [Deeper Object below level 3], 
    other: [Deeper Object below level 3], 
    }, 
  primaryKey: 'id', 
  edit: { }, 
  canView: false, 
  canEdit: false, 
  canDelete: false, 
  }, 
}

------------------------------------------------------------
has-permission.js:18:9 -> 0.271 seconds - level norm  
{
tablepermission: { all: [ 'sales',  'purchasing',  'admin',  ],  }, 
}

------------------------------------------------------------
has-permission.js:87:9 -> 0.271 seconds - level norm  
true

------------------------------------------------------------
list-row.js:522:9 -> 0.271 seconds - level norm  
{ hasPermission: true,  }

------------------------------------------------------------
list-row.js:594:11 -> 0.271 seconds - level norm  
{ i: 0,  childname: 'webpages',  }

------------------------------------------------------------
list-row.js:594:11 -> 0.271 seconds - level norm  
{ i: 1,  childname: 'contacts',  }

------------------------------------------------------------
list-row.js:594:11 -> 0.271 seconds - level norm  
{ i: 2,  childname: 'salesorders',  }

------------------------------------------------------------
list-row.js:594:11 -> 0.271 seconds - level norm  
{ i: 3,  childname: 'products',  }

------------------------------------------------------------
list-row.js:594:11 -> 0.271 seconds - level norm  
{ i: 4,  childname: 'purchaseorders',  }

------------------------------------------------------------
list-row.js:594:11 -> 0.271 seconds - level norm  
{ i: 5,  childname: 'people',  }

------------------------------------------------------------
send-view.js:10:11 -> 0.272 seconds - level norm  
'sending output'
'object'

------------------------------------------------------------
admin.js:547:11 -> 0.273 seconds - level norm  
'OK'

***** Tracing transactions from client: ::ffff:192.168.0.56 only *****
Date: 2021-08-21T15:43:19.822Z
Next config refresh: 2021-08-21T15:44:19.822Z  (1 minutes)
Control file: ./trace.config
Maximum depth of nested objects: 8
Level:  verbose
Log file: trace.log

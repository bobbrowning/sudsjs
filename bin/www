#!/usr/bin/env node

/**
 * www
 * 
 * @name Entry
 * 
 */



var app = require('./app');
var debug = require('debug')('base:server');
var http = require('http');
var suds = require('../config/suds.js');
let trace = require('track-n-trace');

/**
 * Get port from environment and store in Express.
 */

trace.log(process.argv, { level: 'verbose' }); 
for (let arg of process.argv.slice(2)) {
  let arg2 = arg.split('=');
  process.env[arg2[0]] = arg2[1];
}
trace.log(process.env, { level: 'verbose' });
var port = normalizePort(process.env.PORT || suds.port);
app.set('port', port);

require('dotenv').config();
// console.log(process.env);
/** Establish database connection */
trace.log({driver: './suds/' + suds.dbDriver, level: 'verbose'})
let db=require('./suds/' + suds.dbDriver);
trace.log({required: db, level: 'verbose'});

db.connect();
trace.log({connected: suds.dbDriver, level: 'verbose'})

process.on('uncaughtException', err => {
  console.error('There was an uncaught error', err)
  process.exit(1) //mandatory (as per the Node.js docs)  
});
/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

console.log(`
Starting SUDSJS: ${new Date().toISOString()}
Listening on port ${port}
Logging format: ${suds.morgan.format}
`);
if (process.env.NODE_ENV) {
  console.log(`${process.env.NODE_ENV} mode`);
}
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
